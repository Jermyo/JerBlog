<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jer&#39;s Blog</title>
  
  <subtitle>The Harder You Work, The Luckier You Will Be.</subtitle>
  <link href="/JerBlog/atom.xml" rel="self"/>
  
  <link href="https://jermyo.github.io/JerBlog/"/>
  <updated>2019-08-01T08:27:07.522Z</updated>
  <id>https://jermyo.github.io/JerBlog/</id>
  
  <author>
    <name>Jer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue cli 3的配置 vue.config.js</title>
    <link href="https://jermyo.github.io/JerBlog/2019/08/01/Vue%20cli%203%E7%9A%84%E9%85%8D%E7%BD%AE%20vue.config.js/"/>
    <id>https://jermyo.github.io/JerBlog/2019/08/01/Vue cli 3的配置 vue.config.js/</id>
    <published>2019-08-01T08:14:25.000Z</published>
    <updated>2019-08-01T08:27:07.522Z</updated>
    
    <content type="html"><![CDATA[<p> 最近安装了下vue cli3版本， 和vue cli2 相比文件目录少了很多配置，没有了build和config目录，那么像vue cli2 之前的关于端口号的配置，打包之后路径的配置，图片的配置 等等，应该去哪里配置呢，vue cli3 可以在项目根目录新建一个vue.config.js文件，像之前的很多繁琐配置，都可以在这个文件里配置啦。<br>      官方是这样说的。vue.config.js 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载。你也可以使用 package.json 中的 vue 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。<br>      自己找了些搜集，整理了一下。</p><p>vue-cli3的源码部分：@vue/cli-service/lib/util/resolveClientEnv.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">module.exports = function resolveClientEnv (options, raw) &#123;</span><br><span class="line">  const env = &#123;&#125;</span><br><span class="line">  Object.keys(process.env).forEach(key =&gt; &#123;</span><br><span class="line">    if (prefixRE.test(key) || key === &apos;NODE_ENV&apos;) &#123;</span><br><span class="line">      env[key] = process.env[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  env.BASE_URL = options.baseUrl</span><br><span class="line"> </span><br><span class="line">  if (raw) &#123;</span><br><span class="line">    return env</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  for (const key in env) &#123;</span><br><span class="line">    env[key] = JSON.stringify(env[key])</span><br><span class="line">  &#125;</span><br><span class="line">  return &#123;</span><br><span class="line">    &apos;process.env&apos;: env</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>核心：env.BASE_URL = options.baseUrl；</p><p>在项目根目录创建一个 vue.config.js文件，可进行baseUrl配置，接口代理以及其他配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">// vue.config.js 配置说明</span><br><span class="line">//官方vue.config.js 参考文档 https://cli.vuejs.org/zh/config/#css-loaderoptions</span><br><span class="line">// 这里只列一部分，具体配置参考文档</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const debug = process.env.NODE_ENV !== &apos;production&apos;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // 部署生产环境和开发环境下的URL。</span><br><span class="line">    // 默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上</span><br><span class="line">    //例如 https://www.my-app.com/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 https://www.my-app.com/my-app/，则设置 baseUrl 为 /my-app/。</span><br><span class="line">    //baseUrl 从 Vue CLI 3.3 起已弃用，请使用publicPath</span><br><span class="line">    //baseUrl: process.env.NODE_ENV === &quot;production&quot; ? &quot;./&quot; : &quot;/&quot;,</span><br><span class="line">    publicPath: process.env.NODE_ENV === &quot;production&quot; ? &quot;./&quot; : &quot;/&quot;,</span><br><span class="line"></span><br><span class="line">    // outputDir: 在npm run build 或 yarn build 时 ，生成文件的目录名称（要和baseUrl的生产环境路径一致）</span><br><span class="line">    outputDir: &quot;./dist&quot;,</span><br><span class="line">    //用于放置生成的静态资源 (js、css、img、fonts) 的；（项目打包之后，静态资源会放在这个文件夹下）</span><br><span class="line">    // assetsDir: &quot;assets&quot;,</span><br><span class="line">    //指定生成的 index.html 的输出路径  (打包之后，改变系统默认的index.html的文件名)</span><br><span class="line">    indexPath: &quot;./dist/index.html&quot;,</span><br><span class="line">    //默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。你可以通过将这个选项设为 false 来关闭文件名哈希。(false的时候就是让原来的文件名不改变)</span><br><span class="line">    filenameHashing: false,</span><br><span class="line"></span><br><span class="line">    // lintOnSave：&#123; type:Boolean default:true &#125; 问你是否使用eslint</span><br><span class="line">    lintOnSave: true,</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     * 生产环境是否生成 sourceMap 文件</span><br><span class="line">     * 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。</span><br><span class="line">     * */</span><br><span class="line">    productionSourceMap: false,</span><br><span class="line">    chainWebpack: (config) =&gt; &#123;</span><br><span class="line">        if (debug) &#123; // 开发环境配置</span><br><span class="line">            config.devtool = &apos;cheap-module-eval-source-map&apos;</span><br><span class="line">        &#125; else &#123; // 生产环境配置</span><br><span class="line">            config.devtool = &apos;#source-map&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        // 修改文件引入自定义路径</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(&apos;@&apos;, path.resolve(__dirname, &apos;./src&apos;))</span><br><span class="line">            .set(&apos;@views&apos;, path.resolve(__dirname, &apos;./src/views&apos;))</span><br><span class="line">            .set(&apos;@components&apos;, path.resolve(__dirname, &apos;./src/components&apos;))</span><br><span class="line">            .set(&apos;@assets&apos;, path.resolve(__dirname, &apos;./src/assets&apos;))</span><br><span class="line">    &#125;,</span><br><span class="line">    // 和 chainWebpack 类似 </span><br><span class="line">    // configureWebpack: (config) =&gt; &#123;</span><br><span class="line">    // Object.assign(config, &#123; // 开发生产共同配置, 配置别名</span><br><span class="line">    //     resolve: &#123;</span><br><span class="line">    //         extensions: [&apos;.js&apos;, &apos;.json&apos;, &apos;.vue&apos;],</span><br><span class="line">    //         alias: &#123;</span><br><span class="line">    //             &apos;@&apos;: path.resolve(__dirname, &apos;./src&apos;) //设置路径别名</span><br><span class="line">    //             // &apos;@views&apos;: path.resolve(__dirname, &apos;./src/views&apos;),</span><br><span class="line">    //             // &apos;@components&apos;: path.resolve(__dirname, &apos;./src/components&apos;),</span><br><span class="line">    //             // &apos;@assets&apos;: path.resolve(__dirname, &apos;./src/assets&apos;)</span><br><span class="line">    //         &#125;</span><br><span class="line">    //     &#125;</span><br><span class="line">    // &#125;)</span><br><span class="line">    // &#125;,</span><br><span class="line"></span><br><span class="line">    // 它支持webPack-dev-server的所有选项</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        host: &quot;0.0.0.0&quot;, //指定使用地址，默认localhost,  0.0.0.0代表可以被外界访问</span><br><span class="line">        port: 8080, // 端口号</span><br><span class="line">        https: false, // 编译失败时刷新页面</span><br><span class="line">        open: true, //配置自动启动浏览器</span><br><span class="line">        hot: true, // 开启热加载</span><br><span class="line">        hotOnly: false,</span><br><span class="line">        // proxy: &apos;http://localhost:4000&apos; // 配置跨域处理,只有一个代理</span><br><span class="line"></span><br><span class="line">        // 配置多个代理</span><br><span class="line">        // proxy: &#123;</span><br><span class="line">        //     &quot;/api&quot;: &#123;</span><br><span class="line">        //         target: &quot;&lt;url&gt;&quot;,// 要访问的接口域名</span><br><span class="line">        //         ws: true,// 是否启用websockets</span><br><span class="line">        //         changeOrigin: true, //开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span><br><span class="line">        //         pathRewrite: &#123;</span><br><span class="line">        //             &apos;^/api&apos;: &apos;&apos; //这里理解成用&apos;/api&apos;代替target里面的地址,比如我要调用&apos;http://40.00.100.100:3002/user/add&apos;，直接写&apos;/api/user/add&apos;即可</span><br><span class="line">        //         &#125;</span><br><span class="line">        //     &#125;,</span><br><span class="line">        //     &quot;/foo&quot;: &#123;</span><br><span class="line">        //         target: &quot;&lt;other_url&gt;&quot;</span><br><span class="line">        //     &#125;</span><br><span class="line">        // &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">   * 第三方插件配置</span><br><span class="line">   */</span><br><span class="line">    pluginOptions: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 最近安装了下vue cli3版本， 和vue cli2 相比文件目录少了很多配置，没有了build和config目录，那么像vue cli2 之前的关于端口号的配置，打包之后路径的配置，图片的配置 等等，应该去哪里配置呢，vue cli3 可以在项目根目录新建一个vue.
      
    
    </summary>
    
      <category term="vue-cli3" scheme="https://jermyo.github.io/JerBlog/categories/vue-cli3/"/>
    
    
      <category term="vue" scheme="https://jermyo.github.io/JerBlog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3.0结合lib-flexible、px2rem实现移动端适配，完美解决第三方ui库样式变小问题</title>
    <link href="https://jermyo.github.io/JerBlog/2019/07/08/vue-cli3.0%E7%BB%93%E5%90%88lib-flexible%E3%80%81px2rem%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%EF%BC%8C%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%E7%AC%AC%E4%B8%89%E6%96%B9ui%E5%BA%93%E6%A0%B7%E5%BC%8F%E5%8F%98%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://jermyo.github.io/JerBlog/2019/07/08/vue-cli3.0结合lib-flexible、px2rem实现移动端适配，完美解决第三方ui库样式变小问题/</id>
    <published>2019-07-08T04:30:07.000Z</published>
    <updated>2019-07-08T05:33:05.269Z</updated>
    
    <content type="html"><![CDATA[<h6 id="公司最近做的一个移动端项目从搭框架到前端开发由我独立完成，以前做移动端适配用的媒体查询，这次想用点别的适配方案，然后就采用了vue-cli3-0结合lib-flexible、px2rem实现移动端适配的方案，开发过程中也遇到一些坑，自己选的方案自己填坑吧。以下记录我的项目框架搭建及填坑方案。"><a href="#公司最近做的一个移动端项目从搭框架到前端开发由我独立完成，以前做移动端适配用的媒体查询，这次想用点别的适配方案，然后就采用了vue-cli3-0结合lib-flexible、px2rem实现移动端适配的方案，开发过程中也遇到一些坑，自己选的方案自己填坑吧。以下记录我的项目框架搭建及填坑方案。" class="headerlink" title="公司最近做的一个移动端项目从搭框架到前端开发由我独立完成，以前做移动端适配用的媒体查询，这次想用点别的适配方案，然后就采用了vue-cli3.0结合lib-flexible、px2rem实现移动端适配的方案，开发过程中也遇到一些坑，自己选的方案自己填坑吧。以下记录我的项目框架搭建及填坑方案。"></a>公司最近做的一个移动端项目从搭框架到前端开发由我独立完成，以前做移动端适配用的媒体查询，这次想用点别的适配方案，然后就采用了vue-cli3.0结合lib-flexible、px2rem实现移动端适配的方案，开发过程中也遇到一些坑，自己选的方案自己填坑吧。以下记录我的项目框架搭建及填坑方案。</h6><p>搭建可以参考我的另一篇文章vue-cli 3.0 搭建项目流程，这里就不再另外说明了。下面说明项目搭建成功后的适配方案。</p><h4 id="第一部分：项目中引入lib-flexible"><a href="#第一部分：项目中引入lib-flexible" class="headerlink" title="第一部分：项目中引入lib-flexible"></a>第一部分：项目中引入lib-flexible</h4><h5 id="一、项目中安装lib-flexible"><a href="#一、项目中安装lib-flexible" class="headerlink" title="一、项目中安装lib-flexible"></a>一、项目中安装lib-flexible</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lib-flexible --save</span><br></pre></td></tr></table></figure><h5 id="二、在项目的入口main-js文件中引入lib-flexible"><a href="#二、在项目的入口main-js文件中引入lib-flexible" class="headerlink" title="二、在项目的入口main.js文件中引入lib-flexible"></a>二、在项目的入口main.js文件中引入lib-flexible</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;lib-flexible&apos;</span><br></pre></td></tr></table></figure><h4 id="第二部分：使用postcss-px2rem自动将css中的px转换成rem"><a href="#第二部分：使用postcss-px2rem自动将css中的px转换成rem" class="headerlink" title="第二部分：使用postcss-px2rem自动将css中的px转换成rem"></a>第二部分：使用postcss-px2rem自动将css中的px转换成rem</h4><h5 id="一、安装postcss-px2rem-一定看完文章再安装不然你会哭o-╥﹏╥-o"><a href="#一、安装postcss-px2rem-一定看完文章再安装不然你会哭o-╥﹏╥-o" class="headerlink" title="一、安装postcss-px2rem (一定看完文章再安装不然你会哭o(╥﹏╥)o)"></a>一、安装postcss-px2rem (一定看完文章再安装不然你会哭o(╥﹏╥)o)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-px2rem --save-dev</span><br></pre></td></tr></table></figure><h5 id="二、项目配置postcss"><a href="#二、项目配置postcss" class="headerlink" title="二、项目配置postcss"></a>二、项目配置postcss</h5><p>项目开始我是在vue.config.js（项目创建完初始是没有这个js文件的，需要自己手动创建）中配置的，上代码</p><p>复制代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">          postcss: &#123;</span><br><span class="line">            // 这是rem适配的配置  注意： remUnit在这里要根据lib-flexible的规则来配制，如果您的设计稿是750px的，用75就刚刚好。</span><br><span class="line">             plugins: [</span><br><span class="line">              require(&quot;postcss-px2rem&quot;)(&#123;</span><br><span class="line">                remUnit: 75</span><br><span class="line">          &#125;)</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制代码<br>初始的适配方案就完成了，然后可以直接在css或.vue文件中写已px为单位的样式了，到浏览器会自动转为rem。</p><p>因为前期项目安排不是太赶，ui给的设计图也相对简单，所以自己写了按钮组件之类的，适配还挺好，觉得自己棒棒哒~</p><p>直到ui的后续设计图出现时间插件，然后就引入了vant的组件库。</p><p>放了一个简单的cell组件，npm run serve项目跑起来，我想哭o(╥﹏╥)o，组件中的样式都变小了，F12看了一下果然组件的样式也都被转换成了rem。</p><p>问题</p><p>变小的主要原因是第三库 css一依据 data-dpr=”1” 时写的尺寸</p><p><meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"><br>这时我们使用的flexible引入时 data-dpr不是一个写死了的，是一个动态的；就导致这个问题</p><p>然后就各种查解决方案，网络上给的解决方案一个是改写第三方库的样式，还有一个就是让flexible不编译第三方库的文件（忽略ui组件库的样式文件）。</p><h6 id="解决方案一："><a href="#解决方案一：" class="headerlink" title="解决方案一："></a>解决方案一：</h6><p>将第三方组件的css文件复制出来第三方库的css代码px统一扩大2倍，或者用全局替换将px替换为px/<em>no</em>/。我觉的这个方案不太好没有采用，具体操作可以参考以下两篇文章：<a href="https://segmentfault.com/a/1190000014575890" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014575890</a> 和 <a href="https://blog.csdn.net/weixin_42464312/article/details/82769805。" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42464312/article/details/82769805。</a></p><h6 id="解决方案二："><a href="#解决方案二：" class="headerlink" title="解决方案二："></a>解决方案二：</h6><p>使用postcss-px2rem-exclude，网上好多说用这个方法不起作用，经过一个下午的折腾才发现是使用方法不对，我的错误方法就不跟你们说了，直接来正确的。<br>首先，需要卸载项目中的postcss-px2rem。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  uninstall postcss-px2rem --save-dev</span><br></pre></td></tr></table></figure><p>其次，安装postcss-px2rem-exclude</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  install postcss-px2rem-exclude --save</span><br></pre></td></tr></table></figure><p>最后是配置exclude选项，需要注意的是这个配置在vue.config.js中式不起作用的。</p><p>正确的配置位置是项目根目录下的postcss.config.js文件，如果你的项目没有生成这个独立文件，就需要在你的package.js里设置。</p><p>复制代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postcss.config.js</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">    &quot;postcss-px2rem-exclude&quot;: &#123;</span><br><span class="line">      remUnit: 75,</span><br><span class="line">      exclude: /node_modules|folder_name/i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>复制代码<br>复制代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line"></span><br><span class="line">&quot;postcss&quot;: &#123;</span><br><span class="line">    &quot;plugins&quot;: &#123;</span><br><span class="line">      &quot;autoprefixer&quot;: &#123;&#125;,</span><br><span class="line">      &quot;postcss-px2rem-exclude&quot;:&#123;</span><br><span class="line">          &quot;remUnit&quot;: 75,</span><br><span class="line">          &quot;exclude&quot;:&quot;/node_modules|floder_name/i&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>复制代码<br>ok，完成。</p><p>以上就是我这个项目的填坑经历，希望对你有用，能少走点弯路 o(<em>^＠^</em>)o</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;公司最近做的一个移动端项目从搭框架到前端开发由我独立完成，以前做移动端适配用的媒体查询，这次想用点别的适配方案，然后就采用了vue-cli3-0结合lib-flexible、px2rem实现移动端适配的方案，开发过程中也遇到一些坑，自己选的方案自己填坑吧。以下记录
      
    
    </summary>
    
      <category term="vue-cli3.0结合lib-flexible、px2rem实现移动端适配，完美解决第三方ui库样式变小问题" scheme="https://jermyo.github.io/JerBlog/categories/vue-cli3-0%E7%BB%93%E5%90%88lib-flexible%E3%80%81px2rem%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%EF%BC%8C%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%E7%AC%AC%E4%B8%89%E6%96%B9ui%E5%BA%93%E6%A0%B7%E5%BC%8F%E5%8F%98%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="vue" scheme="https://jermyo.github.io/JerBlog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jermyo.github.io/JerBlog/2019/06/26/call%E3%80%81apply%E5%92%8Cbind%E6%96%B9%E6%B3%95%E7%9A%84%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB/"/>
    <id>https://jermyo.github.io/JerBlog/2019/06/26/call、apply和bind方法的用法以及区别/</id>
    <published>2019-06-26T05:50:22.150Z</published>
    <updated>2019-06-26T05:50:29.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="call、apply和bind方法的用法以及区别"><a href="#call、apply和bind方法的用法以及区别" class="headerlink" title="call、apply和bind方法的用法以及区别"></a>call、apply和bind方法的用法以及区别</h1><hr><p>title: call、apply和bind方法的用法以及区别<br>date: 2019-06-26 11:00:07<br>tags: [js]</p><h2 id="categories-call、apply和bind方法的用法以及区别"><a href="#categories-call、apply和bind方法的用法以及区别" class="headerlink" title="categories: call、apply和bind方法的用法以及区别"></a>categories: call、apply和bind方法的用法以及区别</h2><p>call、apply、bind的作用是改变函数运行时this的指向，所以先说清楚this。</p><p>以下是函数的调用方法：</p><p>方法调用模式：<br>当一个函数被保存为对象的一个方法时，如果调用表达式包含一个提取属性的动作，那么它就是被当做一个方法来调用，此时的this被绑定到这个对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">var obj1 = &#123;</span><br><span class="line">  a:2,</span><br><span class="line">  fn:function()&#123;</span><br><span class="line">    console.log(this.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.fn()//2</span><br></pre></td></tr></table></figure><p>此时的this是指obj1这个对象，obj1.fn()实际上是obj1.fn.call(obj1)，事实上谁调用这个函数，this就是谁。补充一下，DOM对象绑定事件也属于方法调用模式，因此它绑定的this就是事件源DOM对象。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&apos;click&apos;, function(e)&#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;, 200);</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure><p>点击页面，依次输出：document和window对象<br>解析：点击页面监听click事件属于方法调用，this指向事件源DOM对象，即obj.fn.apply(obj)，setTimeout内的函数属于回调函数，可以这么理解，f1.call(null,f2)，所以this指向window。</p><p>函数调用模式：<br>就是普通函数的调用，此时的this被绑定到window</p><p>最普通的函数调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fn1()&#123;</span><br><span class="line">      console.log(this)//window</span><br><span class="line">    &#125;</span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><p>函数嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function fn1()&#123;</span><br><span class="line">    function fn2()&#123;</span><br><span class="line">        console.log(this)//window</span><br><span class="line">    &#125;</span><br><span class="line">    fn2()</span><br><span class="line">&#125;</span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><p>把函数赋值之后再调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">var obj1 = &#123;</span><br><span class="line">    a:2,</span><br><span class="line">    fn:function()&#123;</span><br><span class="line">        console.log(this.a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var fn1 = obj1.fn</span><br><span class="line">fn1()//1</span><br></pre></td></tr></table></figure><p>obj1.fn是一个函数function(){console.log(this.a)}，此时fn1就是不带任何修饰的函数调用，function(){console.log(this.a)}.call(undefined)，按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：</p><p>如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p><p>因此上面的this绑定的就是window，它也被称为隐性绑定。<br>如果你希望打印出2，可以修改fn1()为fn1.call(obj1)，显示地绑定this为obj1</p><p>回调函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">function f1(fn)&#123;</span><br><span class="line">    fn()</span><br><span class="line">    console.log(a)//1</span><br><span class="line">&#125;</span><br><span class="line">f1(f2)</span><br><span class="line"></span><br><span class="line">function f2()&#123;</span><br><span class="line">    var a = 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">function f1()&#123;</span><br><span class="line">    (function ()&#123;var a = 2&#125;)()</span><br><span class="line">    console.log(a)//1</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>仍旧是最普通的函数调用，f1.call(undefined)，this指向window，打印出的是全局的a。<br>借此，我们终于可以解释为什么setTimeout总是丢失this了，因为它也就是一个回调函数而已。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(this)//window</span><br><span class="line">    function fn()&#123;</span><br><span class="line">        console.log(this)//window</span><br><span class="line">    &#125;</span><br><span class="line">    fn()</span><br><span class="line">&#125;, 0);</span><br></pre></td></tr></table></figure><p>构造器调用模式:<br>new一个函数时，背地里会将创建一个连接到prototype成员的新对象，同时this会被绑定到那个新对象上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age)&#123;</span><br><span class="line">// 这里的this都指向实例</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line">    this.sayAge = function()&#123;</span><br><span class="line">        console.log(this.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var dot = new Person(&apos;Dot&apos;,2)</span><br><span class="line">dot.sayAge()//2</span><br><span class="line">call</span><br></pre></td></tr></table></figure><p>call 方法第一个参数是要绑定给this的值，后面传入的是一个参数列表。当第一个参数为null、undefined的时候，默认指向window。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 89, 46]</span><br><span class="line">var max = Math.max.call(null, arr[0], arr[1], arr[2], arr[3], arr[4])//89</span><br></pre></td></tr></table></figure><p>可以这么理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">obj1.fn() </span><br><span class="line">obj1.fn.call(obj1);</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line">fn1.call(null)</span><br><span class="line"></span><br><span class="line">f1(f2)</span><br><span class="line">f1.call(null,f2)</span><br></pre></td></tr></table></figure><p>看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    message: &apos;My name is: &apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getName(firstName, lastName) &#123;</span><br><span class="line">    console.log(this.message + firstName + &apos; &apos; + lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName.call(obj, &apos;Dot&apos;, &apos;Dolby&apos;)</span><br><span class="line">apply</span><br></pre></td></tr></table></figure><p>apply接受两个参数，第一个参数是要绑定给this的值，第二个参数是一个参数数组。当第一个参数为null、undefined的时候，默认指向window。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,89,46]</span><br><span class="line">var max = Math.max.apply(null,arr)//89</span><br><span class="line">可以这么理解：</span><br><span class="line"></span><br><span class="line">obj1.fn() </span><br><span class="line">obj1.fn.apply(obj1);</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line">fn1.apply(null)</span><br><span class="line"></span><br><span class="line">f1(f2)</span><br><span class="line">f1.apply(null,f2)</span><br></pre></td></tr></table></figure><p>是不是觉得和前面写的call用法很像，事实上apply 和 call 的用法几乎相同, 唯一的差别在于：当函数需要传递多个变量时, apply 可以接受一个数组作为参数输入, call 则是接受一系列的单独变量。<br>看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    message: &apos;My name is: &apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getName(firstName, lastName) &#123;</span><br><span class="line">    console.log(this.message + firstName + &apos; &apos; + lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName.apply(obj, [&apos;Dot&apos;, &apos;Dolby&apos;])// My name is: Dot Dolby</span><br></pre></td></tr></table></figure><p>可以看到，obj 是作为函数上下文的对象，函数 getName 中 this 指向了 obj 这个对象。参数 firstName 和 lastName 是放在数组中传入 getName 函数。</p><p>call和apply可用来借用别的对象的方法，这里以call()为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var Person1  = function () &#123;</span><br><span class="line">    this.name = &apos;Dot&apos;;</span><br><span class="line">&#125;</span><br><span class="line">var Person2 = function () &#123;</span><br><span class="line">    this.getname = function () &#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">    Person1.call(this);</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person2();</span><br><span class="line">person.getname();       // Dot</span><br></pre></td></tr></table></figure><p>从上面我们看到，Person2 实例化出来的对象 person 通过 getname 方法拿到了 Person1 中的 name。因为在 Person2 中，Person1.call(this) 的作用就是使用 Person1 对象代替 this 对象，那么 Person2 就有了 Person1 中的所有属性和方法了，相当于 Person2 继承了 Person1 的属性和方法。</p><p>对于什么时候该用什么方法，其实不用纠结。如果你的参数本来就存在一个数组中，那自然就用 apply，如果参数比较散乱相互之间没什么关联，就用 call。像上面的找一组数中最大值的例子，当然是用apply合理。</p><p>bind<br>和call很相似，第一个参数是this的指向，从第二个参数开始是接收的参数列表。区别在于bind方法返回值是函数以及bind接收的参数列表的使用。</p><p>bind返回值是函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    name: &apos;Dot&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function printName() &#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var dot = printName.bind(obj)</span><br><span class="line">console.log(dot) // function () &#123; … &#125;</span><br><span class="line">dot()  // Dot</span><br></pre></td></tr></table></figure><p>bind 方法不会立即执行，而是返回一个改变了上下文 this 后的函数。而原函数 printName 中的 this 并没有被改变，依旧指向全局对象 window。</p><p>参数的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function fn(a, b, c) &#123;</span><br><span class="line">    console.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">var fn1 = fn.bind(null, &apos;Dot&apos;);</span><br><span class="line"></span><br><span class="line">fn(&apos;A&apos;, &apos;B&apos;, &apos;C&apos;);            // A B C</span><br><span class="line">fn1(&apos;A&apos;, &apos;B&apos;, &apos;C&apos;);           // Dot A B</span><br><span class="line">fn1(&apos;B&apos;, &apos;C&apos;);                // Dot B C</span><br><span class="line">fn.call(null, &apos;Dot&apos;);      // Dot undefined undefined</span><br></pre></td></tr></table></figure><p>call 是把第二个及以后的参数作为 fn 方法的实参传进去，而 fn1 方法的实参实则是在 bind 中参数的基础上再往后排。</p><p>有时候我们也用bind方法实现函数珂里化，以下是一个简单的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var add = function(x) &#123;</span><br><span class="line">  return function(y) &#123;</span><br><span class="line">    return x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var increment = add(1);</span><br><span class="line">var addTen = add(10);</span><br><span class="line"></span><br><span class="line">increment(2);</span><br><span class="line">// 3</span><br><span class="line"></span><br><span class="line">addTen(2);</span><br><span class="line">// 12</span><br></pre></td></tr></table></figure><p>在低版本浏览器没有 bind 方法，我们也可以自己实现一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (!Function.prototype.bind) &#123;</span><br><span class="line">    Function.prototype.bind = function () &#123;</span><br><span class="line">        var self = this,                        // 保存原函数</span><br><span class="line">            context = [].shift.call(arguments), // 保存需要绑定的this上下文</span><br><span class="line">            args = [].slice.call(arguments);    // 剩余的参数转为数组</span><br><span class="line">        return function () &#123;                    // 返回一个新函数</span><br><span class="line">            self.apply(context, [].concat.call(args, [].slice.call(arguments)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景<br>求数组中的最大和最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,89,46]</span><br><span class="line">var max = Math.max.apply(null,arr)//89</span><br><span class="line">var min = Math.min.apply(null,arr)//1</span><br></pre></td></tr></table></figure><p>将类数组转化为数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var trueArr = Array.prototype.slice.call(arrayLike)</span><br></pre></td></tr></table></figure><p>数组追加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr1 = [1,2,3];</span><br><span class="line">var arr2 = [4,5,6];</span><br><span class="line">var total = [].push.apply(arr1, arr2);//6</span><br><span class="line">// arr1 [1, 2, 3, 4, 5, 6]</span><br><span class="line">// arr2 [4,5,6]</span><br></pre></td></tr></table></figure><p>判断变量类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function isArray(obj)&#123;</span><br><span class="line">    return Object.prototype.toString.call(obj) == &apos;[object Array]&apos;;</span><br><span class="line">&#125;</span><br><span class="line">isArray([]) // true</span><br><span class="line">isArray(&apos;dot&apos;) // false</span><br></pre></td></tr></table></figure><p>利用call和apply做继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age)&#123;</span><br><span class="line">    // 这里的this都指向实例</span><br><span class="line">    this.name = name</span><br><span class="line">    this.age = age</span><br><span class="line">    this.sayAge = function()&#123;</span><br><span class="line">        console.log(this.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function Female()&#123;</span><br><span class="line">    Person.apply(this,arguments)//将父元素所有方法在这里执行一遍就继承了</span><br><span class="line">&#125;</span><br><span class="line">var dot = new Female(&apos;Dot&apos;,2)</span><br></pre></td></tr></table></figure><p>使用 log 代理 console.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function log()&#123;</span><br><span class="line">  console.log.apply(console, arguments);</span><br><span class="line">&#125;</span><br><span class="line">// 当然也有更方便的 var log = console.log()</span><br></pre></td></tr></table></figure><p>总结<br>call、apply和bind函数存在的区别:<br>bind返回对应函数, 便于稍后调用； apply, call则是立即调用。</p><p>除此外, 在 ES6 的箭头函数下, call 和 apply 将失效, 对于箭头函数来说:</p><p>箭头函数体内的 this 对象, 就是定义时所在的对象, 而不是使用时所在的对象;所以不需要类似于var _this = this这种丑陋的写法<br>箭头函数不可以当作构造函数，也就是说不可以使用 new 命令, 否则会抛出一个错误<br>箭头函数不可以使用 arguments 对象,，该对象在函数体内不存在. 如果要用, 可以用 Rest 参数代替<br>不可以使用 yield 命令, 因此箭头函数不能用作 Generator 函数，什么是Generator函数可自行查阅资料</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;call、apply和bind方法的用法以及区别&quot;&gt;&lt;a href=&quot;#call、apply和bind方法的用法以及区别&quot; class=&quot;headerlink&quot; title=&quot;call、apply和bind方法的用法以及区别&quot;&gt;&lt;/a&gt;call、apply和bin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解Vue组件3大核心概念</title>
    <link href="https://jermyo.github.io/JerBlog/2019/06/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Vue%E7%BB%84%E4%BB%B63%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>https://jermyo.github.io/JerBlog/2019/06/25/深入理解Vue组件3大核心概念/</id>
    <published>2019-06-25T03:00:07.000Z</published>
    <updated>2019-06-25T03:50:59.841Z</updated>
    
    <content type="html"><![CDATA[<p>深入理解Vue组件3大核心概念</p><p>前言<br>本文主要介绍属性、事件和插槽这三个vue基础概念、使用方法及其容易被忽略的一些重要细节。如果你阅读别人写的组件，也可以从这三个部分展开，它们可以帮助你快速了解一个组件的所有功能。</p><h3 id="一、属性"><a href="#一、属性" class="headerlink" title="一、属性"></a>一、属性</h3><h4 id="1-自定义属性props"><a href="#1-自定义属性props" class="headerlink" title="1. 自定义属性props"></a>1. 自定义属性props</h4><p>prop 定义了这个组件有哪些可配置的属性，组件的核心功能也都是它来确定的。写通用组件时，props 最好用对象的写法，这样可以针对每个属性设置类型、默认值或自定义校验属性的值，这点在组件开发中很重要，然而很多人却忽视，直接使用 props 的数组用法，这样的组件往往是不严谨的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line"> &lt;props name=&apos;属性&apos;</span><br><span class="line">           :type=&apos;type&apos;</span><br><span class="line">           :is-visible=&quot;false&quot;</span><br><span class="line">           :on-change=&quot;handlePropChange&quot;</span><br><span class="line">           :list=[22,33,44]</span><br><span class="line">           title=&quot;属性Demo&quot;</span><br><span class="line">           class=&quot;test1&quot;</span><br><span class="line">           :class=&quot;[&apos;test2&apos;]&quot;</span><br><span class="line">           :style=&quot;&#123; marginTop: &apos;20px&apos; &#125;&quot; //注意:style 的优先级是要高于 style</span><br><span class="line">           style=&quot;margin-top: 10px&quot;&gt;</span><br><span class="line">  &lt;/props&gt;</span><br><span class="line">// 子组件</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: String,</span><br><span class="line">    type: &#123;</span><br><span class="line">　  //从父级传入的 type，它的值必须是指定的 &apos;success&apos;, &apos;warning&apos;, &apos;danger&apos;中的一个，如果传入这三个以外的值，都会抛出一条警告</span><br><span class="line">      validator: (value) =&gt; &#123;</span><br><span class="line">        return [&apos;success&apos;, &apos;warning&apos;, &apos;danger&apos;].includes(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onChange: &#123;</span><br><span class="line">    //对于接收的数据，可以是各种数据类型，同样也可以传递一个函数</span><br><span class="line">      type: Function,</span><br><span class="line">      default: () =&gt; &#123; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    isVisible: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      default: false</span><br><span class="line">    &#125;,</span><br><span class="line">    list: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      // 对象或数组默认值必须从一个工厂函数获取</span><br><span class="line">      default: () =&gt; []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从上面的例中，可以得出props 可以显示定义一个或一个以上的数据，对于接收的数据，可以是各种数据类型，同样也可以传递一个函数。通过一般属性实现父向子通信；通过函数属性实现子向父通信</p><h4 id="2-inheritAttrs"><a href="#2-inheritAttrs" class="headerlink" title="2. inheritAttrs"></a>2. inheritAttrs</h4><p>这是2.4.0 新增的一个API，默认情况下父作用域的不被认作 props 的特性绑定将会“回退”且作为普通的 HTML 特性应用在子组件的根元素上。可通过设置 inheritAttrs 为 false，这些默认行为将会被去掉。注意：这个选项不影响 class 和 style 绑定。<br>上个例中，title属性没有在子组件中props中声明，就会默认挂在子组件的根元素上，如下图所示：</p><h4 id="3-data与props区别"><a href="#3-data与props区别" class="headerlink" title="3. data与props区别"></a>3. data与props区别</h4><p>相同点<br>两者选项里都可以存放各种类型的数据，当行为操作改变时，所有行为操作所用到和模板所渲染的数据同时都会发生同步变化。</p><p>不同点<br>data 被称之为动态数据，在各自实例中，在任何情况下，我们都可以随意改变它的数据类型和数据结构，不会被任何环境所影响。</p><p>props 被称之为静态数据，在各自实例中，一旦在初始化被定义好类型时，基于 Vue 是单向数据流，在数据传递时始终不能改变它的数据类型，而且不允许在子组件中直接操作 传递过来的props数据，而是需要通过别的手段，改变传递源中的数据。至于如何改变，我们接下去详细介绍：</p><h4 id="4-单向数据流"><a href="#4-单向数据流" class="headerlink" title="4. 单向数据流"></a>4. 单向数据流</h4><p>这个概念出现在组件通信。props的数据都是通过父组件或者更高层级的组件数据或者字面量的方式进行传递的，不允许直接操作改变各自实例中的props数据，而是需要通过别的手段，改变传递源中的数据。那如果有时候我们想修改传递过来的prop,有哪些办法呢？</p><h6 id="方法1：过渡到-data-选项中"><a href="#方法1：过渡到-data-选项中" class="headerlink" title="方法1：过渡到 data 选项中"></a>方法1：过渡到 data 选项中</h6><p>在子组件的 data 中拷贝一份 prop，data 是可以修改的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    type: String</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      currentType: this.type</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 data 选项里通过 currentType接收 props中type数据，相当于对 currentType= type进行一个赋值操作，不仅拿到了 currentType的数据，而且也可以改变 currentType数据。</p><h6 id="方法2：利用计算属性"><a href="#方法2：利用计算属性" class="headerlink" title="方法2：利用计算属性"></a>方法2：利用计算属性</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    type: String</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    normalizedType: function () &#123;</span><br><span class="line">      return this.type.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两种方法虽可以在子组件间接修改props的值，但如果子组件想修改数据并且同步更新到父组件，却无济于事。在一些情况下，我们可能会需要对一个 prop 进行『双向绑定』，此时就推荐以下这两种方法：</p><h6 id="方法3：使用-sync"><a href="#方法3：使用-sync" class="headerlink" title="方法3：使用.sync"></a>方法3：使用.sync</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;父组件msg：&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;父组件数组：&#123;&#123; arr &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;show = true&quot;&gt;打开model框&lt;/button&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;demo :show.sync=&quot;show&quot; :msg.sync=&quot;msg&quot; :arr=&quot;arr&quot;&gt;&lt;/demo&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Demo from &quot;./demo.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Hello&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Demo</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: false,</span><br><span class="line">      msg: &quot;模拟一个model框&quot;,</span><br><span class="line">      arr: [1, 2, 3]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;show&quot; class=&quot;border&quot;&gt;</span><br><span class="line">    &lt;div&gt;子组件msg：&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;子组件数组：&#123;&#123; arr &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;closeModel&quot;&gt;关闭model框&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$emit(&apos;update:msg&apos;, &apos;浪里行舟&apos;)&quot;&gt;</span><br><span class="line">      改变文字</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;arr.push(&apos;前端工匠&apos;)&quot;&gt;改变数组&lt;/button&gt; </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;,</span><br><span class="line">    show: &#123;</span><br><span class="line">      type: Boolean</span><br><span class="line">    &#125;,</span><br><span class="line">    arr: &#123;</span><br><span class="line">      type: Array //在子组件中改变传递过来数组将会影响到父组件的状态</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    closeModel() &#123;</span><br><span class="line">      this.$emit(&quot;update:show&quot;, false);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>父组件向子组件 props 里传递了 msg 和 show 两个值，都用了.sync 修饰符，进行双向绑定。</p><p>不过.sync 虽好，但也有限制，比如：</p><p>1）不能和表达式一起使用（如v-bind:title.sync=”doc.title + ‘!’”是无效的）；<br>2）不能用在字面量对象上（如v-bind.sync=”{ title: doc.title }”是无法正常工作的）。</p><h6 id="方法4：将父组件中的数据包装成对象传递给子组件"><a href="#方法4：将父组件中的数据包装成对象传递给子组件" class="headerlink" title="方法4：将父组件中的数据包装成对象传递给子组件"></a>方法4：将父组件中的数据包装成对象传递给子组件</h6><p>这是因为在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变这个对象或数组本身将会影响到父组件的状态。比如上例中在子组件中修改父组件传递过来的数组arr,从而改变父组件的状态。</p><ol start="5"><li>向子组件中传递数据时加和不加 v-bind？<br>对于字面量语法和动态语法，初学者可能在父组件模板中向子组件中传递数据时到底加和不加 v-bind 会感觉迷惑。</li></ol><p>v-bind:msg = ‘msg’</p><p>这是通过 v-bind 进行传递数据并且传递的数据并不是一个字面量，双引号里的解析的是一个表达式，同样也可以是实例上定义的数据和方法(其实就是引用一个变量）。</p><p>msg=’浪里行舟’</p><p>这种在没有 v-bind 的模式下只能传递一个字面量，这个字面量只限于 String 类量，字符串类型。那如果想通过字面量进行数据传递时，如果想传递非String类型，必须props名前要加上v-bind，内部通过实例寻找，如果实例方没有此属性和方法，则默认为对应的数据类型。</p><p>:msg=’11111’ //Number<br>:msg=’true’ //Bootlean<br>:msg=’()=&gt;{console.log(1)}’ //Function<br>:msg=’{a:1}’ //Object</p><h3 id="二、事件"><a href="#二、事件" class="headerlink" title="二、事件"></a>二、事件</h3><h4 id="1-事件驱动与数据驱动"><a href="#1-事件驱动与数据驱动" class="headerlink" title="1. 事件驱动与数据驱动"></a>1. 事件驱动与数据驱动</h4><p>用原生JavaScript事件驱动通常是这样的流程：</p><p>先通过特定的选择器查找到需要操作的节点 -&gt; 给节点添加相应的事件监听<br>然后用户执行某事件（点击，输入，后退等等） -&gt; 调用 JavaScript 来修改节点<br>这种模式对业务来说是没有什么问题，但是从开发成本和效率来说会比较不理想，特别是在业务系统越来越庞大的时候。另一方面，找节点和修改节点这件事，效率本身就很低，因此出现了数据驱动模式。</p><p>Vue的一个核心思想是数据驱动。所谓数据驱动，是指视图是由数据驱动生成的，我们对视图的修改，不会直接操作 DOM，而是通过修改数据,其流程如下：</p><p>用户执行某个操作 -&gt; 反馈到 VM 处理（可以导致 Model 变动） -&gt; VM 层改变，通过绑定关系直接更新页面对应位置的数据</p><p>可以简单地理解：数据驱动不是操作节点的，而是通过虚拟的抽象数据层来直接更新页面。主要就是因为这一点，数据驱动框架才得以有较快的运行速度（因为不需要去折腾节点），并且可以应用到大型项目。</p><h4 id="2-修饰符事件"><a href="#2-修饰符事件" class="headerlink" title="2. 修饰符事件"></a>2. 修饰符事件</h4><p>Vue事件分为普通事件和修饰符事件，这里我们主要介绍修饰符事件。</p><p>Vue 提供了大量的修饰符封装了这些过滤和判断，让开发者少写代码，把时间都投入的业务、逻辑上，只需要通过一个修饰符去调用。我们先来思考这样问题：怎样给这个自定义组件 custom-component 绑定一个原生的 click 事件？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-component&gt;组件内容&lt;/custom-component&gt;</span><br></pre></td></tr></table></figure><p>如果你的回答是<custom-component @click="xxx">，那就错了。这里的 @click 是自定义事件 click，并不是原生事件 click。绑定原生的 click 是这样的：</custom-component></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-component @click.native=&quot;xxx&quot;&gt;组件内容&lt;/custom-component&gt;</span><br></pre></td></tr></table></figure><p>实际开发过程中离不开事件修饰符，常见事件修饰符有以下这些：</p><p>表单修饰符</p><h6 id="1-lazy"><a href="#1-lazy" class="headerlink" title="1).lazy"></a>1).lazy</h6><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 。你可以添加 lazy 修饰符，从而转变为使用 change事件进行同步。适用于输入完所有内容后，光标离开才更新视图的场景。</p><h6 id="2-trim"><a href="#2-trim" class="headerlink" title="2).trim"></a>2).trim</h6><p>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个修饰符可以过滤掉输入完密码不小心多敲了一下空格的场景。需要注意的是，它只能过滤首尾的空格！首尾，中间的是不会过滤的。</p><h6 id="3-number"><a href="#3-number" class="headerlink" title="3).number"></a>3).number</h6><p>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.number=&quot;value&quot; type=&quot;text&quot; /&gt;</span><br></pre></td></tr></table></figure><p>从上面例子，可以得到如果你先输入数字，那它就会限制你输入的只能是数字。如果你先输入字符串，那它就相当于没有加.number</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">事件修饰符</span><br><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>三、插槽<br>插槽分为普通插槽和作用域插槽，其实两者很类似，只不过作用域插槽可以接受子组件传递过来的参数。</p><ol><li>作用域插槽<br>我们不妨通过一个todolist的例子来了解作用域插槽。如果当item选中后，文字变为黄色（如下图所示），该如何实现呢？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;toList&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;info&quot; type=&quot;text&quot; /&gt; &lt;button @click=&quot;addItem&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;TodoItem v-for=&quot;(item, index) in listData&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;template v-slot:item=&quot;itemProps&quot;&gt; // 这是个具名插槽</span><br><span class="line">        // 其中itemProps的值就是子组件传递过来的对象</span><br><span class="line">          &lt;span</span><br><span class="line">            :style=&quot;&#123;</span><br><span class="line">              fontSize: &apos;20px&apos;,</span><br><span class="line">              color: itemProps.checked ? &apos;yellow&apos; : &apos;blue&apos;</span><br><span class="line">            &#125;&quot;</span><br><span class="line">            &gt;&#123;&#123; item &#125;&#125;&lt;/span</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/TodoItem&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import TodoItem from &quot;./TodoItem&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    TodoItem</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info: &quot;&quot;,</span><br><span class="line">      listData: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addItem() &#123;</span><br><span class="line">      this.listData.push(this.info);</span><br><span class="line">      this.info = &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;li class=&quot;item&quot;&gt;</span><br><span class="line">      &lt;input v-model=&quot;checked&quot; type=&quot;checkbox&quot; /&gt;</span><br><span class="line">      &lt;slot name=&quot;item&quot; :checked=&quot;checked&quot;&gt;&lt;/slot&gt; // 将checked的值传递给父组件</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      checked: false</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>值得注意：v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名。</p><ol start="2"><li>v-slot新语法<br>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。它取代了 slot 和 slot-scope 。<br>我们通过一个例子介绍下默认插槽、具名插槽和作用域插槽的新语法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;helloSlot&quot;&gt;</span><br><span class="line">    &lt;h2&gt;2.6 新语法&lt;/h2&gt;</span><br><span class="line">    &lt;SlotDemo&gt;</span><br><span class="line">      &lt;p&gt;默认插槽：default slot&lt;/p&gt;</span><br><span class="line">      &lt;template v-slot:title&gt;</span><br><span class="line">        &lt;p&gt;具名插槽：title slot1&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;具名插槽：title slot2&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-slot:item=&quot;props&quot;&gt;</span><br><span class="line">        &lt;p&gt;作用域插槽：item slot-scope &#123;&#123; props &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/SlotDemo&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Slot from &quot;./slot&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    SlotDemo: Slot</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">    &lt;slot name=&quot;title&quot; /&gt;</span><br><span class="line">    &lt;slot name=&quot;item&quot; :propData=&quot;propData&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      propData: &#123;</span><br><span class="line">        value: &quot;浪里行舟&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;深入理解Vue组件3大核心概念&lt;/p&gt;
&lt;p&gt;前言&lt;br&gt;本文主要介绍属性、事件和插槽这三个vue基础概念、使用方法及其容易被忽略的一些重要细节。如果你阅读别人写的组件，也可以从这三个部分展开，它们可以帮助你快速了解一个组件的所有功能。&lt;/p&gt;
&lt;h3 id=&quot;一、属性&quot;&gt;
      
    
    </summary>
    
      <category term="深入理解Vue组件3大核心概念" scheme="https://jermyo.github.io/JerBlog/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Vue%E7%BB%84%E4%BB%B63%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    
    
      <category term="vue" scheme="https://jermyo.github.io/JerBlog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>九种跨域方式实现原理（完整版）</title>
    <link href="https://jermyo.github.io/JerBlog/2019/06/23/%E4%B9%9D%E7%A7%8D%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89/"/>
    <id>https://jermyo.github.io/JerBlog/2019/06/23/九种跨域方式实现原理（完整版）/</id>
    <published>2019-06-23T03:00:07.000Z</published>
    <updated>2019-06-26T08:03:41.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="九种跨域方式实现原理（完整版）"><a href="#九种跨域方式实现原理（完整版）" class="headerlink" title="九种跨域方式实现原理（完整版）"></a>九种跨域方式实现原理（完整版）</h1><p>前言<br>前后端数据交互经常会碰到请求跨域，什么是跨域，以及有哪几种跨域方式，这是本文要探讨的内容。</p><h3 id="一、什么是跨域？"><a href="#一、什么是跨域？" class="headerlink" title="一、什么是跨域？"></a>一、什么是跨域？</h3><p>1.什么是同源策略及其限制内容？<br>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。<br>url的组成</p><p>同源策略限制内容有：<br>Cookie、LocalStorage、IndexedDB 等存储性内容<br>DOM 节点<br>AJAX 请求发送后，结果被浏览器拦截了<br>但是有三个标签是允许跨域加载资源：</p><p><img src="XXX"></p><p><link href="XXX"></p><p><script src="XXX"><br>2.常见跨域场景<br>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：<br>image<br>特别说明两点：</p><p>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</p><p>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。</p><p>这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？</p><p>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><p>二、跨域解决方案<br>1.jsonp<br>1) JSONP原理<br>利用 <script> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</p><p>2) JSONP和AJAX对比<br>JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p><p>3) JSONP优缺点<br>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。</p><p>4) JSONP的实现流程<br>声明一个回调函数，其函数名(如show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data)。<br>创建一个<script>标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。<br>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是show(‘我不爱你’)。<br>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。<br>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line">function jsonp(&#123; url, params, callback &#125;) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    let script = document.createElement(&apos;script&apos;)</span><br><span class="line">    window[callback] = function(data) &#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">      document.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123; ...params, callback &#125; // wd=b&amp;callback=show</span><br><span class="line">    let arrs = []</span><br><span class="line">    for (let key in params) &#123;</span><br><span class="line">      arrs.push(`$&#123;key&#125;=$&#123;params[key]&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = `$&#123;url&#125;?$&#123;arrs.join(&apos;&amp;&apos;)&#125;`</span><br><span class="line">    document.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: &apos;http://localhost:3000/say&apos;,</span><br><span class="line">  params: &#123; wd: &apos;Iloveyou&apos; &#125;,</span><br><span class="line">  callback: &apos;show&apos;</span><br><span class="line">&#125;).then(data =&gt; &#123;</span><br><span class="line">  console.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面这段代码相当于向<a href="http://localhost:3000/say?wd=Iloveyou&amp;callback=show这个地址请求数据，然后后台返回show(&#39;我不爱你&#39;)，最后会运行show()这个函数，打印出&#39;我不爱你&#39;">http://localhost:3000/say?wd=Iloveyou&amp;callback=show这个地址请求数据，然后后台返回show(&#39;我不爱你&#39;)，最后会运行show()这个函数，打印出&#39;我不爱你&#39;</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// server.js</span><br><span class="line">let express = require(&apos;express&apos;)</span><br><span class="line">let app = express()</span><br><span class="line">app.get(&apos;/say&apos;, function(req, res) &#123;</span><br><span class="line">  let &#123; wd, callback &#125; = req.query</span><br><span class="line">  console.log(wd) // Iloveyou</span><br><span class="line">  console.log(callback) // show</span><br><span class="line">  res.end(`$&#123;callback&#125;(&apos;我不爱你&apos;)`)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure><p>5) jQuery的jsonp形式<br>JSONP都是GET和异步请求的，不存在其他的请求方式和同步请求，且jQuery默认就会给JSONP的请求清除缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:&quot;http://crossdomain.com/jsonServerResponse&quot;,</span><br><span class="line">dataType:&quot;jsonp&quot;,</span><br><span class="line">type:&quot;get&quot;,//可以省略</span><br><span class="line">jsonpCallback:&quot;show&quot;,//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span><br><span class="line">jsonp:&quot;callback&quot;,//-&gt;把传递函数名的那个形参callback，可省略</span><br><span class="line">success:function (data)&#123;</span><br><span class="line">console.log(data);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.cors<br>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。</p><p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p><p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。</p><p>1) 简单请求<br>只要同时满足以下两大条件，就属于简单请求</p><p>条件1：使用下列方法之一：</p><p>GET<br>HEAD<br>POST<br>条件2：Content-Type 的值仅限于下列三者之一：</p><p>text/plain<br>multipart/form-data<br>application/x-www-form-urlencoded<br>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p><p>2) 复杂请求<br>不符合以上条件的请求就肯定是复杂请求了。<br>复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p><p>我们用PUT向后台请求时，属于复杂请求，后台需做如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 允许哪个方法访问我</span><br><span class="line">res.setHeader(&apos;Access-Control-Allow-Methods&apos;, &apos;PUT&apos;)</span><br><span class="line">// 预检的存活时间</span><br><span class="line">res.setHeader(&apos;Access-Control-Max-Age&apos;, 6)</span><br><span class="line">// OPTIONS请求不做任何处理</span><br><span class="line">if (req.method === &apos;OPTIONS&apos;) &#123;</span><br><span class="line">  res.end() </span><br><span class="line">&#125;</span><br><span class="line">// 定义后台返回的内容</span><br><span class="line">app.put(&apos;/getData&apos;, function(req, res) &#123;</span><br><span class="line">  console.log(req.headers)</span><br><span class="line">  res.end(&apos;我不爱你&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line">let xhr = new XMLHttpRequest()</span><br><span class="line">document.cookie = &apos;name=xiamen&apos; // cookie不能跨域</span><br><span class="line">xhr.withCredentials = true // 前端设置是否带cookie</span><br><span class="line">xhr.open(&apos;PUT&apos;, &apos;http://localhost:4000/getData&apos;, true)</span><br><span class="line">xhr.setRequestHeader(&apos;name&apos;, &apos;xiamen&apos;)</span><br><span class="line">xhr.onreadystatechange = function() &#123;</span><br><span class="line">  if (xhr.readyState === 4) &#123;</span><br><span class="line">    if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304) &#123;</span><br><span class="line">      console.log(xhr.response)</span><br><span class="line">      //得到响应头，后台需设置Access-Control-Expose-Headers</span><br><span class="line">      console.log(xhr.getResponseHeader(&apos;name&apos;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br><span class="line">//server1.js</span><br><span class="line">let express = require(&apos;express&apos;);</span><br><span class="line">let app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(3000);</span><br><span class="line">//server2.js</span><br><span class="line">let express = require(&apos;express&apos;)</span><br><span class="line">let app = express()</span><br><span class="line">let whitList = [&apos;http://localhost:3000&apos;] //设置白名单</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  let origin = req.headers.origin</span><br><span class="line">  if (whitList.includes(origin)) &#123;</span><br><span class="line">    // 设置哪个源可以访问我</span><br><span class="line">    res.setHeader(&apos;Access-Control-Allow-Origin&apos;, origin)</span><br><span class="line">    // 允许携带哪个头访问我</span><br><span class="line">    res.setHeader(&apos;Access-Control-Allow-Headers&apos;, &apos;name&apos;)</span><br><span class="line">    // 允许哪个方法访问我</span><br><span class="line">    res.setHeader(&apos;Access-Control-Allow-Methods&apos;, &apos;PUT&apos;)</span><br><span class="line">    // 允许携带cookie</span><br><span class="line">    res.setHeader(&apos;Access-Control-Allow-Credentials&apos;, true)</span><br><span class="line">    // 预检的存活时间</span><br><span class="line">    res.setHeader(&apos;Access-Control-Max-Age&apos;, 6)</span><br><span class="line">    // 允许返回的头</span><br><span class="line">    res.setHeader(&apos;Access-Control-Expose-Headers&apos;, &apos;name&apos;)</span><br><span class="line">    if (req.method === &apos;OPTIONS&apos;) &#123;</span><br><span class="line">      res.end() // OPTIONS请求不做任何处理</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(&apos;/getData&apos;, function(req, res) &#123;</span><br><span class="line">  console.log(req.headers)</span><br><span class="line">  res.setHeader(&apos;name&apos;, &apos;jw&apos;) //返回一个响应头，后台需设置</span><br><span class="line">  res.end(&apos;我不爱你&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(&apos;/getData&apos;, function(req, res) &#123;</span><br><span class="line">  console.log(req.headers)</span><br><span class="line">  res.end(&apos;我不爱你&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line">app.listen(4000)</span><br></pre></td></tr></table></figure><p>上述代码由<a href="http://localhost:3000/index.html向http://localhost:4000/跨域请求，正如我们上面所说的，后端是实现">http://localhost:3000/index.html向http://localhost:4000/跨域请求，正如我们上面所说的，后端是实现</a> CORS 通信的关键。</p><p>3.postMessage<br>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p><p>页面和其打开的新窗口的数据传递<br>多窗口之间消息传递<br>页面与嵌套的iframe消息传递<br>上面三个场景的跨域数据传递<br>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure><p>message: 将要发送到其他 window的数据。<br>targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。<br>transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。<br>接下来我们看个例子： <a href="http://localhost:3000/a.html页面向http://localhost:4000/b.html传递“我爱你”,然后后者传回&quot;我不爱你&quot;。">http://localhost:3000/a.html页面向http://localhost:4000/b.html传递“我爱你”,然后后者传回&quot;我不爱你&quot;。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// a.html</span><br><span class="line">  &lt;iframe src=&quot;http://localhost:4000/b.html&quot; frameborder=&quot;0&quot; id=&quot;frame&quot; onload=&quot;load()&quot;&gt;&lt;/iframe&gt; //等它加载完触发一个事件</span><br><span class="line">  //内嵌在http://localhost:3000/a.html</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      function load() &#123;</span><br><span class="line">        let frame = document.getElementById(&apos;frame&apos;)</span><br><span class="line">        frame.contentWindow.postMessage(&apos;我爱你&apos;, &apos;http://localhost:4000&apos;) //发送数据</span><br><span class="line">        window.onmessage = function(e) &#123; //接受返回数据</span><br><span class="line">          console.log(e.data) //我不爱你</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">// b.html</span><br><span class="line">  window.onmessage = function(e) &#123;</span><br><span class="line">    console.log(e.data) //我爱你</span><br><span class="line">    e.source.postMessage(&apos;我不爱你&apos;, e.origin)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>4.websocket<br>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><p>我们先来看个例子：本地文件socket.html向localhost:3000发生数据和接受数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// socket.html</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let socket = new WebSocket(&apos;ws://localhost:3000&apos;);</span><br><span class="line">    socket.onopen = function () &#123;</span><br><span class="line">      socket.send(&apos;我爱你&apos;);//向服务器发送数据</span><br><span class="line">    &#125;</span><br><span class="line">    socket.onmessage = function (e) &#123;</span><br><span class="line">      console.log(e.data);//接收服务器返回的数据</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">// server.js</span><br><span class="line">let express = require(&apos;express&apos;);</span><br><span class="line">let app = express();</span><br><span class="line">let WebSocket = require(&apos;ws&apos;);//记得安装ws</span><br><span class="line">let wss = new WebSocket.Server(&#123;port:3000&#125;);</span><br><span class="line">wss.on(&apos;connection&apos;,function(ws) &#123;</span><br><span class="line">  ws.on(&apos;message&apos;, function (data) &#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">    ws.send(&apos;我不爱你&apos;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>Node中间件代理(两次跨域)<br>实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。<br>代理服务器，需要做以下几个步骤：</li></ol><p>接受客户端请求 。<br>将请求 转发给服务器。<br>拿到服务器 响应 数据。<br>将 响应 转发给客户端。</p><p>image<br>我们先来看个例子：本地文件index.html文件，通过代理服务器<a href="http://localhost:3000向目标服务器http://localhost:4000请求数据。">http://localhost:3000向目标服务器http://localhost:4000请求数据。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">// index.html(http://127.0.0.1:5500)</span><br><span class="line"> &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        url: &apos;http://localhost:3000&apos;,</span><br><span class="line">        type: &apos;post&apos;,</span><br><span class="line">        data: &#123; name: &apos;xiamen&apos;, password: &apos;123456&apos; &#125;,</span><br><span class="line">        contentType: &apos;application/json;charset=utf-8&apos;,</span><br><span class="line">        success: function(result) &#123;</span><br><span class="line">          console.log(result) // &#123;&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function(msg) &#123;</span><br><span class="line">          console.log(msg)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">     &lt;/script&gt;</span><br><span class="line">// server1.js 代理服务器(http://localhost:3000)</span><br><span class="line">const http = require(&apos;http&apos;)</span><br><span class="line">// 第一步：接受客户端请求</span><br><span class="line">const server = http.createServer((request, response) =&gt; &#123;</span><br><span class="line">  // 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段</span><br><span class="line">  response.writeHead(200, &#123;</span><br><span class="line">    &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;,</span><br><span class="line">    &apos;Access-Control-Allow-Methods&apos;: &apos;*&apos;,</span><br><span class="line">    &apos;Access-Control-Allow-Headers&apos;: &apos;Content-Type&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 第二步：将请求转发给服务器</span><br><span class="line">  const proxyRequest = http</span><br><span class="line">    .request(</span><br><span class="line">      &#123;</span><br><span class="line">        host: &apos;127.0.0.1&apos;,</span><br><span class="line">        port: 4000,</span><br><span class="line">        url: &apos;/&apos;,</span><br><span class="line">        method: request.method,</span><br><span class="line">        headers: request.headers</span><br><span class="line">      &#125;,</span><br><span class="line">      serverResponse =&gt; &#123;</span><br><span class="line">        // 第三步：收到服务器的响应</span><br><span class="line">        var body = &apos;&apos;</span><br><span class="line">        serverResponse.on(&apos;data&apos;, chunk =&gt; &#123;</span><br><span class="line">          body += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        serverResponse.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class="line">          console.log(&apos;The data is &apos; + body)</span><br><span class="line">          // 第四步：将响应结果转发给浏览器</span><br><span class="line">          response.end(body)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .end()</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(3000, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;The proxyServer is running at http://localhost:3000&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">// server2.js(http://localhost:4000)</span><br><span class="line">const http = require(&apos;http&apos;)</span><br><span class="line">const data = &#123; title: &apos;fontend&apos;, password: &apos;123456&apos; &#125;</span><br><span class="line">const server = http.createServer((request, response) =&gt; &#123;</span><br><span class="line">  if (request.url === &apos;/&apos;) &#123;</span><br><span class="line">    response.end(JSON.stringify(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(4000, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;The server is running at http://localhost:4000&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出{“title”:”fontend”,”password”:”123456”}</p><p>6.nginx反向代理<br>实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。</p><p>使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。</p><p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p>先下载nginx，然后将nginx目录下的nginx.conf修改如下:</p><p>// proxy服务器<br>server {<br>    listen       81;<br>    server_name  <a href="http://www.domain1.com">www.domain1.com</a>;<br>    location / {<br>        proxy_pass   <a href="http://www.domain2.com:8080">http://www.domain2.com:8080</a>;  #反向代理<br>        proxy_cookie_domain <a href="http://www.domain2.com">www.domain2.com</a> <a href="http://www.domain1.com">www.domain1.com</a>; #修改cookie里域名<br>        index  index.html index.htm;</p><pre><code>    # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用    add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*    add_header Access-Control-Allow-Credentials true;}</code></pre><p>}<br>最后通过命令行nginx -s reload启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">// 前端开关：浏览器是否读写cookie</span><br><span class="line">xhr.withCredentials = true;</span><br><span class="line">// 访问nginx中的代理服务器</span><br><span class="line">xhr.open(&apos;get&apos;, &apos;http://www.domain1.com:81/?user=admin&apos;, true);</span><br><span class="line">xhr.send();</span><br><span class="line">// server.js</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var server = http.createServer();</span><br><span class="line">var qs = require(&apos;querystring&apos;);</span><br><span class="line">server.on(&apos;request&apos;, function(req, res) &#123;</span><br><span class="line">    var params = qs.parse(req.url.substring(2));</span><br><span class="line">    // 向前台写cookie</span><br><span class="line">    res.writeHead(200, &#123;</span><br><span class="line">        &apos;Set-Cookie&apos;: &apos;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&apos;   // HttpOnly:脚本无法读取</span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(JSON.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(&apos;8080&apos;);</span><br><span class="line">console.log(&apos;Server is running at port 8080...&apos;);</span><br></pre></td></tr></table></figure><p>7.window.name + iframe<br>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><p>其中a.html和b.html是同域的，都是<a href="http://localhost:3000;而c.html是http://localhost:4000">http://localhost:3000;而c.html是http://localhost:4000</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// a.html(http://localhost:3000/b.html)</span><br><span class="line">  &lt;iframe src=&quot;http://localhost:4000/c.html&quot; frameborder=&quot;0&quot; onload=&quot;load()&quot; id=&quot;iframe&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    let first = true</span><br><span class="line">    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span><br><span class="line">    function load() &#123;</span><br><span class="line">      if(first)&#123;</span><br><span class="line">      // 第1次onload(跨域页)成功后，切换到同域代理页面</span><br><span class="line">        let iframe = document.getElementById(&apos;iframe&apos;);</span><br><span class="line">        iframe.src = &apos;http://localhost:3000/b.html&apos;;</span><br><span class="line">        first = false;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      // 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span><br><span class="line">        console.log(iframe.contentWindow.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">b.html为中间代理页，与a.html同域，内容为空。</span><br><span class="line"></span><br><span class="line"> // c.html(http://localhost:4000/c.html)</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.name = &apos;我不爱你&apos;  </span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><p>8.location.hash + iframe<br>实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。<br>同样的，a.html和b.html是同域的，都是<a href="http://localhost:3000;而c.html是http://localhost:4000">http://localhost:3000;而c.html是http://localhost:4000</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// a.html</span><br><span class="line"> &lt;iframe src=&quot;http://localhost:4000/c.html#iloveyou&quot;&gt;&lt;/iframe&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   window.onhashchange = function () &#123; //检测hash的变化</span><br><span class="line">     console.log(location.hash);</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">// b.html</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   window.parent.parent.location.hash = location.hash </span><br><span class="line">   //b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">// c.html</span><br><span class="line">console.log(location.hash);</span><br><span class="line"> let iframe = document.createElement(&apos;iframe&apos;);</span><br><span class="line"> iframe.src = &apos;http://localhost:3000/b.html#idontloveyou&apos;;</span><br><span class="line"> document.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>9.document.domain + iframe<br>该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。<br>只需要给页面添加 document.domain =’test.com’ 表示二级域名都相同就可以实现跨域。</p><p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><p>我们看个例子：页面a.zf1.cn:3000/a.html获取页面b.zf1.cn:3000/b.html中a的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// a.html</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> helloa</span><br><span class="line">  &lt;iframe src=&quot;http://b.zf1.cn:3000/b.html&quot; frameborder=&quot;0&quot; onload=&quot;load()&quot; id=&quot;frame&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    document.domain = &apos;zf1.cn&apos;</span><br><span class="line">    function load() &#123;</span><br><span class="line">      console.log(frame.contentWindow.a);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">// b.html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   hellob</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     document.domain = &apos;zf1.cn&apos;</span><br><span class="line">     var a = 100;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>三、总结<br>CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案<br>JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。<br>不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。<br>日常工作中，用得比较多的跨域方案是cors和nginx反向代理</p></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;九种跨域方式实现原理（完整版）&quot;&gt;&lt;a href=&quot;#九种跨域方式实现原理（完整版）&quot; class=&quot;headerlink&quot; title=&quot;九种跨域方式实现原理（完整版）&quot;&gt;&lt;/a&gt;九种跨域方式实现原理（完整版）&lt;/h1&gt;&lt;p&gt;前言&lt;br&gt;前后端数据交互经常会碰到
      
    
    </summary>
    
      <category term="九种跨域方式实现原理（完整版）" scheme="https://jermyo.github.io/JerBlog/categories/%E4%B9%9D%E7%A7%8D%E8%B7%A8%E5%9F%9F%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%EF%BC%88%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%89/"/>
    
    
      <category term="js" scheme="https://jermyo.github.io/JerBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>VPS搭建SSR服务教程---最全整理</title>
    <link href="https://jermyo.github.io/JerBlog/2018/11/27/VPS%E6%90%AD%E5%BB%BASSR%E6%9C%8D%E5%8A%A1%E6%95%99%E7%A8%8B---%E6%9C%80%E5%85%A8%E6%95%B4%E7%90%86/"/>
    <id>https://jermyo.github.io/JerBlog/2018/11/27/VPS搭建SSR服务教程---最全整理/</id>
    <published>2018-11-27T10:38:26.000Z</published>
    <updated>2018-12-05T15:49:24.853Z</updated>
    
    <content type="html"><![CDATA[<p>教程很简单，整个教程分三步：</p><p>第一步：购买VPS服务器</p><p>第二步：一键部署VPS服务器</p><p>第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）</p><h3 id="第一步：购买VPS服务器"><a href="#第一步：购买VPS服务器" class="headerlink" title="第一步：购买VPS服务器"></a>第一步：购买VPS服务器</h3><p>VPS服务器需要选择国外的，这里就不介绍选哪家了，现在类型太多，很多公司为了开辟新市场，很多优惠的方案，有很多一年才5美刀，这个大家自己搜集一下，我用的是 <a href="https://clients.hostmybytes.com/clientarea.php" target="_blank" rel="noopener">https://clients.hostmybytes.com/clientarea.php</a> 可以百度自己对比不同类型的，有很多，这里不再赘述。</p><h3 id="第二步：部署VPS服务器"><a href="#第二步：部署VPS服务器" class="headerlink" title="第二步：部署VPS服务器"></a>第二步：部署VPS服务器</h3><p>购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。Xshell windows版下载地址：</p><p>国外云盘1下载</p><p>如果你是苹果电脑操作系统，更简单，无需下载xshell，系统可以直接连接VPS。打开终端（Terminal），输入ssh root@ip 其中“ip”替换成你VPS的ip, 按回车键，然后复制粘贴密码，按回车键即可登录。粘贴密码时有可能不显示密码，但不影响， 参考设置方法 如果不能用MAC自带的终端连接的话，直接网上搜“MAC连接SSH的软件”，有很多，然后通过软件来连接vps服务器就行，具体操作方式参考windows xshell。</p><p>部署教程：</p><h5 id="1、下载xshell软件并安装后，打开软件"><a href="#1、下载xshell软件并安装后，打开软件" class="headerlink" title="1、下载xshell软件并安装后，打开软件"></a>1、下载xshell软件并安装后，打开软件</h5><p><img src="https://img-blog.csdnimg.cn/20181127173219430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择文件，新建<br><img src="https://img-blog.csdnimg.cn/20181127173243643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>随便取个名字，然后把你的服务器ip填上<br><img src="https://img-blog.csdnimg.cn/20181127173256514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名默认都是root，密码是你购买的服务器系统的密码。</p><p><strong>如果xshell连不上服务器，没有弹出让你输入用户名和密码的输入框，表明你开到的ip是一个被封的ip，遇到这种情况，重新开新的服务器，直到能用xshell连上为止，耐心点哦！如果同一个地区开了多台服务器还是不行的话，可以换其它地区。</strong><br><img src="https://img-blog.csdnimg.cn/20181127173345819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2、一键部署管理脚本"><a href="#2、一键部署管理脚本" class="headerlink" title="2、一键部署管理脚本"></a>2、一键部署管理脚本</h5><p>连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。</p><p>CentOS6/Debian6/Ubuntu14 ShadowsocksR一键部署管理脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N –no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br><span class="line"></span><br><span class="line">备用脚本：</span><br><span class="line"></span><br><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N –no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>复制上面的代码到VPS服务器里，按回车键，脚本会自动安装，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：bash ssr.sh<br><img src="https://img-blog.csdnimg.cn/20181127174624875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图出现管理界面后，输入数字1来安装SSR服务端。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。<br><img src="https://img-blog.csdnimg.cn/20181127174643248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据上图提示，依次输入自己想设置的端口和密码 (密码建议用复杂点的字母组合，端口号为40-65535之间的数字)，回车键用于确认</p><p>注：关于端口的设置，总的网络总端口有6万多个，理论上可以任意设置。但是有的地区需要设置特殊的端口才有效，一些特殊的端口比如80、143、443、1433、3306、3389、8080。<br><img src="https://img-blog.csdnimg.cn/20181127174758987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图，选择想设置的加密方式，比如10，按回车键确认<br><strong>特别注意，由于iphone端的的wingy目前只支持到cfb，所以我们选择aes-256-cfb</strong><br>接下来是选择协议插件，如下图：<br><img src="https://img-blog.csdnimg.cn/20181127174952569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181127174958613.png" alt="在这里插入图片描述"></p><p>选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端（SS客户端没有协议和混淆的选项），可以根据需求进行选择，演示选择y</p><p>之后进行混淆插件的设置。</p><p>注意：如果协议是origin，那么混淆也必须是plain；如果协议不是origin，那么混淆可以是任意的。有的地区需要把混淆设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。（特别注意：tls 1.2_ticket_auth容易受到干扰！请选择除tls开头以外的其它混淆！！！）<br><img src="https://img-blog.csdnimg.cn/20181127175015294.png" alt="在这里插入图片描述"><br>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p><p>注意：关于限制设备数，这个协议必须是非原版且不兼容原版才有效，也就是必须使用SSR协议的情况下，才有效！<br><img src="https://img-blog.csdnimg.cn/20181127175031550.png" alt="在这里插入图片描述"></p><p>之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y<br><img src="https://img-blog.csdnimg.cn/20181127175057905.png" alt="在这里插入图片描述"><br>耐心等待一会，出现下面的界面即部署完成：<br><img src="https://img-blog.csdnimg.cn/20181127175111838.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2018112717511750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件，这些信息需要填入你的SSR客户端。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如：<br><img src="https://img-blog.csdnimg.cn/2018112717513713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2018112717514222.png" alt="在这里插入图片描述"><br>脚本演示结束。</p><p>此脚本是开机自动启动，部署一次即可。最后可以重启服务器确保部署生效（一般情况不重启也可以）。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。</p><h4 id="另：一键部署管理脚本—另一个方式（之前使用过，可行）"><a href="#另：一键部署管理脚本—另一个方式（之前使用过，可行）" class="headerlink" title="另：一键部署管理脚本—另一个方式（之前使用过，可行）"></a>另：一键部署管理脚本—另一个方式（之前使用过，可行）</h4><p>部署VPS服务器：<br>不多说，直接贴代码<br>1、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate  https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br></pre></td></tr></table></figure></p><p>2、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shadowsocks.sh</span><br></pre></td></tr></table></figure><p>3、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>中间会提示你输入你的SS SERVER的账号，和端口。不输入就是默认。跑完命令后会出来你的SS客户端的信息，图我就不贴了。<br>下面看加密方式<br><img src="https://img-blog.csdnimg.cn/20181127181651767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>特别注意，由于iphone端的的wingy目前只支持到cfb，所以我们选择aes-256-cfb，即7</strong></p><p>这一步按回车继续<br>请立即copy下来加以保存。<br>上面的命令全部回车执行后，如果没有报错，即为执行成功，出现确认提示的时候，输入 y 后，回车即可。</p><p>安装完成后，脚本提示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, shadowsocks install completed!</span><br><span class="line">Your Server IP:your_server_ip</span><br><span class="line">Your Server Port:your_server_port</span><br><span class="line">Your Password:your_password</span><br><span class="line">Your Local IP:127.0.0.1</span><br><span class="line">Your Local Port:1080</span><br><span class="line">Your Encryption Method:aes-256-cfb</span><br></pre></td></tr></table></figure><p>记录保存好你的上述信息：Server IP、Server Port、Password、Encryption Method<br>这时你的专属ss已经大好了，开始使用吧。</p><h3 id="第三步：一键加速VPS服务器"><a href="#第三步：一键加速VPS服务器" class="headerlink" title="第三步：一键加速VPS服务器"></a>第三步：一键加速VPS服务器</h3><p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p><p>按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p><h5 id="【谷歌BBR加速教程】"><a href="#【谷歌BBR加速教程】" class="headerlink" title="【谷歌BBR加速教程】"></a>【谷歌BBR加速教程】</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line">chmod +x bbr.sh</span><br><span class="line"></span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p><p>演示开始，如图：</p><p>复制并粘贴代码后，按回车键确认<br><img src="https://img-blog.csdnimg.cn/20181127175501685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如下图提示，按任意键继续部署<br><img src="https://img-blog.csdnimg.cn/20181127175513650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181127175518866.png" alt="在这里插入图片描述"><br>部署到上图这个位置的时候，等待3～6分钟<br><img src="https://img-blog.csdnimg.cn/20181127175529630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后输入y重启服务器，如果输入y提示command not found ，接着输入reboot来重启服务器，确保加速生效，bbr加速脚本是开机自动启动，装一次就可以了。</p><h6 id="最近准备新安装一个。发现上面执行安装时，出错，安装不下去，"><a href="#最近准备新安装一个。发现上面执行安装时，出错，安装不下去，" class="headerlink" title="最近准备新安装一个。发现上面执行安装时，出错，安装不下去，"></a>最近准备新安装一个。发现上面执行安装时，出错，安装不下去，</h6><p>执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</span><br></pre></td></tr></table></figure><p>若提示：wget :command not found<br>请执行：yum install wget -y<br>然后再按照提示走就行了<br><img src="https://img-blog.csdnimg.cn/20181127175903575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这张图注意保存<br>走到这一步，还有些不够，网速很慢，几乎慢到连不到网，所以进行第三步。</p><h5 id="锐速安装"><a href="#锐速安装" class="headerlink" title="锐速安装"></a>锐速安装</h5><p>一键更换内核脚本（Vultr需先执行此脚本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh &amp;&amp; bash ruisu.sh</span><br></pre></td></tr></table></figure><p>脚本安装需要1-3分钟，耐心等待服务器重启，服务器重启之后，重新连接继续安装就行了。</p><p>锐速安装脚本 (如果找不到相应的 .sh 可以github 上搜索 相应的脚本)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh</span><br></pre></td></tr></table></figure><p>另外：重要的事情说三遍！！！<br>锐速不支持Openvz！！！锐速不支持Openvz！！！锐速不支持Openvz！！！<br><img src="https://img-blog.csdnimg.cn/20181127180702995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现这些就算大功告成了。电脑连接可查看 上面连接教程就行了</p><h3 id="第四步：下载客户端-使用"><a href="#第四步：下载客户端-使用" class="headerlink" title="第四步：下载客户端 使用"></a>第四步：下载客户端 使用</h3><p>各版本的shadowsocks客户端下载地址可以参考：<a href="https://www.flyzy2005.com/fan-qiang/shadowsocks/ss-clients-download/" target="_blank" rel="noopener">Android/Windows/iOS/Mac/Linux shadowsocks客户端下载地址</a>（打不开就去github搜，或者直接百度搜下载地址）</p><h5 id="WIndows客户端配置"><a href="#WIndows客户端配置" class="headerlink" title="WIndows客户端配置"></a>WIndows客户端配置</h5><p>双击运行shadowsocks.exe，之后会在任务栏有一个小飞机图标，右击小飞机图标，选择服务器-&gt;编辑服务器：<br><img src="https://img-blog.csdnimg.cn/2018112718282480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在shadowsocks的windows客户端中，服务器IP指你购买的VPS的IP，服务器端口指你服务器的配置文件中的端口，密码指你服务器的配置文件中的密码，加密指你服务器的配置文件中的加密方式，代理端口默认为1080。其他都可以默认。设置好后，点击添加按钮即可。</p><h5 id="MAC-OS客户端配置"><a href="#MAC-OS客户端配置" class="headerlink" title="MAC OS客户端配置"></a>MAC OS客户端配置</h5><p>双击运行shadowsocksX-NG.app，之后会在任务栏有一个小飞机图标，右击小飞机图标，选择服务器-&gt;服务器设置：<br><img src="https://img-blog.csdnimg.cn/20181127182919908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在shadowsocks的Mac OS客户端中，地址指你购买的VPS的IP，冒号后面跟上配置文件中的端口，密码指你服务器的配置文件中的密码，加密指你服务器的配置文件中的加密方式。其他都可以默认。设置好后，点击确认即可。</p><h5 id="安卓客户端配置"><a href="#安卓客户端配置" class="headerlink" title="安卓客户端配置"></a>安卓客户端配置</h5><p>下载apk安装好后，打开影梭客户端，点击主界面左上角的编辑按钮（铅笔形状）：<br><img src="https://img-blog.csdnimg.cn/20181127182951984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在shadowsocks安卓客户端的配置中填入相应配置信息，其中，功能设置中，路由改成如上图所示，其他都可以默认。</p><h5 id="苹果客户端配置"><a href="#苹果客户端配置" class="headerlink" title="苹果客户端配置"></a>苹果客户端配置</h5><p>shadowsocks苹果客户端经常会被App Store下架，可以在App Store搜索关键字shadowsock或者wingy，找到一个软件截图中包括填写ip，加密方式，密码的软件一般就是对的了（目前可以用的是FirstWingy）。当然，你也可以下载PP助手，之后在PP助手上下载Wingy（Wingy支持）或者shadowrocket（shadowrocket支持）。<br><img src="https://img-blog.csdnimg.cn/20181127183019498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如上就是手把手教你搭建shadowsocks的全部内容。在国内，***是不允许的了，所以还不如自己搭建ss，可以独享一个线路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;教程很简单，整个教程分三步：&lt;/p&gt;
&lt;p&gt;第一步：购买VPS服务器&lt;/p&gt;
&lt;p&gt;第二步：一键部署VPS服务器&lt;/p&gt;
&lt;p&gt;第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）&lt;/p&gt;
&lt;h3 id=&quot;第一步：购买VPS服务器&quot;&gt;&lt;a href=&quot;#第一步：购买VPS
      
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="VPS" scheme="https://jermyo.github.io/JerBlog/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>使用Node.js快速搭建简单的静态文件服务器</title>
    <link href="https://jermyo.github.io/JerBlog/2018/11/14/%E4%BD%BF%E7%94%A8Node.js%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://jermyo.github.io/JerBlog/2018/11/14/使用Node.js快速搭建简单的静态文件服务器/</id>
    <published>2018-11-14T10:38:26.000Z</published>
    <updated>2018-11-14T05:20:50.320Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>做前端有时会采用一些复杂框架，在文件系统中直接打开页面（用file:///方式打开），往往会报跨域的错，类似于“XMLHttpRequest cannot load …(文件名). Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.”。这时，我们可以快速搭建一个简单的静态文件服务器，用Node.js最合适。</p><h4 id="1-在前端项目根目录下创建server-js，代码如下："><a href="#1-在前端项目根目录下创建server-js，代码如下：" class="headerlink" title="1.在前端项目根目录下创建server.js，代码如下："></a>1.在前端项目根目录下创建server.js，代码如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">//加载所需要的模块</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var url = require(&apos;url&apos;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var cp = require(&apos;child_process&apos;);</span><br><span class="line"></span><br><span class="line">//创建服务</span><br><span class="line">var httpServer = http.createServer(processRequest);</span><br><span class="line"></span><br><span class="line">var port = 8080;</span><br><span class="line"></span><br><span class="line">//指定一个监听的接口</span><br><span class="line">httpServer.listen(port, function() &#123;</span><br><span class="line">    console.log(`app is running at port:$&#123;port&#125;`);</span><br><span class="line">    console.log(`url: http://localhost:$&#123;port&#125;`);</span><br><span class="line">    cp.exec(`explorer http://localhost:$&#123;port&#125;`, function () &#123;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//响应请求的函数</span><br><span class="line">function processRequest (request, response) &#123;</span><br><span class="line">    //mime类型</span><br><span class="line">    var mime = &#123;</span><br><span class="line">        &quot;css&quot;: &quot;text/css&quot;,</span><br><span class="line">        &quot;gif&quot;: &quot;image/gif&quot;,</span><br><span class="line">        &quot;html&quot;: &quot;text/html&quot;,</span><br><span class="line">        &quot;ico&quot;: &quot;image/x-icon&quot;,</span><br><span class="line">        &quot;jpeg&quot;: &quot;image/jpeg&quot;,</span><br><span class="line">        &quot;jpg&quot;: &quot;image/jpeg&quot;,</span><br><span class="line">        &quot;js&quot;: &quot;text/javascript&quot;,</span><br><span class="line">        &quot;json&quot;: &quot;application/json&quot;,</span><br><span class="line">        &quot;pdf&quot;: &quot;application/pdf&quot;,</span><br><span class="line">        &quot;png&quot;: &quot;image/png&quot;,</span><br><span class="line">        &quot;svg&quot;: &quot;image/svg+xml&quot;,</span><br><span class="line">        &quot;swf&quot;: &quot;application/x-shockwave-flash&quot;,</span><br><span class="line">        &quot;tiff&quot;: &quot;image/tiff&quot;,</span><br><span class="line">        &quot;txt&quot;: &quot;text/plain&quot;,</span><br><span class="line">        &quot;wav&quot;: &quot;audio/x-wav&quot;,</span><br><span class="line">        &quot;wma&quot;: &quot;audio/x-ms-wma&quot;,</span><br><span class="line">        &quot;wmv&quot;: &quot;video/x-ms-wmv&quot;,</span><br><span class="line">        &quot;xml&quot;: &quot;text/xml&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    //request里面切出标识符字符串</span><br><span class="line">    var requestUrl = request.url;</span><br><span class="line">    //url模块的parse方法 接受一个字符串，返回一个url对象,切出来路径</span><br><span class="line">    var pathName = url.parse(requestUrl).pathname;</span><br><span class="line"></span><br><span class="line">    //对路径解码，防止中文乱码</span><br><span class="line">    var pathName = decodeURI(pathName);</span><br><span class="line"></span><br><span class="line">    //解决301重定向问题，如果pathname没以/结尾，并且没有扩展名</span><br><span class="line">    if (!pathName.endsWith(&apos;/&apos;) &amp;&amp; path.extname(pathName) === &apos;&apos;) &#123;</span><br><span class="line">        pathName += &apos;/&apos;;</span><br><span class="line">        var redirect = &quot;http://&quot; + request.headers.host + pathName;</span><br><span class="line">        response.writeHead(301, &#123;</span><br><span class="line">            location: redirect</span><br><span class="line">        &#125;);</span><br><span class="line">        //response.end方法用来回应完成后关闭本次对话，也可以写入HTTP回应的具体内容。</span><br><span class="line">        response.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取资源文件的绝对路径</span><br><span class="line">    var filePath = path.resolve(__dirname + pathName);</span><br><span class="line">    console.log(filePath);</span><br><span class="line">    //获取对应文件的文档类型</span><br><span class="line">    //我们通过path.extname来获取文件的后缀名。由于extname返回值包含”.”，所以通过slice方法来剔除掉”.”，</span><br><span class="line">    //对于没有后缀名的文件，我们一律认为是unknown。</span><br><span class="line">    var ext = path.extname(pathName);</span><br><span class="line">    ext = ext ? ext.slice(1) : &apos;unknown&apos;;</span><br><span class="line"></span><br><span class="line">    //未知的类型一律用&quot;text/plain&quot;类型</span><br><span class="line">    var contentType = mime[ext] || &quot;text/plain&quot;;</span><br><span class="line"></span><br><span class="line">    fs.stat(filePath, (err, stats) =&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            response.writeHead(404, &#123; &quot;content-type&quot;: &quot;text/html&quot; &#125;);</span><br><span class="line">            response.end(&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //没出错 并且文件存在</span><br><span class="line">        if (!err &amp;&amp; stats.isFile()) &#123;</span><br><span class="line">            readFile(filePath, contentType);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果路径是目录</span><br><span class="line">        if (!err &amp;&amp; stats.isDirectory()) &#123;</span><br><span class="line">            var html = &quot;&lt;head&gt;&lt;meta charset = &apos;utf-8&apos;/&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;&quot;;</span><br><span class="line">            //读取该路径下文件</span><br><span class="line">            fs.readdir(filePath, (err, files) =&gt; &#123;</span><br><span class="line">                if (err) &#123;</span><br><span class="line">                    console.log(&quot;读取路径失败！&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //做成一个链接表，方便用户访问</span><br><span class="line">                    var flag = false;</span><br><span class="line">                    for (var file of files) &#123;</span><br><span class="line">                        //如果在目录下找到index.html，直接读取这个文件</span><br><span class="line">                        if (file === &quot;index.html&quot;) &#123;</span><br><span class="line">                            readFile(filePath + (filePath[filePath.length-1]==&apos;/&apos; ? &apos;&apos; : &apos;/&apos;) + &apos;index.html&apos;, &quot;text/html&quot;);</span><br><span class="line">                            flag = true;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;;</span><br><span class="line">                        html += `&lt;li&gt;&lt;a href=&apos;$&#123;file&#125;&apos;&gt;$&#123;file&#125;&lt;/a&gt;&lt;/li&gt;`;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(!flag) &#123;</span><br><span class="line">                        html += &apos;&lt;/ul&gt;&lt;/body&gt;&apos;;</span><br><span class="line">                        response.writeHead(200, &#123; &quot;content-type&quot;: &quot;text/html&quot; &#125;);</span><br><span class="line">                        response.end(html);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //读取文件的函数</span><br><span class="line">        function readFile(filePath, contentType)&#123;</span><br><span class="line">            response.writeHead(200, &#123; &quot;content-type&quot;: contentType &#125;);</span><br><span class="line">            //建立流对象，读文件</span><br><span class="line">            var stream = fs.createReadStream(filePath);</span><br><span class="line">            //错误处理</span><br><span class="line">            stream.on(&apos;error&apos;, function() &#123;</span><br><span class="line">                response.writeHead(500, &#123; &quot;content-type&quot;: contentType &#125;);</span><br><span class="line">                response.end(&quot;&lt;h1&gt;500 Server Error&lt;/h1&gt;&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //读取文件</span><br><span class="line">            stream.pipe(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在前端项目根目录下打开命令提示符或终端，输入以下命令就可以启动小服务器啦。"><a href="#2-在前端项目根目录下打开命令提示符或终端，输入以下命令就可以启动小服务器啦。" class="headerlink" title="2.在前端项目根目录下打开命令提示符或终端，输入以下命令就可以启动小服务器啦。"></a>2.在前端项目根目录下打开命令提示符或终端，输入以下命令就可以启动小服务器啦。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;做前端有时会采用一些复杂框架，在文件系统中直接打开页面（用file:///方式打开），往往会报跨域的错，类似于“XMLHttpRequest
      
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>你所不知道的console.log()（console.log详解）</title>
    <link href="https://jermyo.github.io/JerBlog/2018/11/07/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84console.log()%EF%BC%88console.log%E8%AF%A6%E8%A7%A3%EF%BC%89/"/>
    <id>https://jermyo.github.io/JerBlog/2018/11/07/你所不知道的console.log()（console.log详解）/</id>
    <published>2018-11-07T09:14:25.000Z</published>
    <updated>2018-11-07T09:53:59.023Z</updated>
    
    <content type="html"><![CDATA[<p>console.log，作为一个前端开发者，想必每天都会用它来做分析调试，但这个简单函数背后你所不知道的一面，很多人未必使用过，有一些也是很方便使用的</p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>首先，简单科普这个函数的作用。前端开发者可以在js代码的任何部分调用console.log，然后你就可以在浏览器的开发者控制台里，看到这个函数调用的那一瞬间你指定的变量或表达式的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;123&apos;);</span><br><span class="line">// 123</span><br><span class="line">  </span><br><span class="line">console.log(&apos;1&apos;, &apos;2&apos;, &apos;3&apos;);</span><br><span class="line">// 1 2 3</span><br><span class="line">  </span><br><span class="line">console.log(&apos;1\n2\n3\n&apos;);</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><p>我们可以通过上面的方式进行单个变量（表达式）、多个变量以及换行输出。而这对于日常开发的大多数情况算是够用了。<br>格式化输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;%d + %d = %d&apos;, 1, 1, 2);//或console.log(1,1,2);</span><br><span class="line">// 1 + 1 = 2</span><br></pre></td></tr></table></figure></p><p>写过C语言的童鞋肯定对上面这种写法不陌生，这种写法在复杂的输出时，能保证模板和数据分离，结构更加清晰。不过简单的输出就不那么方便了。<br>console.log支持的格式标志有:<br>|占位符| 描述 |<br>|–|–|<br>| %s | 字符串 |<br>| %d%i | 整数|<br>| %f| 浮点数 |<br>| %o/%O | object对象 |<br>| %c | css样式 |</p><h4 id="常用我就不说了，说一下，不常用的，"><a href="#常用我就不说了，说一下，不常用的，" class="headerlink" title="常用我就不说了，说一下，不常用的，"></a>常用我就不说了，说一下，不常用的，</h4><p><strong>console.log/debug/warn/error</strong>,<br>这些都可以做调试输出，区别是：</p><p>样式不同我们可以通过调试器底部筛选出不同的输出项</p><p>所以跟网站重构要求html语义化类似，当我们的调试输出比较多时，根据实际场景使用不同类型的输出函数能使我们的输出更有条理。</p><p>值得一提的是console.error，我们使用它做输出除了可以输出错误信息外，还可以输出调用这个函数的一瞬间的调用栈！这无疑给我们调试带来很多方便（当然你也可以用js断点一步步跟踪），而这是console.log所不具备的。除了console.error，还有一个函数console.trace也可以打印出调用一瞬间的调用栈，不过它的输出样式和位置就跟console.log一样了：</p><p>其实除了打印调试信息外，console还有不少强大有用但却很低调的接口。</p><h4 id="console-time-amp-console-timeEnd"><a href="#console-time-amp-console-timeEnd" class="headerlink" title="console.time &amp; console.timeEnd"></a><strong>console.time &amp; console.timeEnd</strong></h4><p>这是性能调试的利器啊，熟悉NodeJs的童鞋更是清楚。肯定不少童鞋干过这事：在我们的某块代码前新增一个类似startTime的变量，给它一个时间戳，然后在我们执行完代码后，再打一个时间戳，再将两者相减，再将结果输出。现在我们使用上面的函数，就可以省下很多功夫了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.time(&apos;wait&apos;);</span><br><span class="line">setTimeOut(()=&gt;&#123;</span><br><span class="line">console.timeEnd(&apos;wait&apos;);</span><br><span class="line">&#125;,1000);</span><br><span class="line">wait: 1000ms</span><br></pre></td></tr></table></figure><p>使用这两个接口是何其方便！而且我们还可以将一个字符串作为函数参数，来区分不同的性能计时。</p><h4 id="console-count"><a href="#console-count" class="headerlink" title="console.count"></a><strong>console.count</strong></h4><p>这是一个计数器，我们可以传个名字给它，如a，然后每次调用console.count(‘a’)（可以在不同函数不同地方），它就能打印出这样一个调用执行了多少次：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let a = ()=&gt;&#123;</span><br><span class="line">console.count(&apos;Call function a&apos;);</span><br><span class="line">&#125;;</span><br><span class="line">let b = ()=&gt;&#123;</span><br><span class="line">a();</span><br><span class="line">&#125;</span><br><span class="line">let c = ()=&gt;&#123;</span><br><span class="line">b();</span><br><span class="line">&#125;</span><br><span class="line">b();</span><br><span class="line">c();</span><br><span class="line">Call function a:1</span><br><span class="line">Call function b:2</span><br></pre></td></tr></table></figure></p><p>这个函数特别适用于在一些复杂的场景，有时一个函数被多个地方调用到，而我们想知道该函数是否少调用或重复调用，此时使用计数器比js断点自己还要默记调了几次快多了。</p><h4 id="console-assert"><a href="#console-assert" class="headerlink" title="console.assert"></a><strong>console.assert</strong></h4><p>assert，搞编程的应该对这个单词不陌生：断言。使用console.assert，你可以理解为于禁的技能（三国杀玩多了这孩子），你猜错了这个表达式的真假，那我就可以打出我的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let a = ()=&gt;&#123;</span><br><span class="line">let el = document.getElementById(&apos;test&apos;);</span><br><span class="line">console.assert(el,&apos;没有ID为test的节点&apos;);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line">// Assertion failed: 没有ID为test的节点</span><br></pre></td></tr></table></figure><p>不消说，使用该函数可以让我们在某些地方只在符合某个条件才进行调试输出，使输出更加干净。当然你也可以用if语句，不过写起来就麻烦了一些。</p><h4 id="console-group"><a href="#console-group" class="headerlink" title="console.group"></a><strong>console.group</strong></h4><p>一看就知道是分组输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.group(&apos;group1&apos;);</span><br><span class="line">console.log(&apos;a&apos;);</span><br><span class="line">console.log(&apos;b&apos;);</span><br><span class="line">console.groupEnd(&apos;group1&apos;);</span><br><span class="line">console.group(&apos;group2&apos;);</span><br><span class="line">console.log(&apos;a2&apos;);</span><br><span class="line">console.log(&apos;b2&apos;);</span><br><span class="line">console.groupEnd(&apos;group2&apos;);</span><br></pre></td></tr></table></figure></p><p>显然这个函数特别适合有一大堆调试输出的情况，做大项目估计会用上。不过有时你打开控制台看到满屏满屏的输出你也会很头痛的，于是你可以分组输出且默认收起：</p><h4 id="console-clear"><a href="#console-clear" class="headerlink" title="console.clear"></a><strong>console.clear</strong></h4><p>最后的最后，该清场了。</p><p>特别适用于，在一个多人开发项目，你不爽别人的调试输出，那你可以用这个函数统统清掉，再输出自己的调试信息，不用跟这个函数客气。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我是王大锤，万万没想到，console.log的八卦就这样被我说完了，本以为还可以吹水个几万字。</p><p>附<strong>conssole.timestamp &amp; console.profile</strong>这两个函数对应chrome调试面板的两个tab，调试性能时可用上，有兴趣的童鞋可以看看：<a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3" target="_blank" rel="noopener">Google开发者文档之console</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;console.log，作为一个前端开发者，想必每天都会用它来做分析调试，但这个简单函数背后你所不知道的一面，很多人未必使用过，有一些也是很方便使用的&lt;/p&gt;
&lt;h4 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://jermyo.github.io/JerBlog/categories/JavaScript/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="github" scheme="https://jermyo.github.io/JerBlog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>关于html中table表格tr,td的高度和宽度</title>
    <link href="https://jermyo.github.io/JerBlog/2018/10/30/%E5%85%B3%E4%BA%8Ehtml%E4%B8%ADtable%E8%A1%A8%E6%A0%BCtr,td%E7%9A%84%E9%AB%98%E5%BA%A6%E5%92%8C%E5%AE%BD%E5%BA%A6/"/>
    <id>https://jermyo.github.io/JerBlog/2018/10/30/关于html中table表格tr,td的高度和宽度/</id>
    <published>2018-10-30T12:52:47.000Z</published>
    <updated>2018-10-30T12:50:57.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于html中table表格tr-td的高度和宽度"><a href="#关于html中table表格tr-td的高度和宽度" class="headerlink" title="关于html中table表格tr,td的高度和宽度"></a>关于html中table表格tr,td的高度和宽度</h2><p>做网页的时候经常会遇到各种各样的问题，经常遇到的一个就是会碰到表格宽度对不齐的问题。首先，来分析一下这三个标签中height和width的区别：</p><h4 id="1、table中的width和height设置及其作用："><a href="#1、table中的width和height设置及其作用：" class="headerlink" title="1、table中的width和height设置及其作用："></a>1、table中的width和height设置及其作用：</h4><p>table中设置的height其实是设置一个最小值，也就是当表格中的内容或者行高总值超过这个设置值时，会自动延长表格的height值，当表格中的内容或者行高没有达到这个值时，会自动扩大到这个值。</p><p>table中设置的width值一般为表格宽度的最大值，不能改变，即使内部的内容宽度超过也不能改变。（这个内部内容如果是图片的话是可以改变表格宽度的。）</p><h4 id="2、tr标签中width和height设置及其作用："><a href="#2、tr标签中width和height设置及其作用：" class="headerlink" title="2、tr标签中width和height设置及其作用："></a>2、tr标签中width和height设置及其作用：</h4><p>tr标签里面的width设置不起任何作用，因为从第一点可以看出，表格的width是不能改变的，tr标签当然就不起作用了。</p><p>所以在tr中只有讨论height设置的可能了，tr中的height设置和几个tr之间的设置有关。</p><p>当几个tr都设置了height的具体数值时，各个tr的height按照设置的值的比例来分配总的height值，注意这里说的是总的height值。</p><p>当几个tr都没有设置height具体值时，平均分配总的height值。</p><p>当有的tr设置了具体的数值，有的没有设置具体的数值为默认时，先保证各个tr的基本需要，剩下的再满足设置了具体值的tr，之后再全部给没有设置具体值的tr。</p><p>最后一种情况还要考虑总的宽度不够tr总的设置值的情况，不够的话要满足tr的基本需要，这里会自动延长表格的height的。然后再考虑设置了height的tr，最后考虑没有设置height的tr。</p><h4 id="3、td标签中width和height设置及其作用："><a href="#3、td标签中width和height设置及其作用：" class="headerlink" title="3、td标签中width和height设置及其作用："></a>3、td标签中width和height设置及其作用：</h4><p>td标签里面的width和height都是起作用的。先看td的width吧，某一个td的width是和所处的一列每个td的width都相关的，取其中最大的width作为这一列中每个td的width，一定要从全局把握某个td的width，不能从这一个的width设置就断言它的宽度就是多少，这样是不准确的。</p><p>当我们把每一列的宽度都弄清楚之后，事情就好办了。这时候各个td之间的宽度分配按照第二条中各tr的height分配规律，</p><p>有一点不同的是全部是默认的情况下，各td的width不是平均分配，而是根据各自的实际内容按比例分配。</p><p>再看看td的height设置吧，各个td的height要看这个td所在的行的最大高度来确定这一行的每个td的height，然后各个行的高度情况和tr中的height分配原则是一样的。</p><p>还有一点要注意，就是td的height和tr的height之间的关系。首先肯定是根据内容的需要，在这个基础上，再根据设置的值来确定，哪个设置的值大就按照哪个，如果一个设置了值一个没有设置值，那么按照设置值的算。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于html中table表格tr-td的高度和宽度&quot;&gt;&lt;a href=&quot;#关于html中table表格tr-td的高度和宽度&quot; class=&quot;headerlink&quot; title=&quot;关于html中table表格tr,td的高度和宽度&quot;&gt;&lt;/a&gt;关于html中tabl
      
    
    </summary>
    
      <category term="布局" scheme="https://jermyo.github.io/JerBlog/categories/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="布局" scheme="https://jermyo.github.io/JerBlog/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>vue移动端项目，屏幕适配方法，rem</title>
    <link href="https://jermyo.github.io/JerBlog/2018/10/16/vue%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E6%96%B9%E6%B3%95%EF%BC%8Crem/"/>
    <id>https://jermyo.github.io/JerBlog/2018/10/16/vue移动端项目，屏幕适配方法，rem/</id>
    <published>2018-10-16T12:25:33.000Z</published>
    <updated>2018-10-16T12:46:27.574Z</updated>
    
    <content type="html"><![CDATA[<p>亲测有效，大家可以试试。</p><p>使用的是vue-cli搭建的webpack项目，然后按步骤一步一步走下去就成功了</p><h3 id="1-终端中输入"><a href="#1-终端中输入" class="headerlink" title="1.终端中输入"></a>1.终端中输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i lib-flexible --save</span><br></pre></td></tr></table></figure><h3 id="2-终端中输入"><a href="#2-终端中输入" class="headerlink" title="2.终端中输入"></a>2.终端中输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i px2rem-loader --save-dev</span><br></pre></td></tr></table></figure><h3 id="3-在项目入口文件-main-js-里-引入-lib-flexible"><a href="#3-在项目入口文件-main-js-里-引入-lib-flexible" class="headerlink" title="3.在项目入口文件 main.js 里 引入 lib-flexible"></a>3.在项目入口文件 main.js 里 引入 lib-flexible</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;lib-flexible&apos;</span><br></pre></td></tr></table></figure><h3 id="4-在项目根目录的-index-html-中添加如下-meta"><a href="#4-在项目根目录的-index-html-中添加如下-meta" class="headerlink" title="4.在项目根目录的 index.html 中添加如下 meta"></a>4.在项目根目录的 index.html 中添加如下 meta</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="5-在build文件夹下的util-js中添加"><a href="#5-在build文件夹下的util-js中添加" class="headerlink" title="5.在build文件夹下的util.js中添加"></a>5.在build文件夹下的util.js中添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// utils.js</span><br><span class="line">var cssLoader = &#123;</span><br><span class="line">  loader: &apos;css-loader&apos;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    minimize: process.env.NODE_ENV === &apos;production&apos;,</span><br><span class="line">    sourceMap: options.sourceMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var px2remLoader = &#123;</span><br><span class="line">  loader: &apos;px2rem-loader&apos;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    remUnit: 75</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并放进generateLoaders函数的 loaders 数组中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function generateLoaders(loader, loaderOptions) &#123;</span><br><span class="line">  var loaders = [cssLoader, px2remLoader]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-重新在终端中输入-npm-run-dev-即可"><a href="#6-重新在终端中输入-npm-run-dev-即可" class="headerlink" title="6.重新在终端中输入 npm run dev 即可"></a>6.重新在终端中输入 npm run dev 即可</h3><h3 id="PS：以上实现转换适用于："><a href="#PS：以上实现转换适用于：" class="headerlink" title="PS：以上实现转换适用于："></a>PS：以上实现转换适用于：</h3><p>（1）组件中编写的<style></style>下的css</p><p>（2）从index.js或者main.js中import ‘../../static/css/reset.css’引入css</p><p>（3）在组件的&lt;script type=”text/ecmascript-6″&gt; import ‘../../static/css/reset.css’中引入css</p><p>   另外的情况不适用：</p><p>（1）组件<style></style>中@import “../../static/css/reset.css (可考虑上面（2）、（3）的形式引入)</p><p>（2）外部样式:&lt;link rel=”stylesheet” href=”static/css/reset.css”&gt;</p><p>（3）元素内部样式：style=”height: 417px; width: 550px;”</p><p> 补充另外我要补充的是：在做移动端适配的时候我们不建议给字体也设置rem的单位，针对这种情况，我为字体适配的解决方案是使用媒体查询，文件以组件<style></style>中@import “../../static/css/reset.css形式引入，可完美解决移动端适配问题</p><p>更多详情请戳 <a href="https://blog.csdn.net/qq_33485463/article/details/80454326" target="_blank" rel="noopener">传送门</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;亲测有效，大家可以试试。&lt;/p&gt;
&lt;p&gt;使用的是vue-cli搭建的webpack项目，然后按步骤一步一步走下去就成功了&lt;/p&gt;
&lt;h3 id=&quot;1-终端中输入&quot;&gt;&lt;a href=&quot;#1-终端中输入&quot; class=&quot;headerlink&quot; title=&quot;1.终端中输入&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="vue整理" scheme="https://jermyo.github.io/JerBlog/categories/vue%E6%95%B4%E7%90%86/"/>
    
    
      <category term="vue" scheme="https://jermyo.github.io/JerBlog/tags/vue/"/>
    
      <category term="移动端" scheme="https://jermyo.github.io/JerBlog/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用畅言评论系统</title>
    <link href="https://jermyo.github.io/JerBlog/2018/10/13/Hexo%E4%BD%BF%E7%94%A8%E7%95%85%E8%A8%80%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jermyo.github.io/JerBlog/2018/10/13/Hexo使用畅言评论系统/</id>
    <published>2018-10-13T15:25:33.000Z</published>
    <updated>2018-10-13T16:17:49.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>作为一个博客网站，怎么能没有跟各位互动呢，而github是一个纯静态的网页博客，无法设置评论，所以就只有用其它网站的插件了。听网上说之前githubpage很多人的评论系统是用的多说，不过最近多说网站关闭，导致很多人没有办法使用评论，而友言又因为是http协议不支持https的github博客,别担心，还有一个替代品，那就是畅言</p><h3 id="二、注册登录畅言"><a href="#二、注册登录畅言" class="headerlink" title="二、注册登录畅言"></a>二、注册登录畅言</h3><p>网上搜索畅言，可以直接传送门：<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">http://changyan.kuaizhan.com/</a><br><img src="https://img-blog.csdn.net/20181013234108260?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p>注册完成后还会有一大堆初始化，有个需要注意的地方，畅言是需要备案的，不备案会有15天的试用期，现在我们不管，点击下图标注的地方，后面我会介绍怎么通过备案。<br><img src="https://img-blog.csdn.net/20181013234342127?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>其它可以参考我写的。</p><h3 id="三、插入代码"><a href="#三、插入代码" class="headerlink" title="三、插入代码"></a>三、插入代码</h3><p>接下来就是代码的插入了，我用的是yelee的主题，所以就用这个作为例子。 </p><ol><li>在\themes\hexo-theme-yelee\layout_partial\comments文件夹下建立一个changyan.ejs的文件，文件里的代码参考在你畅言的管理页有。<br><img src="https://img-blog.csdn.net/20181013234434510?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></li></ol><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--PC版--&gt;</span><br><span class="line">&lt;div id=<span class="string">"SOHUCS"</span> &gt;&lt;/div&gt;</span><br><span class="line">&lt;script charset=<span class="string">"utf-8"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"https://changyan.sohu.com/upload/changyan.js"</span> &gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">window.changyan.api.config(&#123;</span><br><span class="line">appid: <span class="string">'***'</span>,</span><br><span class="line">conf: <span class="string">'***'</span><span class="string">'</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>这是我畅言网站建议我的代码<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=<span class="string">"changyan"</span> id=<span class="string">"comments"</span>&gt;    </span><br><span class="line">    &lt;div id=<span class="string">"SOHUCS"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script charset=<span class="string">"utf-8"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"https://changyan.sohu.com/upload/changyan.js"</span> &gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">         var loadComment = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                window.changyan.api.config(&#123;</span><br><span class="line">                appid: <span class="string">'**appid**'</span>,</span><br><span class="line">                conf: <span class="string">'**appkey**'</span></span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'click2show'</span>) %&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><p>大家参考我写的代码和网站示例代码，这里其实大家可以参考你们主题里面其它评论里面的代码，根据主题不同可以做变动，大家有不懂的地方可以给我发邮箱，我一定及时给你们答复。 </p><ol start="2"><li>在article.ejs里面添加一句代码，下面高亮部分就是我加的代码<figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;article id=<span class="string">"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;"</span> class=<span class="string">"article article-type-&lt;%= post.layout %&gt;"</span> itemscope itemprop=<span class="string">"blogPost"</span>&gt;</span><br><span class="line">  &lt;%<span class="keyword">if</span>(post.noDate != <span class="string">"true"</span>)&#123;%&gt;</span><br><span class="line">    &lt;div class=<span class="string">"article-meta"</span>&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/date'</span>, &#123;class_name: <span class="string">'article-date'</span>, date_format: null&#125;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;%&#125;%&gt;</span><br><span class="line">  &lt;div class=<span class="string">"article-inner"</span>&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.fancybox)&#123; %&gt;</span><br><span class="line">      &lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> class=<span class="string">"isFancy"</span> /&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (post.link || post.title)&#123; %&gt;</span><br><span class="line">      &lt;header class=<span class="string">"article-header"</span>&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'post/title'</span>, &#123;class_name: <span class="string">'article-title'</span>&#125;) %&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;% <span class="keyword">if</span> (!index)&#123; %&gt;</span><br><span class="line">      &lt;div class=<span class="string">"article-info article-info-post"</span>&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'post/category'</span>) %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'post/tag'</span>) %&gt;</span><br><span class="line">        &lt;div class=<span class="string">"clearfix"</span>&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;div class=<span class="string">"article-entry"</span> itemprop=<span class="string">"articleBody"</span>&gt;</span><br><span class="line">      &lt;% <span class="keyword">if</span> (index &amp;&amp; (post.description || post.excerpt))&#123; %&gt;</span><br><span class="line">          &lt;% <span class="keyword">if</span> (post.description)&#123; %&gt;</span><br><span class="line">              &lt;%- post.description %&gt;</span><br><span class="line">          &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">              &lt;%- post.excerpt %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">      &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">          &lt;% <span class="keyword">if</span> (is_page())&#123; %&gt;</span><br><span class="line">              &lt;%- partial(<span class="string">'_partial/page'</span>) %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">        &lt;%- post.content %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (index)&#123; %&gt;</span><br><span class="line">    &lt;div class=<span class="string">"article-info article-info-index"</span>&gt;</span><br><span class="line">      &lt;%<span class="keyword">if</span>(post.top)&#123;%&gt;</span><br><span class="line">        &lt;div class=<span class="string">"article-pop-out tagcloud"</span>&gt;</span><br><span class="line">          &lt;a class=<span class="string">""</span>&gt;置顶&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/category'</span>) %&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/tag'</span>) %&gt;</span><br><span class="line">      &lt;% <span class="keyword">if</span> (index &amp;&amp; (post.description || post.excerpt))&#123; %&gt;</span><br><span class="line">        &lt;p class=<span class="string">"article-more-link"</span>&gt;</span><br><span class="line">          &lt;a href=<span class="string">"&lt;%- url_for(post.path) %&gt;#more"</span>&gt;&lt;%= __(<span class="string">'index.more'</span>) %&gt; &gt;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      &lt;div class=<span class="string">"clearfix"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (!index)&#123; %&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'post/nav'</span>) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&lt;%- partial(<span class="string">'_partial/toc'</span>) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; theme.share.on &amp;&amp; (post.share != <span class="literal">false</span> || post.share))&#123; %&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'post/share'</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.duoshuo.on) &#123; %&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'comments/duoshuo'</span>, &#123;</span><br><span class="line">          key: post.path,</span><br><span class="line">          title: post.title,</span><br><span class="line">          url: config.url+url_for(post.path),</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.youyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/youyan'</span>) %&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.disqus.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/disqus'</span>, &#123;</span><br><span class="line">            shortname: theme.disqus.shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.disqus_shortname) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/disqus'</span>, &#123;</span><br><span class="line">            shortname: config.disqus_shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      <span class="comment">#下面这四行代码就是我加的代码</span></span><br><span class="line">      &lt;%<span class="keyword">else</span> <span class="keyword">if</span> (theme.changyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/changyan'</span>, &#123;</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt; </span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;%- partial(<span class="string">'_partial/post-nav-button'</span>) %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (!index) &#123; %&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &lt;% <span class="keyword">if</span> (post.fancybox === <span class="literal">false</span>)&#123; %&gt;</span><br><span class="line">            yiliaConfig.fancybox = <span class="literal">false</span>;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ol><p>我就加了这几行代码</p><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="keyword">else</span> <span class="keyword">if</span> (theme.changyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/changyan'</span>, &#123;</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其中theme.changyan.on是在主题的_config.yml文件中配置，comments/changyan是添加文件的位置。</p><ol start="3"><li>在主题的config.yml 文件中加<figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">changyan:</span><br><span class="line"> on: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p>  当然，我们要把文件中的preload_comment: 配成ture。<br> <figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preload_comment: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>此时，我们对畅言插件的添加就完成了一大半了。如果你畅言中的地址写对，应该在页面可以看到效果了。<br><img src="https://img-blog.csdn.net/20181013235328194?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h3 id="四、畅言的备案"><a href="#四、畅言的备案" class="headerlink" title="四、畅言的备案"></a>四、畅言的备案</h3><p>前面也提到，畅言是需要备案的，但是如果我们搭建个个人网站还得去买域名买空间备案，那也太得不偿失了。下面我教大家用一个方法忽略备案。 </p><ol><li>我们需要一个已经备案的网站域名和备案号，这个大家可以去网上百度。可以找一个小众的网站域名，去备案查询网查询备案号。 </li><li>然后在畅言后台系统 系统设置-通用设置添加备案号和站点网址，注意站点网址一定要改。<br><img src="https://img-blog.csdn.net/20181013235418583?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></li></ol><p>重点来了，备案地址没有写我们自己的网站域名我们的博客是用不了评论系统的，这个时候我们只需要把我们的域名地址写入域名白名单就行了。</p><p>做到这样，差不多就完成了。如果大家遇到什么问题，可以联系我的email，也可以在评论区写下你的评论，我会第一时间回复大家。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;作为一个博客网站，怎么能没有跟各位互动呢，而github是一个纯静态的网页博客，无法设置评论，所以就只有用其它网站的插件了。
      
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="畅言" scheme="https://jermyo.github.io/JerBlog/tags/%E7%95%85%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jermyo.github.io/JerBlog/2018/10/12/hello-world/"/>
    <id>https://jermyo.github.io/JerBlog/2018/10/12/hello-world/</id>
    <published>2018-10-12T06:53:23.641Z</published>
    <updated>2018-10-12T06:53:23.641Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BlueLake博客主题的详细配置</title>
    <link href="https://jermyo.github.io/JerBlog/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
    <id>https://jermyo.github.io/JerBlog/2016/12/29/BlueLake博客主题的详细配置/</id>
    <published>2016-12-29T03:25:33.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p><a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p><p>在阅读本文之前，假定您已经成功安装了<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><blockquote><p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong><code>根_config.yml</code></strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong><code>主题_config.yml</code></strong>。</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>您可以直接到<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p><h4 id="1-1-安装主题"><a href="#1-1-安装主题" class="headerlink" title="1.1 安装主题"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</span><br></pre></td></tr></table></figure></p><h4 id="1-2-安装主题渲染器"><a href="#1-2-安装主题渲染器" class="headerlink" title="1.2 安装主题渲染器"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-jade@0.3.0 --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></p><h4 id="1-3-启用主题"><a href="#1-3-启用主题" class="headerlink" title="1.3 启用主题"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">BlueLake</span></span><br></pre></td></tr></table></figure></p><h4 id="1-4-验证"><a href="#1-4-验证" class="headerlink" title="1.4 验证"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><h4 id="1-5-更新主题"><a href="#1-5-更新主题" class="headerlink" title="1.5 更新主题"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/BlueLake</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="2-1-配置网站头部显示文字"><a href="#2-1-配置网站头部显示文字" class="headerlink" title="2.1 配置网站头部显示文字"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="attr">author:</span></span><br></pre></td></tr></table></figure></p><p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p><h4 id="2-2-设置语言"><a href="#2-2-设置语言" class="headerlink" title="2.2 设置语言"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure></p><h4 id="2-3-设置菜单"><a href="#2-3-设置菜单" class="headerlink" title="2.3 设置菜单"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">home</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># - page: about</span></span><br><span class="line">  <span class="comment">#   directory: about/</span></span><br><span class="line">  <span class="comment">#   icon: fa-user</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">rss</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure></p><p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># About page </span></span><br><span class="line"><span class="attr">about:</span></span><br><span class="line"><span class="attr">  email:</span> <span class="comment">## 个人邮箱 </span></span><br><span class="line"><span class="attr">  weibo_url:</span> <span class="comment">## 微博主页链接地址</span></span><br><span class="line"><span class="attr">  github_url:</span> <span class="comment">## github主页链接地址</span></span><br></pre></td></tr></table></figure></p><h5 id="2-3-1-添加about页"><a href="#2-3-1-添加about页" class="headerlink" title="2.3.1 添加about页"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">'about'</span></span><br></pre></td></tr></table></figure></p><p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># About page </span></span><br><span class="line"><span class="attr">about:</span></span><br><span class="line"><span class="attr">  photo_url:</span> <span class="comment">## 头像的链接地址</span></span><br><span class="line"><span class="attr">  email:</span> <span class="comment">## 个人邮箱 </span></span><br><span class="line"><span class="attr">  weibo_url:</span> <span class="comment">## 微博主页链接地址</span></span><br><span class="line"><span class="attr">  weibo_name:</span> <span class="comment">## 微博用户名 </span></span><br><span class="line"><span class="attr">  github_url:</span> <span class="comment">## github主页链接地址</span></span><br><span class="line"><span class="attr">  github_name:</span> <span class="comment">## github用户名</span></span><br></pre></td></tr></table></figure></p><p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p><h5 id="2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></p><p>添加<code>主题_config.yml</code>配置：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="string">hexo-generator-feed</span></span><br><span class="line">  <span class="string">hexo-generator-sitemap</span></span><br><span class="line">  <span class="string">hexo-generator-baidu-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure></p><h4 id="2-4-添加本地搜索"><a href="#2-4-添加本地搜索" class="headerlink" title="2.4 添加本地搜索"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>来创建JSON数据文件：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure></p><p>然后在<code>根_config.yml</code>添加配置：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>最后在<code>主题_config.yml</code>添加配置：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="2-5-修改站点图标"><a href="#2-5-修改站点图标" class="headerlink" title="2.5 修改站点图标"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p><h4 id="2-6-添加站点关键字"><a href="#2-6-添加站点关键字" class="headerlink" title="2.6 添加站点关键字"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">网站简要描述,如：Charles·Zheng's</span> <span class="string">blog.</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">网站关键字,</span> <span class="string">key,</span> <span class="string">key1,</span> <span class="string">key2,</span> <span class="string">key3</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Charles</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure></p><h4 id="2-7-其他配置"><a href="#2-7-其他配置" class="headerlink" title="2.7 其他配置"></a>2.7 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p><ol><li><code>show_category_count</code>——是否显示分类下的文章数。</li><li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">show_category_count:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">widgets_on_small_screens:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-集成第三方服务"><a href="#3-集成第三方服务" class="headerlink" title="3.集成第三方服务"></a>3.集成第三方服务</h3><h4 id="3-1-添加评论"><a href="#3-1-添加评论" class="headerlink" title="3.1 添加评论"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href="http://duoshuo.com" target="_blank" rel="noopener">多说评论</a>、<a href="https://disqus.com" target="_blank" rel="noopener">Disqus评论</a>、<a href="https://livere.com" target="_blank" rel="noopener">来必力评论</a>、<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>、<a href="https://gentie.163.com/info.html" target="_blank" rel="noopener">网易云跟帖评论</a>、<a href="http://changyan.kuaizhan.com" target="_blank" rel="noopener">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前<code>网易云跟帖</code>和<code>畅言</code>还不错。</p><ol><li>注册并获得代码。<ul><li>若使用<a href="http://duoshuo.com" target="_blank" rel="noopener">多说评论</a>，注册多说后获得short_name。</li><li>若使用<a href="https://disqus.com" target="_blank" rel="noopener">Disqus评论</a>，注册Disqus后获得short_name。</li><li>若使用<a href="https://livere.com" target="_blank" rel="noopener">来必力评论</a>，注册来必力,获得data-uid。</li><li>若使用<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>，注册友言,获得uid。</li><li>若使用<a href="https://gentie.163.com/info.html" target="_blank" rel="noopener">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li><li>若使用<a href="http://changyan.kuaizhan.com" target="_blank" rel="noopener">畅言评论</a>，注册畅言，获得appid，appkey。</li></ul></li><li>配置<code>主题_config.yml</code>：<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Cmments</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line"><span class="attr">  duoshuo:</span> <span class="comment">## duoshuo_shortname</span></span><br><span class="line"><span class="attr">  disqus:</span> <span class="comment">## disqus_shortname</span></span><br><span class="line"><span class="attr">  livere:</span> <span class="comment">## 来必力(data-uid)</span></span><br><span class="line"><span class="attr">  uyan:</span> <span class="comment">## 友言(uid)</span></span><br><span class="line"><span class="attr">  cloudTie:</span> <span class="comment">## 网易云跟帖(productKey)</span></span><br><span class="line"><span class="attr">  changyan:</span> <span class="comment">## 畅言需在下方配置两个参数，此处不填。</span></span><br><span class="line"><span class="attr">    appid:</span> <span class="comment">## 畅言(appid)</span></span><br><span class="line"><span class="attr">    appkey:</span> <span class="comment">##畅言(appkey)</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-百度统计"><a href="#3-2-百度统计" class="headerlink" title="3.2 百度统计"></a>3.2 百度统计</h4><ol><li>登录<a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>，定位到站点的代码获取页面。</li><li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li><li>配置<code>主题_config.yml</code>:<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_analytics:</span> <span class="number">8006843039519956000</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p></blockquote><h4 id="3-3-卜算子阅读次数统计"><a href="#3-3-卜算子阅读次数统计" class="headerlink" title="3.3 卜算子阅读次数统计"></a>3.3 卜算子阅读次数统计</h4><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p><h4 id="3-4-微博秀"><a href="#3-4-微博秀" class="headerlink" title="3.4 微博秀"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href="http://open.weibo.com/" target="_blank" rel="noopener">微博开放平台</a>获取您自己的微博秀代码来替换。</p><ol><li>登录<a href="http://open.weibo.com/" target="_blank" rel="noopener">微博开放平台</a>，选择微博秀。</li><li>为了与主题风格统一，作如下配置<ul><li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li><li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li><li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li></ul></li><li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code><figure class="highlight stylus"><figcaption><span>weibo.jade</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade" target="_blank" rel="noopener">layout/_widget/weibo.jade</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line marked">.widget</span><br><span class="line">  .widget-title</span><br><span class="line">    i(class=<span class="string">'fa fa-weibo'</span>)= <span class="string">' '</span> + __(<span class="string">'新浪微博'</span>)</span><br><span class="line">  iframe(<span class="attribute">width</span>=<span class="string">"100%"</span>,height=<span class="string">"400"</span>,class=<span class="string">"share_self"</span>,frameborder=<span class="string">"0"</span>,scrolling=<span class="string">"no"</span>,src=<span class="string">"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1"</span>)</span><br></pre></td></tr></table></figure>这只是为了和主题的风格统一，当然您也可以自由随意发挥。<blockquote><p>注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/chaooo/hexo-theme-BlueLake&quot; target
      
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="BlueLake" scheme="https://jermyo.github.io/JerBlog/tags/BlueLake/"/>
    
  </entry>
  
  <entry>
    <title>自定义HEXO站内搜索Javascript+json</title>
    <link href="https://jermyo.github.io/JerBlog/2016/11/09/%E8%87%AA%E5%AE%9A%E4%B9%89HEXO%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2Javascript-json/"/>
    <id>https://jermyo.github.io/JerBlog/2016/11/09/自定义HEXO站内搜索Javascript-json/</id>
    <published>2016-11-09T01:24:56.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>目前很多<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：<br>    <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>生成<code>xml</code>格式的数据文件。<br>    <a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a> 生成<code>json</code>格式的数据文件。<br>今天的主角是<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure><p>然后执行<code>hexo generate</code>时会自动生成<code>content.json</code>文件，若使用默认设置，生成的数据结构如下<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">meta: &#123;</span><br><span class="line">    title: hexo.config.title,</span><br><span class="line">    subtitle: hexo.config.subtitle,</span><br><span class="line">    description: hexo.config.description,</span><br><span class="line">    author: hexo.config.author,</span><br><span class="line">    url: hexo.config.url</span><br><span class="line">&#125;,</span><br><span class="line">pages: [&#123; //-&gt; all pages</span><br><span class="line">    title: page.title,</span><br><span class="line">    slug: page.slug,</span><br><span class="line">    date: page.date,</span><br><span class="line">    updated: page.updated,</span><br><span class="line">    comments: page.comments,</span><br><span class="line">    permalink: page.permalink,</span><br><span class="line">    path: page.path,</span><br><span class="line">    excerpt: page.excerpt, //-&gt; only text ;)</span><br><span class="line">    keywords: null //-&gt; it needs settings</span><br><span class="line">    text: page.content, //-&gt; only text minified ;)</span><br><span class="line">    raw: page.raw, //-&gt; original MD content</span><br><span class="line">    content: page.content //-&gt; final HTML content</span><br><span class="line">&#125;],</span><br><span class="line">posts: [&#123; //-&gt; only published posts</span><br><span class="line">    title: post.title,</span><br><span class="line">    slug: post.slug,</span><br><span class="line">    date: post.date,</span><br><span class="line">    updated: post.updated,</span><br><span class="line">    comments: post.comments,</span><br><span class="line">    permalink: post.permalink,</span><br><span class="line">    path: post.path,</span><br><span class="line">    excerpt: post.excerpt, //-&gt; only text ;)</span><br><span class="line">    keywords: null //-&gt; it needs settings</span><br><span class="line">    text: post.content, //-&gt; only text minified ;)</span><br><span class="line">    raw: post.raw, //-&gt; original MD content</span><br><span class="line">    content: post.content, //-&gt; final HTML content</span><br><span class="line">    categories: [&#123;</span><br><span class="line">        name: category.name,</span><br><span class="line">        slug: category.slug,</span><br><span class="line">        permalink: category.permalink</span><br><span class="line">    &#125;],</span><br><span class="line">    tags: [&#123;</span><br><span class="line">        name: tag.name,</span><br><span class="line">        slug: tag.slug,</span><br><span class="line">        permalink: tag.permalink</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>hexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  keywords:</span> <span class="literal">false</span> <span class="comment"># (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)</span></span><br><span class="line"><span class="attr">  pages:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    keywords:</span> <span class="literal">true</span> <span class="comment"># but only if root keywords option language was set</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    keywords:</span> <span class="literal">true</span> <span class="comment"># but only if root keywords option language was set</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在<code>hexo/_config.yml</code>中加入：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span> <span class="comment">#文章标题</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span> <span class="comment">#发表日期</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span> <span class="comment">#路径</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span> <span class="comment">#文本字段</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span> <span class="comment">#标签</span></span><br></pre></td></tr></table></figure></p><p>这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。<br>例如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"自定义HEXO站内搜索Javascript+json"</span>,</span><br><span class="line">  <span class="attr">"date"</span>: <span class="string">"2016-11-09T01:24:56.000Z"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"2016/11/09/自定义HEXO站内搜索Javascript-json.html"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>: [&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"javascript,hexo"</span>,</span><br><span class="line">    <span class="attr">"slug"</span>: <span class="string">"javascript-hexo"</span>,</span><br><span class="line">    <span class="attr">"permalink"</span>: <span class="string">"http://chaoo.oschina.io/tags/javascript-hexo/"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-JavaScript实现代码"><a href="#3-JavaScript实现代码" class="headerlink" title="3.JavaScript实现代码"></a>3.JavaScript实现代码</h3><p>接下来就是用JS实现查询方法并把结果渲染到页面。</p><h4 id="3-1-xhr加载数据"><a href="#3-1-xhr加载数据" class="headerlink" title="3.1 xhr加载数据"></a>3.1 xhr加载数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchData;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params">success</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!searchData) &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'/content.json'</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status &gt;= <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.response || <span class="keyword">this</span>.responseText);</span><br><span class="line">                searchData = res <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? res : res.posts;</span><br><span class="line">                success(searchData);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="keyword">this</span>.statusText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="keyword">this</span>.statusText);</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        success(searchData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-匹配文章内容返回结果"><a href="#3-2-匹配文章内容返回结果" class="headerlink" title="3.2 匹配文章内容返回结果"></a>3.2 匹配文章内容返回结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matcher</span>(<span class="params">post, regExp</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 匹配优先级：title &gt; tags &gt; text</span></span><br><span class="line">    <span class="keyword">return</span> regtest(post.title, regExp) || post.tags.some(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> regtest(tag.name, regExp);</span><br><span class="line">    &#125;) || regtest(post.text, regExp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">regtest</span>(<span class="params">raw, regExp</span>) </span>&#123;</span><br><span class="line">    regExp.lastIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> regExp.test(raw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-结果渲染到页面"><a href="#3-3-结果渲染到页面" class="headerlink" title="3.3 结果渲染到页面"></a>3.3 结果渲染到页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (data.length) &#123;</span><br><span class="line">        html = data.map(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tpl(searchTpl, &#123;</span><br><span class="line">                title: post.title,</span><br><span class="line">                path: post.path,</span><br><span class="line">                date: <span class="keyword">new</span> <span class="built_in">Date</span>(post.date).toLocaleDateString(),</span><br><span class="line">                tags: post.tags.map(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'&lt;span&gt;'</span> + tag.name + <span class="string">'&lt;/span&gt;'</span>;</span><br><span class="line">                &#125;).join(<span class="string">''</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;).join(<span class="string">''</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-查询匹配"><a href="#3-3-查询匹配" class="headerlink" title="3.3 查询匹配"></a>3.3 查询匹配</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></span><br><span class="line">    <span class="comment">// a b c =&gt; /a|b|c/gmi</span></span><br><span class="line">    <span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key.replace(<span class="regexp">/[ ]/g</span>, <span class="string">'|'</span>), <span class="string">'gmi'</span>);</span><br><span class="line">    loadData(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> matcher(post, regExp);</span><br><span class="line">        &#125;);</span><br><span class="line">        render(result);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;目前很多&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="javascript" scheme="https://jermyo.github.io/JerBlog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>github博客迁移</title>
    <link href="https://jermyo.github.io/JerBlog/2016/08/17/github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>https://jermyo.github.io/JerBlog/2016/08/17/github博客迁移/</id>
    <published>2016-08-17T03:14:25.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。</p><h3 id="1-迁移代码"><a href="#1-迁移代码" class="headerlink" title="1.迁移代码"></a>1.迁移代码</h3><p>把代码从<a href="https://github.com/" target="_blank" rel="noopener">github</a>迁移至<a href="http://git.oschina.net/" target="_blank" rel="noopener">码云（oschina）</a>。<br>首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。<br>码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。<br><a id="more"></a><br>在GitHub上，可以新建一个以<code>用户名</code>命名的仓库，将网站代码放在master分支下，即可自动部署到：<code>http://用户名.github.io/</code>，若其他命名的仓库则新建一个<code>gh-pages</code>的分支，网站代码放在<code>gh-pages</code>下，，即可自动部署到：<code>http://用户名.github.io/仓库名/</code>。<br>对于码云，基本和GitHub一样，不过还需要手动开启Pages服务，而且其他仓库虽然默认在<code>osc-pages</code>下，但可自定到自己喜欢的分支上。<br>代码迁移步骤如下：</p><h5 id="1-1-新建码云项目"><a href="#1-1-新建码云项目" class="headerlink" title="1.1 新建码云项目"></a>1.1 新建码云项目</h5><p>以我自己的博客为例，项目地址：<a href="https://github.com/chaooo/chaooo.github.io.git" target="_blank" rel="noopener">https://github.com/chaooo/chaooo.github.io.git</a>。<br>它在Github上的Pages地址是：<a href="http://chaooo.github.io" target="_blank" rel="noopener">http://chaooo.github.io</a><br>如果想把它转移到码云Pages，只需要登录你的码云账户，点击右上角的<code>+</code>号，选择新建项目:<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina.jpg" alt="博客迁移至码云1"></p><h5 id="1-2-开启pages服务"><a href="#1-2-开启pages服务" class="headerlink" title="1.2 开启pages服务"></a>1.2 开启pages服务</h5><p>然后点击创建，项目会在后台自动导入，导入成功后，点击菜单栏的<code>Pages</code>,码云默认的Pages服务分支是osc-pages，但是你也已选择自己静态页面所在的分支，这里我的博客项目的静态页面分支是master，选择master并点击启动服务。<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina1.jpg" alt="博客迁移至码云2"><br>至此，博客已经部署成功，访问提供的地址：<a href="http://chaoo.oschina.io" target="_blank" rel="noopener">http://chaoo.oschina.io</a>即可查看到我的博客。<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina2.jpg" alt="博客迁移至码云3"></p><h3 id="2-修改hexo配置"><a href="#2-修改hexo配置" class="headerlink" title="2.修改hexo配置"></a>2.修改hexo配置</h3><p>打开博客根目录的_config.yml文件，找到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://chaooo.github.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/chaooo/chaooo.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>修改为(根据自己的仓库地址修改)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="comment">#url: http://chaooo.github.io</span></span><br><span class="line">url: http://chaoo.oschina.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"><span class="comment">#- type: git</span></span><br><span class="line"><span class="comment">#  repository: https://github.com/chaooo/chaooo.github.io.git</span></span><br><span class="line"><span class="comment">#  branch: master</span></span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://git.oschina.net/chaoo/chaoo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>然后执行下面命令，以重新生成<code>baidusitemap.xml</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure></p><h4 id="3-验证网站"><a href="#3-验证网站" class="headerlink" title="3.验证网站"></a>3.验证网站</h4><p>百度搜索引擎入口：<br><a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="noopener">百度搜索引擎入口</a>。<br>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>public/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaoo.oschina.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p><h3 id="4-sitemap提交"><a href="#4-sitemap提交" class="headerlink" title="4.sitemap提交"></a>4.sitemap提交</h3><p>直接点击<code>sitemap</code>填写数据文件地址：<code>http://chaoo.oschina.io/baidusitemap.xml</code>,输入验证码提交。</p><h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\themes\landscape\layout\_partial\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就可以等待百度收录了。</p><p><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina3.jpg" alt="博客迁移至码云4"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。&lt;/p&gt;
&lt;h3 id=&quot;1-迁移代码&quot;&gt;&lt;a href=&quot;#1-迁移代码&quot; class=&quot;headerlink&quot; title=&quot;1.迁移代码&quot;&gt;&lt;/a&gt;1.迁移代码&lt;/h3&gt;&lt;p&gt;把代码从&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;迁移至&lt;a href=&quot;http://git.oschina.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;码云（oschina）&lt;/a&gt;。&lt;br&gt;首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。&lt;br&gt;码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="github" scheme="https://jermyo.github.io/JerBlog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>好用的Web包管理器-Bower</title>
    <link href="https://jermyo.github.io/JerBlog/2016/08/12/Web%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-Bower/"/>
    <id>https://jermyo.github.io/JerBlog/2016/08/12/Web包管理器-Bower/</id>
    <published>2016-08-12T07:32:41.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。<br><a id="more"></a> </p><h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>在安装<a href="https://bower.io/" target="_blank" rel="noopener">bower</a>之前，必须确认你已经安装了<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>。</p><h3 id="1-安装Bower"><a href="#1-安装Bower" class="headerlink" title="1.安装Bower"></a>1.安装Bower</h3><p>使用npm，打开终端，键入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g bower   <span class="comment">#全局安装bower</span></span><br></pre></td></tr></table></figure></p><p>移步<a href="https://github.com/bower/bower/wiki/Troubleshooting" target="_blank" rel="noopener">这里</a>查看不同平台上安装的问题。</p><h3 id="2-使用Bower"><a href="#2-使用Bower" class="headerlink" title="2.使用Bower"></a>2.使用Bower</h3><p>使用help命令查看帮助。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">bower <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">    bower &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;] [&lt;options&gt;]</span><br><span class="line">Commands:</span><br><span class="line">    cache                   Manage bower cache</span><br><span class="line">    <span class="built_in">help</span>                    Display <span class="built_in">help</span> information about Bower</span><br><span class="line">    home                    Opens a package homepage into your favorite browser</span><br><span class="line">    info                    Info of a particular package</span><br><span class="line">    init                    Interactively create a bower.json file</span><br><span class="line">    install                 Install a package locally</span><br><span class="line">    link                    Symlink a package folder</span><br><span class="line">    list                    List <span class="built_in">local</span> packages - and possible updates</span><br><span class="line">    login                   Authenticate with GitHub and store credentials</span><br><span class="line">    lookup                  Look up a package URL by name</span><br><span class="line">    prune                   Removes <span class="built_in">local</span> extraneous packages</span><br><span class="line">    register                Register a package</span><br><span class="line">    search                  Search <span class="keyword">for</span> a package by name</span><br><span class="line">    update                  Update a <span class="built_in">local</span> package</span><br><span class="line">    uninstall               Remove a <span class="built_in">local</span> package</span><br><span class="line">    unregister              Remove a package from the registry</span><br><span class="line">    version                 Bump a package version</span><br><span class="line">Options:</span><br><span class="line">    -f, --force             Makes various commands more forceful</span><br><span class="line">    -j, --json              Output consumable JSON</span><br><span class="line">    -l, --loglevel          What level of logs to report</span><br><span class="line">    -o, --offline           Do not hit the network</span><br><span class="line">    -q, --quiet             Only output important information</span><br><span class="line">    -s, --silent            Do not output anything, besides errors</span><br><span class="line">    -V, --verbose           Makes output more verbose</span><br><span class="line">    --allow-root            Allows running commands as root</span><br><span class="line">    -v, --version           Output Bower version</span><br><span class="line">    --no-color              Disable colors</span><br><span class="line">See <span class="string">'bower help &lt;command&gt;'</span> <span class="keyword">for</span> more information on a specific <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure></p><h3 id="3-安装包到本地"><a href="#3-安装包到本地" class="headerlink" title="3.安装包到本地"></a>3.安装包到本地</h3><p>通过命令bower install安装软件包默认到bower_components/目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install &lt;package&gt;    <span class="comment">#package为包名</span></span><br></pre></td></tr></table></figure></p><p>想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bower install  <span class="comment"># 通过 bower.json 文件安装</span></span><br><span class="line">bower install jquery   <span class="comment"># 通过在github上注册的包名安装</span></span><br><span class="line">bower install desandro/masonry   <span class="comment"># GitHub短链接</span></span><br><span class="line">bower install git://github.com/user/package.git   <span class="comment"># Github上的 .git</span></span><br><span class="line">bower install http://example.com/script.js   <span class="comment"># URL</span></span><br></pre></td></tr></table></figure></p><p>安装选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-F, --force-latest: Force latest version on conflict</span><br><span class="line">-p, --production: Do not install project devDependencies</span><br><span class="line">-S, --save: Save installed packages into the project’s bower.json dependencies</span><br><span class="line">-D, --save-dev: Save installed packages into the project’s bower.json devDependencies</span><br><span class="line">-E, --save-exact: Configure installed packages with an exact version rather than semver</span><br></pre></td></tr></table></figure></p><h3 id="4-用bower-json文件来管理依赖"><a href="#4-用bower-json文件来管理依赖" class="headerlink" title="4.用bower.json文件来管理依赖"></a>4.用bower.json文件来管理依赖</h3><p>发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行<code>bower install</code>就可根据bower.json来安装依赖的包。<br>在项目中执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower init</span><br></pre></td></tr></table></figure></p><p>会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.<br>如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上<code>--save</code>即可。</p><h3 id="5-使用下载好的包"><a href="#5-使用下载好的包" class="headerlink" title="5.使用下载好的包"></a>5.使用下载好的包</h3><p>对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bower_components/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bower_components/jquery/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="6-更新包"><a href="#6-更新包" class="headerlink" title="6.更新包"></a>6.更新包</h3><p>若下载的包升级了，只需执行<code>update</code>命令即可更新，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower update jquery</span><br></pre></td></tr></table></figure></p><p>这样就可以自动升级到最新版的jquery了。<br>更新选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-F, --force-latest: Force latest version on conflict</span><br><span class="line">-p, --production: Do not install project devDependencies</span><br><span class="line">-S, --save: Update dependencies <span class="keyword">in</span> bower.json</span><br><span class="line">-D, --save-dev: Update devDependencies <span class="keyword">in</span> bower.json</span><br></pre></td></tr></table></figure></p><h3 id="7-搜索包"><a href="#7-搜索包" class="headerlink" title="7.搜索包"></a>7.搜索包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bower search               <span class="comment">#搜索所有包</span></span><br><span class="line">bower search &lt;packageName&gt; <span class="comment">#搜索指定名称的包</span></span><br></pre></td></tr></table></figure><p>或者可以在<a href="https://bower.io/search/" target="_blank" rel="noopener">这里:https://bower.io/search/</a>搜索喜欢的包.</p><h3 id="8-卸载包"><a href="#8-卸载包" class="headerlink" title="8.卸载包"></a>8.卸载包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</span><br></pre></td></tr></table></figure><p>卸载选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-S, --save: Remove uninstalled packages from the project’s bower.json dependencies</span><br><span class="line">-D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。&lt;br&gt;
    
    </summary>
    
      <category term="前端工具" scheme="https://jermyo.github.io/JerBlog/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="bower" scheme="https://jermyo.github.io/JerBlog/tags/bower/"/>
    
  </entry>
  
  <entry>
    <title>Node.js RESTful API(16)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/30/Node.js%20RESTful%20API/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/30/Node.js RESTful API/</id>
    <published>2016-06-30T03:38:20.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="16、Node-js-RESTful-API"><a href="#16、Node-js-RESTful-API" class="headerlink" title="16、Node.js RESTful API */"></a>16、Node.js RESTful API */</h3><p>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。<br><a id="more"></a></p><h4 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h4><p>以下为 REST 基本架构的四个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET - 用于获取数据。</span><br><span class="line">PUT - 用于添加数据。</span><br><span class="line">DELETE - 用于删除数据。</span><br><span class="line">POST - 用于更新或添加数据。</span><br></pre></td></tr></table></figure></p><h4 id="创建-RESTful"><a href="#创建-RESTful" class="headerlink" title="创建 RESTful"></a>创建 RESTful</h4><p>首先，创建一个 json 数据资源文件 users.json，内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"user1"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"mahesh"</span>,</span><br><span class="line">    <span class="attr">"password"</span> : <span class="string">"password1"</span>,</span><br><span class="line">    <span class="attr">"profession"</span> : <span class="string">"teacher"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"user2"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"suresh"</span>,</span><br><span class="line">    <span class="attr">"password"</span> : <span class="string">"password2"</span>,</span><br><span class="line">    <span class="attr">"profession"</span> : <span class="string">"librarian"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"user3"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"ramesh"</span>,</span><br><span class="line">    <span class="attr">"password"</span> : <span class="string">"password3"</span>,</span><br><span class="line">    <span class="attr">"profession"</span> : <span class="string">"clerk"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">3</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于以上数据，我们创建以下 RESTful API：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">序号  URI       HTTP方法  发送内容   结果</span><br><span class="line">  1   listUsers   GET     空          显示所有用户列表</span><br><span class="line">  2   addUser   POST      JSON 字符串   添加新用户</span><br><span class="line">  3   deleteUser  DELETE    JSON 字符串   删除用户</span><br><span class="line">  4   :id       GET     空          显示用户详细信息</span><br></pre></td></tr></table></figure></p><h4 id="获取用户列表：listUsers"><a href="#获取用户列表：listUsers" class="headerlink" title="获取用户列表：listUsers"></a>获取用户列表：listUsers</h4><p>创建 RESTful API listUsers，用于读取用户的信息列表， server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">app.get(<span class="string">'./listUsers'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/listUsers，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081/listUsers，结果如下所示：</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"user1"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"mahesh"</span>,</span><br><span class="line">      <span class="attr">"password"</span> : <span class="string">"password1"</span>,</span><br><span class="line">      <span class="attr">"profession"</span> : <span class="string">"teacher"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"user2"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"suresh"</span>,</span><br><span class="line">      <span class="attr">"password"</span> : <span class="string">"password2"</span>,</span><br><span class="line">      <span class="attr">"profession"</span> : <span class="string">"librarian"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">2</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"user3"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"ramesh"</span>,</span><br><span class="line">      <span class="attr">"password"</span> : <span class="string">"password3"</span>,</span><br><span class="line">      <span class="attr">"profession"</span> : <span class="string">"clerk"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">3</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加用户：addUser"><a href="#添加用户：addUser" class="headerlink" title="添加用户：addUser"></a>添加用户：addUser</h4><p>创建 RESTful API addUser， 用于添加新的用户数据，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//添加的新用户数据</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  <span class="string">"user4"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"mohit"</span>,</span><br><span class="line">      <span class="string">"password"</span> : <span class="string">"password4"</span>,</span><br><span class="line">      <span class="string">"profession"</span> : <span class="string">"teacher"</span>,</span><br><span class="line">      <span class="string">"id"</span>: <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">app.get(<span class="string">'./addUser'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//读取已存在的数据</span></span><br><span class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    data[<span class="string">"user4"</span>] = user[<span class="string">"user4"</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/addUser，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081/addUser，结果如下所示：</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123; user1:</span><br><span class="line">   &#123; name: 'mahesh',</span><br><span class="line">     password: 'password1',</span><br><span class="line">     profession: 'teacher',</span><br><span class="line">     id: 1 &#125;,</span><br><span class="line">  user2:</span><br><span class="line">   &#123; name: 'suresh',</span><br><span class="line">     password: 'password2',</span><br><span class="line">     profession: 'librarian',</span><br><span class="line">     id: 2 &#125;,</span><br><span class="line">  user3:</span><br><span class="line">   &#123; name: 'ramesh',</span><br><span class="line">     password: 'password3',</span><br><span class="line">     profession: 'clerk',</span><br><span class="line">     id: 3 &#125;,</span><br><span class="line">  user4:</span><br><span class="line">   &#123; name: 'mohit',</span><br><span class="line">     password: 'password4',</span><br><span class="line">     profession: 'teacher',</span><br><span class="line">     id: 4 &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="删除用户：deleteUser"><a href="#删除用户：deleteUser" class="headerlink" title="删除用户：deleteUser"></a>删除用户：deleteUser</h4><p>创建 RESTful API deleteUser， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">app.get(<span class="string">'./deleteUser'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//读取已存在的数据</span></span><br><span class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    <span class="keyword">delete</span> data[<span class="string">"user"</span>+<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/deleteUser，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081/deleteUser，结果如下所示：</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123; user1:</span><br><span class="line">   &#123; name: 'mahesh',</span><br><span class="line">     password: 'password1',</span><br><span class="line">     profession: 'teacher',</span><br><span class="line">     id: 1 &#125;,</span><br><span class="line">  user3:</span><br><span class="line">   &#123; name: 'ramesh',</span><br><span class="line">     password: 'password3',</span><br><span class="line">     profession: 'clerk',</span><br><span class="line">     id: 3 &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="显示用户详情：-id-用户id"><a href="#显示用户详情：-id-用户id" class="headerlink" title="显示用户详情：:id(用户id)"></a>显示用户详情：:id(用户id)</h4><p>创建 RESTful API :id（用户id）， 用于读取指定用户的详细信息，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">app.get(<span class="string">'./:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//读取已存在的数据</span></span><br><span class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    <span class="keyword">var</span> user = data[<span class="string">"user"</span> + req.params.id]</span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(user));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/2，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081/2，结果如下所示：</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"name"</span>:<span class="string">"suresh"</span>,</span><br><span class="line">   <span class="attr">"password"</span>:<span class="string">"password2"</span>,</span><br><span class="line">   <span class="attr">"profession"</span>:<span class="string">"librarian"</span>,</span><br><span class="line">   <span class="attr">"id"</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;16、Node-js-RESTful-API&quot;&gt;&lt;a href=&quot;#16、Node-js-RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;16、Node.js RESTful API */&quot;&gt;&lt;/a&gt;16、Node.js RESTful API */&lt;/h3&gt;&lt;p&gt;REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Express 框架(15)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/30/Node.js%20Express%20%E6%A1%86%E6%9E%B6/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/30/Node.js Express 框架/</id>
    <published>2016-06-30T01:38:20.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="15、Node-js-Express-框架"><a href="#15、Node-js-Express-框架" class="headerlink" title="15、Node.js Express 框架"></a>15、Node.js Express 框架</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：<br>1、可以设置中间件来响应 HTTP 请求。<br>2、定义了路由表用于执行不同的 HTTP 请求动作。<br>3、可以通过向模板传递参数来动态渲染 HTML 页面。<br><a id="more"></a></p><h4 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h4><p>安装 Express 并将其保存到依赖列表中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure></p><p>以上命令会将 Express 框架安装在当期目录的 <code>node_modules</code> 目录中， <code>node_modules</code> 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</span><br><span class="line">//cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</span><br><span class="line">//multer - node.js 中间件，用于处理 enctype=&quot;multipart/form-data&quot;（设置表单的MIME编码）的表单数据。</span><br><span class="line">  npm install body-parser --save</span><br><span class="line">  npm install cookie-parser --save</span><br><span class="line">  npm install multer --save</span><br></pre></td></tr></table></figure></p><h4 id="第一个-Express-框架实例"><a href="#第一个-Express-框架实例" class="headerlink" title="第一个 Express 框架实例"></a>第一个 Express 框架实例</h4><p>接下来我们使用 Express 框架来输出 “Hello World”。以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。<br>创建 express_demo.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node express_demo.js</span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081，结果如下所示：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><h4 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h4><p>Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</p><h4 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h4><p>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：<br><code>req.app</code>：当callback为外部文件时，用req.app访问express的实例<br><code>req.baseUrl</code>：获取路由当前安装的URL路径<br><code>req.body / req.cookies</code>：获得「请求主体」/ Cookies<br><code>req.fresh / req.stale</code>：判断请求是否还「新鲜」<br><code>req.hostname / req.ip</code>：获取主机名和IP地址<br><code>req.originalUrl</code>：获取原始请求URL<br><code>req.params</code>：获取路由的parameters<br><code>req.path</code>：获取请求路径<br><code>req.protocol</code>：获取协议类型<br><code>req.query</code>：获取URL的查询参数串<br><code>req.route</code>：获取当前匹配的路由<br><code>req.subdomains</code>：获取子域名<br><code>req.accpets（）</code>：检查请求的Accept头的请求类型<br><code>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages</code><br><code>req.get（）</code>：获取指定的HTTP请求头<br><code>req.is（）</code>：判断请求头Content-Type的MIME类型</p><h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><p>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：<br><code>res.app</code>：同req.app一样<br><code>res.append（）</code>：追加指定HTTP头<br><code>res.set（）</code>在res.append（）后将重置之前设置的头<br><code>res.cookie（name，value [，option]）</code>：设置Cookie<br><code>opition</code>: domain / expires / httpOnly / maxAge / path / secure / signed<br><code>res.clearCookie（）</code>：清除Cookie<br><code>res.download（）</code>：传送指定路径的文件<br><code>res.get（）</code>：返回指定的HTTP头<br><code>res.json（）</code>：传送JSON响应<br><code>res.jsonp（）</code>：传送JSONP响应<br><code>res.location（）</code>：只设置响应的Location HTTP头，不设置状态码或者close response<br><code>res.redirect（）</code>：设置响应的Location HTTP头，并且设置状态码302<br><code>res.send（）</code>：传送HTTP响应<br><code>res.sendFile（path [，options] [，fn]）</code>：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br><code>res.set（）</code>：设置HTTP头，传入object可以一次设置多个头<br><code>res.status（）</code>：设置HTTP状态码<br><code>res.type（）</code>：设置Content-Type的MIME类型</p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。<br>创建 express_demo2.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="comment">//主页输出"Hello World"</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"主页GET请求"</span>);</span><br><span class="line">  res.send(<span class="string">'Hello GET'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//POST请求</span></span><br><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"主页 POST 请求"</span>);</span><br><span class="line">  res.send(<span class="string">'Hello POST'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// /del_user页面响应</span></span><br><span class="line">app.delete(<span class="string">'/del_user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"/del_user响应 DELETE 请求"</span>);</span><br><span class="line">  res.send(<span class="string">'删除页面'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// /list_user 页面 GET 请求</span></span><br><span class="line">app.get(<span class="string">'/list_user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"/list_user 页面 GET 请求"</span>);</span><br><span class="line">  res.send(<span class="string">'用户列表页面'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 对页面 abcd, abxcd, ab123cd, 等响应GET请求</span></span><br><span class="line">app.get(<span class="string">'/ab*cd'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"/ab*cd GET 请求"</span>);</span><br><span class="line">  res.send(<span class="string">'正则匹配'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  node express_demo2.js</span><br><span class="line">  应用实例，访问地址为 http://0.0.0.0:8081</span><br><span class="line">```        </span><br><span class="line">接下来你可以尝试访问 http://127.0.0.1:8081 不同的地址，查看效果。</span><br><span class="line">  访问 http://127.0.0.1:8081/list_user 结果：用户列表页</span><br><span class="line">  访问 http://127.0.0.1:8081/abcd 结果：正则匹配</span><br><span class="line">  访问 http://127.0.0.1:8081/abcdefg 结果：Cannot GET/abcdefg 无法解析该地址</span><br><span class="line">#### 静态文件</span><br><span class="line">Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：</span><br><span class="line">``` javascript</span><br><span class="line">        app.use(express.static(&apos;public&apos;));//public为放置静态文件的目录</span><br></pre></td></tr></table></figure></p><p>我们可以到 public/images 目录下放些图片,如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">server.js</span><br><span class="line">public/</span><br><span class="line">public/images</span><br><span class="line">public/images/logo.png</span><br></pre></td></tr></table></figure></p><p>让我们再修改下 “Hello Word” 应用添加处理静态文件的功能。<br>创建 express_demo3.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node express_demo3.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/images/logo.png" target="_blank" rel="noopener">http://127.0.0.1:8081/images/logo.png</a> ,结果展示了图片。</p><h4 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h4><p>以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8081/process_get"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">      First Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"first_name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"last_name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>server.js文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/process_get'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//输出JSON格式</span></span><br><span class="line">  response = &#123;</span><br><span class="line">    first_name:req.query.first_name,</span><br><span class="line">    last_name:req.query.last_name</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(response));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);         </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：" target="_blank" rel="noopener">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p><h4 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h4><p>以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码修改如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8081/process_post"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">      First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"first_name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"last_name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>server.js 文件代码修改如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="comment">//创建application/x-www-form-urlencode编码解析</span></span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/process_post'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//输出 JSON 格式</span></span><br><span class="line">  response = &#123;</span><br><span class="line">    first_name:req.body.first_name,</span><br><span class="line">    last_name:req.body.last_name</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(response));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);         </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：" target="_blank" rel="noopener">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。<br>index.htm 文件代码修改如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件上传：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    选择一个文件上传: <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/file_upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">size</span>=<span class="string">"50"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>server.js 文件代码修改如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line">app.use(multer(&#123;<span class="attr">dest</span>:<span class="string">'/tmp/'</span>&#125;).array(<span class="string">'image'</span>));</span><br><span class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/file_upload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.files[<span class="number">0</span>]);<span class="comment">//上传文件信息</span></span><br><span class="line">  <span class="keyword">var</span> des_file = __dirname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</span><br><span class="line">  fs.readFile(req. files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        response = &#123;</span><br><span class="line">          message:<span class="string">'File uploaded successfully'</span>,</span><br><span class="line">          filename:req.files[<span class="number">0</span>].originalname</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">console</span>.log(response);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(response));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：" target="_blank" rel="noopener">http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：</a><br>  <code>{&quot;message&quot;:&quot;File uploaded successfully&quot;,&quot;filename&quot;:&quot;a.jpg&quot;}</code></p><h4 id="Cookie-管理"><a href="#Cookie-管理" class="headerlink" title="Cookie 管理"></a>Cookie 管理</h4><p>我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：<br>express_cookie.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Cookies: "</span>, req.cookies);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;15、Node-js-Express-框架&quot;&gt;&lt;a href=&quot;#15、Node-js-Express-框架&quot; class=&quot;headerlink&quot; title=&quot;15、Node.js Express 框架&quot;&gt;&lt;/a&gt;15、Node.js Express 框架&lt;/h3&gt;&lt;p&gt;Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。&lt;br&gt;Express 框架核心特性：&lt;br&gt;1、可以设置中间件来响应 HTTP 请求。&lt;br&gt;2、定义了路由表用于执行不同的 HTTP 请求动作。&lt;br&gt;3、可以通过向模板传递参数来动态渲染 HTML 页面。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Web 模块(14)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/29/Node.js%20Web%E6%A8%A1%E5%9D%97/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/29/Node.js Web模块/</id>
    <published>2016-06-29T12:51:36.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="14、Node-js-Web-模块"><a href="#14、Node-js-Web-模块" class="headerlink" title="14、Node.js Web 模块"></a>14、Node.js Web 模块</h3><p>使用 Node 创建 Web 服务器<br>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br></pre></td></tr></table></figure></p><p>以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//解析请求，包括文件名</span></span><br><span class="line">  <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">  <span class="comment">//输出请求文件名</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</span><br><span class="line">  <span class="comment">//从文件系统中读取请求的文件内容</span></span><br><span class="line">  fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">      <span class="comment">//HTTP 状态码：404：NOT FOUND</span></span><br><span class="line">      <span class="comment">//Content Type：text/plain</span></span><br><span class="line">      response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//HTTP 状态码：200：OK</span></span><br><span class="line">      <span class="comment">//Content Type：text/plain</span></span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">      <span class="comment">//响应文件内容</span></span><br><span class="line">      response.write(data.toString());</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure></p><p>控制台会输出以下信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8081/'</span>);</span><br></pre></td></tr></table></figure></p><p>接下来我们在该目录下创建一个 index.htm 文件，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>执行 server.js 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br><span class="line">Server running at http://127.0.0.1:8081/</span><br></pre></td></tr></table></figure></p><h4 id="使用-Node-创建-Web-客户端"><a href="#使用-Node-创建-Web-客户端" class="headerlink" title="使用 Node 创建 Web 客户端"></a>使用 Node 创建 Web 客户端</h4><p>Node 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//用于请求选项</span></span><br><span class="line"><span class="keyword">var</span> optionss = &#123;</span><br><span class="line">  host:<span class="string">'localhost'</span>,</span><br><span class="line">  port:<span class="string">'8081'</span></span><br><span class="line">  path:<span class="string">'/index.htm'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理响应的回调函数</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//不断更新数据</span></span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">''</span>;</span><br><span class="line">  response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    body += data;</span><br><span class="line">  &#125;);</span><br><span class="line">  response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//数据接收完成</span></span><br><span class="line">    <span class="built_in">console</span>.log(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向服务器端发送请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, callback);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure></p><p>新开一个终端，执行 client.js 文件，输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node client.js</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 server.js 的控制台输出信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Server running at http://127.0.0.1:8081/</span><br><span class="line">Request for /index.htm received.   # 客户端请求信息</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;14、Node-js-Web-模块&quot;&gt;&lt;a href=&quot;#14、Node-js-Web-模块&quot; class=&quot;headerlink&quot; title=&quot;14、Node.js Web 模块&quot;&gt;&lt;/a&gt;14、Node.js Web 模块&lt;/h3&gt;&lt;p&gt;使用 Node 创建 Web 服务器&lt;br&gt;Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 工具模块(13)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/29/Node.js%20%E5%B7%A5%E5%85%B7%E6%A8%A1%E5%9D%97/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/29/Node.js 工具模块/</id>
    <published>2016-06-29T10:38:26.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="13、Node-js-工具模块"><a href="#13、Node-js-工具模块" class="headerlink" title="13、Node.js 工具模块"></a>13、Node.js 工具模块</h3><h4 id="Node-js-OS-模块"><a href="#Node-js-OS-模块" class="headerlink" title="Node.js OS 模块"></a>Node.js OS 模块</h4><p>Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br></pre></td></tr></table></figure></p><h5 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>os.tmpdir()</code>//返回操作系统的默认临时文件夹。<br><a id="more"></a><br>2  <code>os.endianness()</code>//返回 CPU 的字节序，可能的是 “BE” 或 “LE”。<br>3  <code>os.hostname()</code>//返回操作系统的主机名。<br>4  <code>os.type()</code>//返回操作系统名<br>5  <code>os.platform()</code>//返回操作系统名<br>6  <code>os.arch()</code>//返回操作系统 CPU 架构，可能的值有 “x64”、”arm” 和 “ia32”。<br>7  <code>os.release()</code>//返回操作系统的发行版本。<br>8  <code>os.uptime()</code>//返回操作系统运行的时间，以秒为单位。<br>9  <code>os.loadavg()</code>//返回一个包含 1、5、15 分钟平均负载的数组。<br>10  <code>os.totalmem()</code>//返回系统内存总量，单位为字节。<br>11  <code>os.freemem()</code>//返回操作系统空闲内存量，单位是字节。<br>12  <code>os.cpus()</code>//返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。<br>13  <code>os.networkInterfaces()</code>//获得网络接口列表。</p><h5 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h5><p><code>os.EOL</code>//定义了操作系统的行尾符的常量。<br>实例<br>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'endianness : '</span> + os.endianness());<span class="comment">// CPU 的字节序</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'type : '</span> + os.type());<span class="comment">// 操作系统名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'platform : '</span> + os.platform());<span class="comment">// 操作系统名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'total memory : '</span> + os.totalmem() + <span class="string">" bytes."</span>);<span class="comment">// 系统内存总量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'free memory : '</span> + os.freemem() + <span class="string">" bytes."</span>);<span class="comment">// 操作系统空闲内存量</span></span><br></pre></td></tr></table></figure></p><p>代码执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node main.js </span><br><span class="line">endianness : LE</span><br><span class="line">type : Linux</span><br><span class="line">platform : linux</span><br><span class="line">total memory : 25103400960 bytes.</span><br><span class="line">free memory : 20676710400 bytes.</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-Path-模块"><a href="#Node-js-Path-模块" class="headerlink" title="Node.js Path 模块"></a>Node.js Path 模块</h4><p>Node.js path 模块提供了一些用于处理文件路径的小工具，我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure></p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>1  <code>path.normalize(p)</code>//规范化路径，注意’..’ 和 ‘.’。<br>2  <code>path.join([path1][, path2][, ...])</code>//用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\”。<br>3  <code>path.resolve([from ...], to)</code>//将 to 参数解析为绝对路径。<br>4  <code>path.isAbsolute(path)</code>//判断参数 path 是否是绝对路径。<br>5  <code>path.relative(from, to)</code>//用于将相对路径转为绝对路径。<br>6  <code>path.dirname(p)</code>//返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。<br>7  <code>path.basename(p[, ext])</code>//返回路径中的最后一部分。同 Unix 命令 bashname 类似。<br>8  <code>path.extname(p)</code>//返回路径中文件的后缀名，即路径中最后一个’.’之后的部分。如果一个路径中并不包含’.’或该路径只包含一个’.’ 且这个’.’为路径的第一个字符，则此命令返回空字符串。<br>9  <code>path.parse(pathString)</code>//返回路径字符串的对象。<br>10  <code>path.format(pathObject)</code>//从对象中返回路径字符串，和 path.parse 相反。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>1  <code>path.sep</code>//平台的文件路径分隔符，’\‘ 或 ‘/‘。<br>2  <code>path.delimiter</code>//平台的分隔符, ; or ‘:’.<br>3  <code>path.posix</code>//提供上述 path 的方法，不过总是以 posix 兼容的方式交互。<br>4  <code>path.win32</code>//提供上述 path 的方法，不过总是以 win32 兼容的方式交互。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="comment">// 格式化路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'normalization : '</span> + path.normalize(<span class="string">'/test/test1//2slashes/1slash/tab/..'</span>));</span><br><span class="line"><span class="comment">// 连接路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'joint path : '</span> + path.join(<span class="string">'/test'</span>, <span class="string">'test1'</span>, <span class="string">'2slashes/1slash'</span>, <span class="string">'tab'</span>, <span class="string">'..'</span>));</span><br><span class="line"><span class="comment">// 转换为绝对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'resolve : '</span> + path.resolve(<span class="string">'main.js'</span>));</span><br><span class="line"><span class="comment">// 路径中文件的后缀名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ext name : '</span> + path.extname(<span class="string">'main.js'</span>));</span><br></pre></td></tr></table></figure></p><p>代码执行结果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node main.js </span><br><span class="line">normalization : <span class="regexp">/test/</span>test1/<span class="number">2</span>slashes/<span class="number">1</span>slash</span><br><span class="line">joint path : <span class="regexp">/test/</span>test1/<span class="number">2</span>slashes/<span class="number">1</span>slash</span><br><span class="line">resolve : <span class="regexp">/web/</span>com/<span class="number">1427176256</span>_27423/main.js</span><br><span class="line">ext name : .js</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-Net-模块"><a href="#Node-js-Net-模块" class="headerlink" title="Node.js Net 模块"></a>Node.js Net 模块</h4><p>Node.js Net 模块提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法，我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>)</span><br></pre></td></tr></table></figure></p><h5 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>net.createServer([options][, connectionListener])</code>//创建一个 TCP 服务器。参数 connectionListener 自动给 ‘connection’ 事件创建监听器。<br>2  <code>net.connect(options[, connectionListener])</code>//返回一个新的 ‘net.Socket’，并连接到指定的地址和端口。当 socket 建立的时候，将会触发 ‘connect’ 事件。<br>3  <code>net.createConnection(options[, connectionListener])</code>//创建一个到端口 port 和 主机 host的 TCP 连接。 host 默认为 ‘localhost’。<br>4  <code>net.connect(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>5  <code>net.createConnection(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>6  <code>net.connect(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件上。返回 ‘net.Socket’。<br>7  <code>net.createConnection(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>8  <code>net.isIP(input)</code>//检测输入的是否为 IP 地址。 IPV4 返回 4， IPV6 返回 6，其他情况返回 0。<br>9  <code>net.isIPv4(input)</code>//如果输入的地址为 IPV4， 返回 true，否则返回 false。<br>10  <code>net.isIPv6(input)</code>//如果输入的地址为 IPV6， 返回 true，否则返回 false。</p><h4 id="net-Server"><a href="#net-Server" class="headerlink" title="net.Server"></a>net.Server</h4><p>net.Server通常用于创建一个 TCP 或本地服务器。</p><h5 id="net-Server方法："><a href="#net-Server方法：" class="headerlink" title="net.Server方法："></a>net.Server方法：</h5><p>1  <code>server.listen(port[, host][, backlog][, callback])</code>//监听指定端口 port 和 主机 host ac连接。 默认情况下 host 接受任何 IPv4 地址(INADDR_ANY)的直接连接。端口 port 为 0 时，则会分配一个随机端口。<br>2  <code>server.listen(path[, callback])</code>//通过指定 path 的连接，启动一个本地 socket 服务器。<br>3  <code>server.listen(handle[, callback])</code>//通过指定句柄连接。<br>4  <code>server.listen(options[, callback])</code>//options 的属性：端口 port, 主机 host, 和 backlog, 以及可选参数 callback 函数, 他们在一起调用server.listen(port, [host], [backlog], [callback])。还有，参数 path 可以用来指定 UNIX socket。<br>5  <code>server.close([callback])</code>//服务器停止接收新的连接，保持现有连接。这是异步函数，当所有连接结束的时候服务器会关闭，并会触发 ‘close’ 事件。<br>6  <code>server.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。<br>7  <code>server.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。<br>8  <code>server.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。<br>9  <code>server.getConnections(callback)</code>//异步获取服务器当前活跃连接的数量。当 socket 发送给子进程后才有效；回调函数有 2 个参数 err 和 count。</p><h5 id="net-Server事件："><a href="#net-Server事件：" class="headerlink" title="net.Server事件："></a>net.Server事件：</h5><p>1  <code>listening</code>//当服务器调用 server.listen 绑定后会触发。<br>2  <code>connection</code>//当新连接创建后会被触发。socket 是 net.Socket实例。<br>3  <code>close</code>//服务器关闭时会触发。注意，如果存在连接，这个事件不会被触发直到所有的连接关闭。<br>4  <code>error</code>//发生错误时触发。’close’ 事件将被下列事件直接调用。</p><h4 id="net-Socket"><a href="#net-Socket" class="headerlink" title="net.Socket"></a>net.Socket</h4><p>net.Socket 对象是 TCP 或 UNIX Socket 的抽象。net.Socket 实例实现了一个双工流接口。 他们可以在用户创建客户端(使用 connect())时使用, 或者由 Node 创建它们，并通过 connection 服务器事件传递给用户。</p><h5 id="net-Socket事件："><a href="#net-Socket事件：" class="headerlink" title="net.Socket事件："></a>net.Socket事件：</h5><p>1  <code>lookup</code>//在解析域名后，但在连接前，触发这个事件。对 UNIX sokcet 不适用。<br>2  <code>connect</code>//成功建立 socket 连接时触发。<br>3  <code>data</code>//当接收到数据时触发。<br>4  <code>end</code>//当 socket 另一端发送 FIN 包时，触发该事件。<br>5  <code>timeout</code>//当 socket 空闲超时时触发，仅是表明 socket 已经空闲。用户必须手动关闭连接。<br>6  <code>drain</code>//当写缓存为空得时候触发。可用来控制上传。<br>7  <code>error</code>//错误发生时触发。<br>8  <code>close</code>//当 socket 完全关闭时触发。参数 had_error 是布尔值，它表示是否因为传输错误导致 socket 关闭。</p><h5 id="net-Socket属性："><a href="#net-Socket属性：" class="headerlink" title="net.Socket属性："></a>net.Socket属性：</h5><p>1  <code>socket.bufferSize</code>//该属性显示了要写入缓冲区的字节数。<br>2  <code>socket.remoteAddress</code>//远程的 IP 地址字符串，例如：’74.125.127.100’ or ‘2001:4860:a005::68’。<br>3  <code>socket.remoteFamily</code>//远程IP协议族字符串，比如 ‘IPv4’ or ‘IPv6’。<br>4  <code>socket.remotePort</code>//远程端口，数字表示，例如：80 or 21。<br>5  <code>socket.localAddress</code>//网络连接绑定的本地接口 远程客户端正在连接的本地 IP 地址，字符串表示。例如，如果你在监听’0.0.0.0’而客户端连接在’192.168.1.1’，这个值就会是 ‘192.168.1.1’。<br>6  <code>socket.localPort</code>//本地端口地址，数字表示。例如：80 or 21。<br>7  <code>socket.bytesRead</code>//接收到得字节数。<br>8  <code>socket.bytesWritten</code>//发送的字节数。</p><h5 id="net-Socket方法："><a href="#net-Socket方法：" class="headerlink" title="net.Socket方法："></a>net.Socket方法：</h5><p>1  <code>new net.Socket([options])</code>//构造一个新的 socket 对象。<br>2  <code>socket.connect(port[, host][, connectListener])</code>//指定端口 port 和 主机 host，创建 socket 连接 。参数 host 默认为 localhost。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>3  <code>socket.connect(path[, connectListener])</code>//打开指定路径的 unix socket。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>4  <code>socket.setEncoding([encoding])</code>//设置编码<br>5  <code>socket.write(data[, encoding][, callback])</code>//在 socket 上发送数据。第二个参数指定了字符串的编码，默认是 UTF8 编码。<br>6  <code>socket.end([data][, encoding])</code>//半关闭 socket。例如，它发送一个 FIN 包。可能服务器仍在发送数据。<br>7  <code>socket.destroy()</code>//确保没有 I/O 活动在这个套接字上。只有在错误发生情况下才需要。（处理错误等等）。<br>8  <code>socket.pause()</code>//暂停读取数据。就是说，不会再触发 data 事件。对于控制上传非常有用。<br>9  <code>socket.resume()</code>//调用 pause() 后想恢复读取数据。<br>10  <code>socket.setTimeout(timeout[, callback])</code>//socket 闲置时间超过 timeout 毫秒后 ，将 socket 设置为超时。<br>11  <code>socket.setNoDelay([noDelay])</code>//禁用纳格（Nagle）算法。默认情况下 TCP 连接使用纳格算法，在发送前他们会缓冲数据。将 noDelay 设置为 true 将会在调用 socket.write() 时立即发送数据。noDelay 默认值为 true。<br>12  <code>socket.setKeepAlive([enable][, initialDelay])</code>//禁用/启用长连接功能，并在发送第一个在闲置 socket 上的长连接 probe 之前，可选地设定初始延时。默认为 false。 设定 initialDelay （毫秒），来设定收到的最后一个数据包和第一个长连接probe之间的延时。将 initialDelay 设为0，将会保留默认（或者之前）的值。默认值为0.<br>13  <code>socket.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。返回的对象有 3 个属性，比如{ port: 12346, family: ‘IPv4’, address: ‘127.0.0.1’ }。<br>14  <code>socket.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。如果服务器已被 unref，则再次调用 unref 并不会产生影响。<br>15  <code>socket.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。</p><h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><p>创建 server.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">connection</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</span><br><span class="line">  connection.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'客户端关闭连接'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.write(<span class="string">'Hello World!\r\n'</span>);</span><br><span class="line">  connection.pipe(connection);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is listening'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上服务端代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br><span class="line">server is listening # 服务已创建并监听8080端口</span><br></pre></td></tr></table></figure></p><p>新开一个窗口，创建client.js文件，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">var</span> client = net.connect(&#123;<span class="attr">port</span>: <span class="number">8080</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'连接服务器！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">  client.end();</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'断开与服务器的连接'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上客户端的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接服务器！</span><br><span class="line">Hello World!</span><br><span class="line">断开与服务器的连接</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-DNS-模块"><a href="#Node-js-DNS-模块" class="headerlink" title="Node.js DNS 模块"></a>Node.js DNS 模块</h4><p>Node.js DNS 模块用于解析域名。引入 DNS 模块语法格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">"dns"</span>)</span><br></pre></td></tr></table></figure></p><h5 id="方法：-2"><a href="#方法：-2" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>dns.lookup(hostname[, options], callback)</code>//将域名（比如 ‘runoob.com’）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6。<br>2  <code>dns.lookupService(address, port, callback)</code>//使用 getnameinfo 解析传入的地址和端口为域名和服务。<br>3  <code>dns.resolve(hostname[, rrtype], callback)</code>//将一个域名（如 ‘runoob.com’）解析为一个 rrtype 指定记录类型的数组。<br>4  <code>dns.resolve4(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询 IPv4 (A 记录）。 addresses IPv4 地址数组 (比如，[‘74.125.79.104’, ‘74.125.79.105’, ‘74.125.79.106’]）。<br>5  <code>dns.resolve6(hostname, callback)</code>//和 dns.resolve4() 类似， 仅能查询 IPv6( AAAA 查询）<br>6  <code>dns.resolveMx(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询邮件交换(MX 记录)。<br>7  <code>dns.resolveTxt(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行文本查询 (TXT 记录）。 addresses 是 2-d 文本记录数组。(比如，[ [‘v=spf1 ip4:0.0.0.0 ‘, ‘~all’ ] ]）。 每个子数组包含一条记录的 TXT 块。根据使用情况可以连接在一起，也可单独使用。<br>8  <code>dns.resolveSrv(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行服务记录查询 (SRV 记录）。 addresses 是 hostname可用的 SRV 记录数组。 SRV 记录属性有优先级（priority），权重（weight）, 端口（port）, 和名字（name） (比如，[{‘priority’: 10, ‘weight’: 5, ‘port’: 21223, ‘name’: ‘service.example.com’}, …]）。<br>9  <code>dns.resolveSoa(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询权威记录(SOA 记录）。<br>10  <code>dns.resolveNs(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行域名服务器记录查询(NS 记录）。 addresses 是域名服务器记录数组（hostname 可以使用） (比如, [‘ns1.example.com’, ‘ns2.example.com’]）。<br>11  <code>dns.resolveCname(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行别名记录查询 (CNAME记录)。addresses 是对 hostname 可用的别名记录数组 (比如，, [‘bar.example.com’]）。<br>12  <code>dns.reverse(ip, callback)</code>//反向解析 IP 地址，指向该 IP 地址的域名数组。<br>13  <code>dns.getServers()</code>//返回一个用于当前解析的 IP 地址数组的字符串。<br>14  <code>dns.setServers(servers)</code>//指定一组 IP 地址作为解析服务器。</p><h5 id="rrtypes"><a href="#rrtypes" class="headerlink" title="rrtypes"></a>rrtypes</h5><p>dns.resolve()方法中有效的rrtypes值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos; IPV4 地址, 默认</span><br><span class="line">&apos;AAAA&apos; IPV6 地址</span><br><span class="line">&apos;MX&apos; 邮件交换记录</span><br><span class="line">&apos;TXT&apos; text 记录</span><br><span class="line">&apos;SRV&apos; SRV 记录</span><br><span class="line">&apos;PTR&apos; 用来反向 IP 查找</span><br><span class="line">&apos;NS&apos; 域名服务器记录</span><br><span class="line">&apos;CNAME&apos; 别名记录</span><br><span class="line">&apos;SOA&apos; 授权记录的初始值</span><br></pre></td></tr></table></figure></p><h5 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h5><p>每次 DNS 查询都可能返回以下错误码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">dns.NODATA: 无数据响应。</span><br><span class="line">dns.FORMERR: 查询格式错误。</span><br><span class="line">dns.SERVFAIL: 常规失败。</span><br><span class="line">dns.NOTFOUND: 没有找到域名。</span><br><span class="line">dns.NOTIMP: 未实现请求的操作。</span><br><span class="line">dns.REFUSED: 拒绝查询。</span><br><span class="line">dns.BADQUERY: 查询格式错误。</span><br><span class="line">dns.BADNAME: 域名格式错误。</span><br><span class="line">dns.BADFAMILY: 地址协议不支持。</span><br><span class="line">dns.BADRESP: 回复格式错误。</span><br><span class="line">dns.CONNREFUSED: 无法连接到 DNS 服务器。</span><br><span class="line">dns.TIMEOUT: 连接 DNS 服务器超时。</span><br><span class="line">dns.EOF: 文件末端。</span><br><span class="line">dns.FILE: 读文件错误。</span><br><span class="line">dns.NOMEM: 内存溢出。</span><br><span class="line">dns.DESTRUCTION: 通道被摧毁。</span><br><span class="line">dns.BADSTR: 字符串格式错误。</span><br><span class="line">dns.BADFLAGS: 非法标识符。</span><br><span class="line">dns.NONAME: 所给主机不是数字。</span><br><span class="line">dns.BADHINTS: 非法HINTS标识符。</span><br><span class="line">dns.NOTINITIALIZED: c c-ares 库尚未初始化。</span><br><span class="line">dns.LOADIPHLPAPI: 加载 iphlpapi.dll 出错。</span><br><span class="line">dns.ADDRGETNETWORKPARAMS: 无法找到 GetNetworkParams 函数。</span><br><span class="line">dns.CANCELLED: 取消 DNS 查询。</span><br></pre></td></tr></table></figure></p><h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>);</span><br><span class="line">dns.lookup(<span class="string">'www.github.com'</span>,<span class="function"><span class="keyword">function</span> <span class="title">onLookup</span>(<span class="params">err, address, family</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ip 地址：'</span>, address);</span><br><span class="line">  dns.reverse(address, <span class="function"><span class="keyword">function</span>(<span class="params">err, hostname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'反向解析'</span> + address + <span class="string">':'</span> + <span class="built_in">JSON</span>.stringify(hostname));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码，结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">address: 192.30.252.130</span><br><span class="line">reverse for 192.30.252.130: [&quot;github.com&quot;]</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-Domain-模块"><a href="#Node-js-Domain-模块" class="headerlink" title="Node.js Domain 模块"></a>Node.js Domain 模块</h4><p>Node.js Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常。引入 Domain 模块 语法格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domain = <span class="built_in">require</span>(<span class="string">"domain"</span>)</span><br></pre></td></tr></table></figure></p><p>domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即推出，与process.on(‘uncaughtException’)不同。<br>Domain 模块可分为隐式绑定和显式绑定：<br>1、隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象<br>2、显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象</p><h5 id="方法：-3"><a href="#方法：-3" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>domain.run(function)</code>//在域的上下文运行提供的函数，隐式的绑定了所有的事件分发器，计时器和底层请求。<br>2  <code>domain.add(emitter)</code>//显式的增加事件<br>3  <code>domain.remove(emitter)</code>//删除事件。<br>4  <code>domain.bind(callback)</code>//返回的函数是一个对于所提供的回调函数的包装函数。当调用这个返回的函数被时，所有被抛出的错误都会被导向到这个域的 error 事件。<br>5  <code>domain.intercept(callback)</code>//和 domain.bind(callback) 类似。除了捕捉被抛出的错误外，它还会拦截 Error 对象作为参数传递到这个函数。<br>6  <code>domain.enter()</code>//进入一个异步调用的上下文，绑定到domain。<br>7  <code>domain.exit()</code>//退出当前的domain，切换到不同的链的异步调用的上下文中。对应domain.enter()。<br>8  <code>domain.dispose()</code>//释放一个domain对象，让node进程回收这部分资源。<br>9  <code>domain.create()</code>//返回一个domain对象。</p><h5 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h5><p>1  <code>domain.menbers</code>//已加入domain对象的域定时器和事件发射器的数组。</p><h6 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>).EventEmitter;</span><br><span class="line"><span class="keyword">var</span> domain = <span class="built_in">require</span>(<span class="string">"domain"</span>);</span><br><span class="line"><span class="keyword">var</span> emitter1 = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"><span class="comment">// 创建域</span></span><br><span class="line"><span class="keyword">var</span> domain1 = domain.create();</span><br><span class="line">domain1.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"domain1 处理这个错误 ("</span>+err.message+<span class="string">")"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 显式绑定</span></span><br><span class="line">domain1.add(emitter1);</span><br><span class="line">emitter1.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"监听器处理此错误 ("</span>+err.message+<span class="string">")"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">emitter1.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过监听器来处理'</span>));</span><br><span class="line">emitter1.removeAllListeners(<span class="string">'error'</span>);</span><br><span class="line">emitter1.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过 domain1 处理'</span>));</span><br><span class="line"><span class="keyword">var</span> domain2 = domain.create();</span><br><span class="line">domain2.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"domain2 处理这个错误 ("</span>+err.message+<span class="string">")"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 隐式绑定</span></span><br><span class="line">domain2.run(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> emitter2 = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">   emitter2.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过 domain2 处理'</span>));   </span><br><span class="line">&#125;);</span><br><span class="line">domain1.remove(emitter1);</span><br><span class="line">emitter1.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'转换为异常，系统将崩溃!'</span>));</span><br></pre></td></tr></table></figure></p><p>执行以上代码，结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">监听器处理此错误 (通过监听器来处理)</span><br><span class="line">domain1 处理这个错误 (通过 domain1 处理)</span><br><span class="line">domain2 处理这个错误 (通过 domain2 处理)</span><br><span class="line">events.js:72</span><br><span class="line">        throw er; // Unhandled &apos;error&apos; event</span><br><span class="line">              ^</span><br><span class="line">Error: 转换为异常，系统将崩溃!</span><br><span class="line">    at Object.&lt;anonymous&gt; (/www/node/main.js:40:24)</span><br><span class="line">    at Module._compile (module.js:456:26)</span><br><span class="line">    at Object.Module._extensions..js (module.js:474:10)</span><br><span class="line">    at Module.load (module.js:356:32)</span><br><span class="line">    at Function.Module._load (module.js:312:12)</span><br><span class="line">    at Function.Module.runMain (module.js:497:10)</span><br><span class="line">    at startup (node.js:119:16)</span><br><span class="line">    at node.js:929:3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;13、Node-js-工具模块&quot;&gt;&lt;a href=&quot;#13、Node-js-工具模块&quot; class=&quot;headerlink&quot; title=&quot;13、Node.js 工具模块&quot;&gt;&lt;/a&gt;13、Node.js 工具模块&lt;/h3&gt;&lt;h4 id=&quot;Node-js-OS-模块&quot;&gt;&lt;a href=&quot;#Node-js-OS-模块&quot; class=&quot;headerlink&quot; title=&quot;Node.js OS 模块&quot;&gt;&lt;/a&gt;Node.js OS 模块&lt;/h4&gt;&lt;p&gt;Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; os = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;方法：&quot;&gt;&lt;a href=&quot;#方法：&quot; class=&quot;headerlink&quot; title=&quot;方法：&quot;&gt;&lt;/a&gt;方法：&lt;/h5&gt;&lt;p&gt;1  &lt;code&gt;os.tmpdir()&lt;/code&gt;//返回操作系统的默认临时文件夹。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
</feed>
