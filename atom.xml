<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jer&#39;s Blog</title>
  
  <subtitle>The Harder You Work, The Luckier You Will Be.</subtitle>
  <link href="/JerBlog/atom.xml" rel="self"/>
  
  <link href="https://jermyo.github.io/JerBlog/"/>
  <updated>2018-10-13T15:56:54.848Z</updated>
  <id>https://jermyo.github.io/JerBlog/</id>
  
  <author>
    <name>Jer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo使用畅言评论系统</title>
    <link href="https://jermyo.github.io/JerBlog/2018/10/13/Hexo%E4%BD%BF%E7%94%A8%E7%95%85%E8%A8%80%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jermyo.github.io/JerBlog/2018/10/13/Hexo使用畅言评论系统/</id>
    <published>2018-10-13T15:25:33.000Z</published>
    <updated>2018-10-13T15:56:54.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>作为一个博客网站，怎么能没有跟各位互动呢，而github是一个纯静态的网页博客，无法设置评论，所以就只有用其它网站的插件了。听网上说之前githubpage很多人的评论系统是用的多说，不过最近多说网站关闭，导致很多人没有办法使用评论，而友言又因为是http协议不支持https的github博客,别担心，还有一个替代品，那就是畅言</p><h3 id="二、注册登录畅言"><a href="#二、注册登录畅言" class="headerlink" title="二、注册登录畅言"></a>二、注册登录畅言</h3><p>网上搜索畅言，可以直接传送门：<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">http://changyan.kuaizhan.com/</a><br><img src="https://img-blog.csdn.net/20181013234108260?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p>注册完成后还会有一大堆初始化，有个需要注意的地方，畅言是需要备案的，不备案会有15天的试用期，现在我们不管，点击下图标注的地方，后面我会介绍怎么通过备案。<br><img src="https://img-blog.csdn.net/20181013234342127?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>其它可以参考我写的。</p><h4 id="三、插入代码"><a href="#三、插入代码" class="headerlink" title="三、插入代码"></a>三、插入代码</h4><p>接下来就是代码的插入了，我用的是yelee的主题，所以就用这个作为例子。 </p><ol><li>在\themes\hexo-theme-yelee\layout_partial\comments文件夹下建立一个changyan.ejs的文件，文件里的代码参考在你畅言的管理页有。<br><img src="https://img-blog.csdn.net/20181013234434510?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></li></ol><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--PC版--&gt;</span><br><span class="line">&lt;div id=<span class="string">"SOHUCS"</span> &gt;&lt;/div&gt;</span><br><span class="line">&lt;script charset=<span class="string">"utf-8"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"https://changyan.sohu.com/upload/changyan.js"</span> &gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">window.changyan.api.config(&#123;</span><br><span class="line">appid: <span class="string">'***'</span>,</span><br><span class="line">conf: <span class="string">'***'</span><span class="string">'</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>这是我畅言网站建议我的代码<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=<span class="string">"changyan"</span> id=<span class="string">"comments"</span>&gt;    </span><br><span class="line">    &lt;div id=<span class="string">"SOHUCS"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script charset=<span class="string">"utf-8"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"https://changyan.sohu.com/upload/changyan.js"</span> &gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">         var loadComment = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                window.changyan.api.config(&#123;</span><br><span class="line">                appid: <span class="string">'**appid**'</span>,</span><br><span class="line">                conf: <span class="string">'**appkey**'</span></span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'click2show'</span>) %&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure></p><p>大家参考我写的代码和网站示例代码，这里其实大家可以参考你们主题里面其它评论里面的代码，根据主题不同可以做变动，大家有不懂的地方可以给我发邮箱，我一定及时给你们答复。 </p><ol start="2"><li>在article.ejs里面添加一句代码，下面高亮部分就是我加的代码<figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;article id=<span class="string">"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;"</span> class=<span class="string">"article article-type-&lt;%= post.layout %&gt;"</span> itemscope itemprop=<span class="string">"blogPost"</span>&gt;</span><br><span class="line">  &lt;%<span class="keyword">if</span>(post.noDate != <span class="string">"true"</span>)&#123;%&gt;</span><br><span class="line">    &lt;div class=<span class="string">"article-meta"</span>&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/date'</span>, &#123;class_name: <span class="string">'article-date'</span>, date_format: null&#125;) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;%&#125;%&gt;</span><br><span class="line">  &lt;div class=<span class="string">"article-inner"</span>&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.fancybox)&#123; %&gt;</span><br><span class="line">      &lt;input <span class="built_in">type</span>=<span class="string">"hidden"</span> class=<span class="string">"isFancy"</span> /&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (post.link || post.title)&#123; %&gt;</span><br><span class="line">      &lt;header class=<span class="string">"article-header"</span>&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'post/title'</span>, &#123;class_name: <span class="string">'article-title'</span>&#125;) %&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;% <span class="keyword">if</span> (!index)&#123; %&gt;</span><br><span class="line">      &lt;div class=<span class="string">"article-info article-info-post"</span>&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'post/category'</span>) %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'post/tag'</span>) %&gt;</span><br><span class="line">        &lt;div class=<span class="string">"clearfix"</span>&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;div class=<span class="string">"article-entry"</span> itemprop=<span class="string">"articleBody"</span>&gt;</span><br><span class="line">      &lt;% <span class="keyword">if</span> (index &amp;&amp; (post.description || post.excerpt))&#123; %&gt;</span><br><span class="line">          &lt;% <span class="keyword">if</span> (post.description)&#123; %&gt;</span><br><span class="line">              &lt;%- post.description %&gt;</span><br><span class="line">          &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">              &lt;%- post.excerpt %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">      &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span><br><span class="line">          &lt;% <span class="keyword">if</span> (is_page())&#123; %&gt;</span><br><span class="line">              &lt;%- partial(<span class="string">'_partial/page'</span>) %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">        &lt;%- post.content %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (index)&#123; %&gt;</span><br><span class="line">    &lt;div class=<span class="string">"article-info article-info-index"</span>&gt;</span><br><span class="line">      &lt;%<span class="keyword">if</span>(post.top)&#123;%&gt;</span><br><span class="line">        &lt;div class=<span class="string">"article-pop-out tagcloud"</span>&gt;</span><br><span class="line">          &lt;a class=<span class="string">""</span>&gt;置顶&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/category'</span>) %&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/tag'</span>) %&gt;</span><br><span class="line">      &lt;% <span class="keyword">if</span> (index &amp;&amp; (post.description || post.excerpt))&#123; %&gt;</span><br><span class="line">        &lt;p class=<span class="string">"article-more-link"</span>&gt;</span><br><span class="line">          &lt;a href=<span class="string">"&lt;%- url_for(post.path) %&gt;#more"</span>&gt;&lt;%= __(<span class="string">'index.more'</span>) %&gt; &gt;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      &lt;div class=<span class="string">"clearfix"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (!index)&#123; %&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'post/nav'</span>) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&lt;%- partial(<span class="string">'_partial/toc'</span>) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; theme.share.on &amp;&amp; (post.share != <span class="literal">false</span> || post.share))&#123; %&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'post/share'</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (theme.duoshuo.on) &#123; %&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'comments/duoshuo'</span>, &#123;</span><br><span class="line">          key: post.path,</span><br><span class="line">          title: post.title,</span><br><span class="line">          url: config.url+url_for(post.path),</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.youyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/youyan'</span>) %&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.disqus.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/disqus'</span>, &#123;</span><br><span class="line">            shortname: theme.disqus.shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.disqus_shortname) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/disqus'</span>, &#123;</span><br><span class="line">            shortname: config.disqus_shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      <span class="comment">#下面这四行代码就是我加的代码</span></span><br><span class="line">      &lt;%<span class="keyword">else</span> <span class="keyword">if</span> (theme.changyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/changyan'</span>, &#123;</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt; </span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;%- partial(<span class="string">'_partial/post-nav-button'</span>) %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (!index) &#123; %&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &lt;% <span class="keyword">if</span> (post.fancybox === <span class="literal">false</span>)&#123; %&gt;</span><br><span class="line">            yiliaConfig.fancybox = <span class="literal">false</span>;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ol><p>我就加了这几行代码</p><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="keyword">else</span> <span class="keyword">if</span> (theme.changyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(<span class="string">'comments/changyan'</span>, &#123;</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其中theme.changyan.on是在主题的_config.yml文件中配置，comments/changyan是添加文件的位置。</p><ol start="3"><li>在主题的config.yml 文件中加<figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">changyan:</span><br><span class="line"> on: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p>  当然，我们要把文件中的preload_comment: 配成ture。<br> <figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preload_comment: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>此时，我们对畅言插件的添加就完成了一大半了。如果你畅言中的地址写对，应该在页面可以看到效果了。<br><img src="https://img-blog.csdn.net/20181013235328194?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h4 id="四、畅言的备案"><a href="#四、畅言的备案" class="headerlink" title="四、畅言的备案"></a>四、畅言的备案</h4><p>前面也提到，畅言是需要备案的，但是如果我们搭建个个人网站还得去买域名买空间备案，那也太得不偿失了。下面我教大家用一个方法忽略备案。 </p><ol><li>我们需要一个已经备案的网站域名和备案号，这个大家可以去网上百度。可以找一个小众的网站域名，去备案查询网查询备案号。 </li><li>然后在畅言后台系统 系统设置-通用设置添加备案号和站点网址，注意站点网址一定要改。<br><img src="https://img-blog.csdn.net/20181013235418583?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plcm15bw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></li></ol><p>重点来了，备案地址没有写我们自己的网站域名我们的博客是用不了评论系统的，这个时候我们只需要把我们的域名地址写入域名白名单就行了。</p><p>做到这样，差不多就完成了。如果大家遇到什么问题，可以联系我的email，也可以在评论区写下你的评论，我会第一时间回复大家。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;作为一个博客网站，怎么能没有跟各位互动呢，而github是一个纯静态的网页博客，无法设置评论，所以就只有用其它网站的插件了。
      
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="畅言" scheme="https://jermyo.github.io/JerBlog/tags/%E7%95%85%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jermyo.github.io/JerBlog/2018/10/12/hello-world/"/>
    <id>https://jermyo.github.io/JerBlog/2018/10/12/hello-world/</id>
    <published>2018-10-12T06:53:23.641Z</published>
    <updated>2018-10-12T06:53:23.641Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BlueLake博客主题的详细配置</title>
    <link href="https://jermyo.github.io/JerBlog/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
    <id>https://jermyo.github.io/JerBlog/2016/12/29/BlueLake博客主题的详细配置/</id>
    <published>2016-12-29T03:25:33.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p><a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p><p>在阅读本文之前，假定您已经成功安装了<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><blockquote><p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong><code>根_config.yml</code></strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong><code>主题_config.yml</code></strong>。</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>您可以直接到<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p><h4 id="1-1-安装主题"><a href="#1-1-安装主题" class="headerlink" title="1.1 安装主题"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</span><br></pre></td></tr></table></figure></p><h4 id="1-2-安装主题渲染器"><a href="#1-2-安装主题渲染器" class="headerlink" title="1.2 安装主题渲染器"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-jade@0.3.0 --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></p><h4 id="1-3-启用主题"><a href="#1-3-启用主题" class="headerlink" title="1.3 启用主题"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">BlueLake</span></span><br></pre></td></tr></table></figure></p><h4 id="1-4-验证"><a href="#1-4-验证" class="headerlink" title="1.4 验证"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><h4 id="1-5-更新主题"><a href="#1-5-更新主题" class="headerlink" title="1.5 更新主题"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/BlueLake</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="2-1-配置网站头部显示文字"><a href="#2-1-配置网站头部显示文字" class="headerlink" title="2.1 配置网站头部显示文字"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> </span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="attr">author:</span></span><br></pre></td></tr></table></figure></p><p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p><h4 id="2-2-设置语言"><a href="#2-2-设置语言" class="headerlink" title="2.2 设置语言"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure></p><h4 id="2-3-设置菜单"><a href="#2-3-设置菜单" class="headerlink" title="2.3 设置菜单"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">home</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment"># - page: about</span></span><br><span class="line">  <span class="comment">#   directory: about/</span></span><br><span class="line">  <span class="comment">#   icon: fa-user</span></span><br><span class="line"><span class="attr">  - page:</span> <span class="string">rss</span></span><br><span class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure></p><p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># About page </span></span><br><span class="line"><span class="attr">about:</span></span><br><span class="line"><span class="attr">  email:</span> <span class="comment">## 个人邮箱 </span></span><br><span class="line"><span class="attr">  weibo_url:</span> <span class="comment">## 微博主页链接地址</span></span><br><span class="line"><span class="attr">  github_url:</span> <span class="comment">## github主页链接地址</span></span><br></pre></td></tr></table></figure></p><h5 id="2-3-1-添加about页"><a href="#2-3-1-添加about页" class="headerlink" title="2.3.1 添加about页"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">'about'</span></span><br></pre></td></tr></table></figure></p><p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># About page </span></span><br><span class="line"><span class="attr">about:</span></span><br><span class="line"><span class="attr">  photo_url:</span> <span class="comment">## 头像的链接地址</span></span><br><span class="line"><span class="attr">  email:</span> <span class="comment">## 个人邮箱 </span></span><br><span class="line"><span class="attr">  weibo_url:</span> <span class="comment">## 微博主页链接地址</span></span><br><span class="line"><span class="attr">  weibo_name:</span> <span class="comment">## 微博用户名 </span></span><br><span class="line"><span class="attr">  github_url:</span> <span class="comment">## github主页链接地址</span></span><br><span class="line"><span class="attr">  github_name:</span> <span class="comment">## github用户名</span></span><br></pre></td></tr></table></figure></p><p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p><h5 id="2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure></p><p>添加<code>主题_config.yml</code>配置：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="string">hexo-generator-feed</span></span><br><span class="line">  <span class="string">hexo-generator-sitemap</span></span><br><span class="line">  <span class="string">hexo-generator-baidu-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure></p><h4 id="2-4-添加本地搜索"><a href="#2-4-添加本地搜索" class="headerlink" title="2.4 添加本地搜索"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>来创建JSON数据文件：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure></p><p>然后在<code>根_config.yml</code>添加配置：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>最后在<code>主题_config.yml</code>添加配置：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="2-5-修改站点图标"><a href="#2-5-修改站点图标" class="headerlink" title="2.5 修改站点图标"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p><h4 id="2-6-添加站点关键字"><a href="#2-6-添加站点关键字" class="headerlink" title="2.6 添加站点关键字"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">网站简要描述,如：Charles·Zheng's</span> <span class="string">blog.</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">网站关键字,</span> <span class="string">key,</span> <span class="string">key1,</span> <span class="string">key2,</span> <span class="string">key3</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Charles</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure></p><h4 id="2-7-其他配置"><a href="#2-7-其他配置" class="headerlink" title="2.7 其他配置"></a>2.7 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p><ol><li><code>show_category_count</code>——是否显示分类下的文章数。</li><li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">show_category_count:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">widgets_on_small_screens:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-集成第三方服务"><a href="#3-集成第三方服务" class="headerlink" title="3.集成第三方服务"></a>3.集成第三方服务</h3><h4 id="3-1-添加评论"><a href="#3-1-添加评论" class="headerlink" title="3.1 添加评论"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href="http://duoshuo.com" target="_blank" rel="noopener">多说评论</a>、<a href="https://disqus.com" target="_blank" rel="noopener">Disqus评论</a>、<a href="https://livere.com" target="_blank" rel="noopener">来必力评论</a>、<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>、<a href="https://gentie.163.com/info.html" target="_blank" rel="noopener">网易云跟帖评论</a>、<a href="http://changyan.kuaizhan.com" target="_blank" rel="noopener">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前<code>网易云跟帖</code>和<code>畅言</code>还不错。</p><ol><li>注册并获得代码。<ul><li>若使用<a href="http://duoshuo.com" target="_blank" rel="noopener">多说评论</a>，注册多说后获得short_name。</li><li>若使用<a href="https://disqus.com" target="_blank" rel="noopener">Disqus评论</a>，注册Disqus后获得short_name。</li><li>若使用<a href="https://livere.com" target="_blank" rel="noopener">来必力评论</a>，注册来必力,获得data-uid。</li><li>若使用<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>，注册友言,获得uid。</li><li>若使用<a href="https://gentie.163.com/info.html" target="_blank" rel="noopener">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li><li>若使用<a href="http://changyan.kuaizhan.com" target="_blank" rel="noopener">畅言评论</a>，注册畅言，获得appid，appkey。</li></ul></li><li>配置<code>主题_config.yml</code>：<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Cmments</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line"><span class="attr">  duoshuo:</span> <span class="comment">## duoshuo_shortname</span></span><br><span class="line"><span class="attr">  disqus:</span> <span class="comment">## disqus_shortname</span></span><br><span class="line"><span class="attr">  livere:</span> <span class="comment">## 来必力(data-uid)</span></span><br><span class="line"><span class="attr">  uyan:</span> <span class="comment">## 友言(uid)</span></span><br><span class="line"><span class="attr">  cloudTie:</span> <span class="comment">## 网易云跟帖(productKey)</span></span><br><span class="line"><span class="attr">  changyan:</span> <span class="comment">## 畅言需在下方配置两个参数，此处不填。</span></span><br><span class="line"><span class="attr">    appid:</span> <span class="comment">## 畅言(appid)</span></span><br><span class="line"><span class="attr">    appkey:</span> <span class="comment">##畅言(appkey)</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-百度统计"><a href="#3-2-百度统计" class="headerlink" title="3.2 百度统计"></a>3.2 百度统计</h4><ol><li>登录<a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>，定位到站点的代码获取页面。</li><li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li><li>配置<code>主题_config.yml</code>:<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidu_analytics:</span> <span class="number">8006843039519956000</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p></blockquote><h4 id="3-3-卜算子阅读次数统计"><a href="#3-3-卜算子阅读次数统计" class="headerlink" title="3.3 卜算子阅读次数统计"></a>3.3 卜算子阅读次数统计</h4><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="noopener">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p><h4 id="3-4-微博秀"><a href="#3-4-微博秀" class="headerlink" title="3.4 微博秀"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href="http://open.weibo.com/" target="_blank" rel="noopener">微博开放平台</a>获取您自己的微博秀代码来替换。</p><ol><li>登录<a href="http://open.weibo.com/" target="_blank" rel="noopener">微博开放平台</a>，选择微博秀。</li><li>为了与主题风格统一，作如下配置<ul><li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li><li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li><li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li></ul></li><li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code><figure class="highlight stylus"><figcaption><span>weibo.jade</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade" target="_blank" rel="noopener">layout/_widget/weibo.jade</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line marked">.widget</span><br><span class="line">  .widget-title</span><br><span class="line">    i(class=<span class="string">'fa fa-weibo'</span>)= <span class="string">' '</span> + __(<span class="string">'新浪微博'</span>)</span><br><span class="line">  iframe(<span class="attribute">width</span>=<span class="string">"100%"</span>,height=<span class="string">"400"</span>,class=<span class="string">"share_self"</span>,frameborder=<span class="string">"0"</span>,scrolling=<span class="string">"no"</span>,src=<span class="string">"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1"</span>)</span><br></pre></td></tr></table></figure>这只是为了和主题的风格统一，当然您也可以自由随意发挥。<blockquote><p>注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/chaooo/hexo-theme-BlueLake&quot; target
      
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="BlueLake" scheme="https://jermyo.github.io/JerBlog/tags/BlueLake/"/>
    
  </entry>
  
  <entry>
    <title>自定义HEXO站内搜索Javascript+json</title>
    <link href="https://jermyo.github.io/JerBlog/2016/11/09/%E8%87%AA%E5%AE%9A%E4%B9%89HEXO%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2Javascript-json/"/>
    <id>https://jermyo.github.io/JerBlog/2016/11/09/自定义HEXO站内搜索Javascript-json/</id>
    <published>2016-11-09T01:24:56.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>目前很多<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>博客都用的Swiftype和Algolia等第三方搜索服务。其实针对无数据库的情况下，Hexo本身也提供了两个插件来生成数据文件作为数据源：<br>    <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>生成<code>xml</code>格式的数据文件。<br>    <a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a> 生成<code>json</code>格式的数据文件。<br>今天的主角是<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>，对于 Javascript语言来说还是解析 json 更方便，如果需要用 xml 做数据文件也可以使用已有的atom.xml。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure><p>然后执行<code>hexo generate</code>时会自动生成<code>content.json</code>文件，若使用默认设置，生成的数据结构如下<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">meta: &#123;</span><br><span class="line">    title: hexo.config.title,</span><br><span class="line">    subtitle: hexo.config.subtitle,</span><br><span class="line">    description: hexo.config.description,</span><br><span class="line">    author: hexo.config.author,</span><br><span class="line">    url: hexo.config.url</span><br><span class="line">&#125;,</span><br><span class="line">pages: [&#123; //-&gt; all pages</span><br><span class="line">    title: page.title,</span><br><span class="line">    slug: page.slug,</span><br><span class="line">    date: page.date,</span><br><span class="line">    updated: page.updated,</span><br><span class="line">    comments: page.comments,</span><br><span class="line">    permalink: page.permalink,</span><br><span class="line">    path: page.path,</span><br><span class="line">    excerpt: page.excerpt, //-&gt; only text ;)</span><br><span class="line">    keywords: null //-&gt; it needs settings</span><br><span class="line">    text: page.content, //-&gt; only text minified ;)</span><br><span class="line">    raw: page.raw, //-&gt; original MD content</span><br><span class="line">    content: page.content //-&gt; final HTML content</span><br><span class="line">&#125;],</span><br><span class="line">posts: [&#123; //-&gt; only published posts</span><br><span class="line">    title: post.title,</span><br><span class="line">    slug: post.slug,</span><br><span class="line">    date: post.date,</span><br><span class="line">    updated: post.updated,</span><br><span class="line">    comments: post.comments,</span><br><span class="line">    permalink: post.permalink,</span><br><span class="line">    path: post.path,</span><br><span class="line">    excerpt: post.excerpt, //-&gt; only text ;)</span><br><span class="line">    keywords: null //-&gt; it needs settings</span><br><span class="line">    text: post.content, //-&gt; only text minified ;)</span><br><span class="line">    raw: post.raw, //-&gt; original MD content</span><br><span class="line">    content: post.content, //-&gt; final HTML content</span><br><span class="line">    categories: [&#123;</span><br><span class="line">        name: category.name,</span><br><span class="line">        slug: category.slug,</span><br><span class="line">        permalink: category.permalink</span><br><span class="line">    &#125;],</span><br><span class="line">    tags: [&#123;</span><br><span class="line">        name: tag.name,</span><br><span class="line">        slug: tag.slug,</span><br><span class="line">        permalink: tag.permalink</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>hexo-generator-json-content默认生成的json数据内容非常全，默认配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  keywords:</span> <span class="literal">false</span> <span class="comment"># (english, spanish, polish, german, french, italian, dutch, russian, portuguese, swedish)</span></span><br><span class="line"><span class="attr">  pages:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    keywords:</span> <span class="literal">true</span> <span class="comment"># but only if root keywords option language was set</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    keywords:</span> <span class="literal">true</span> <span class="comment"># but only if root keywords option language was set</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>因为默认生成了很多我们不需要的数据，所以我们要对其进行配置让它只生成我们想要的内容,在<code>hexo/_config.yml</code>中加入：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span> <span class="comment">#文章标题</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span> <span class="comment">#发表日期</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span> <span class="comment">#路径</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span> <span class="comment">#文本字段</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span> <span class="comment">#标签</span></span><br></pre></td></tr></table></figure></p><p>这样，就只生成每篇文章的标题，日期，路径，标签和文本字段，同时也减小了文件的大小。<br>例如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"自定义HEXO站内搜索Javascript+json"</span>,</span><br><span class="line">  <span class="attr">"date"</span>: <span class="string">"2016-11-09T01:24:56.000Z"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"2016/11/09/自定义HEXO站内搜索Javascript-json.html"</span>,</span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"目前很多Hexo博客都用的Swiftype和Algolia等第三......#这里显示整篇文章的内容"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>: [&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"javascript,hexo"</span>,</span><br><span class="line">    <span class="attr">"slug"</span>: <span class="string">"javascript-hexo"</span>,</span><br><span class="line">    <span class="attr">"permalink"</span>: <span class="string">"http://chaoo.oschina.io/tags/javascript-hexo/"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-JavaScript实现代码"><a href="#3-JavaScript实现代码" class="headerlink" title="3.JavaScript实现代码"></a>3.JavaScript实现代码</h3><p>接下来就是用JS实现查询方法并把结果渲染到页面。</p><h4 id="3-1-xhr加载数据"><a href="#3-1-xhr加载数据" class="headerlink" title="3.1 xhr加载数据"></a>3.1 xhr加载数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchData;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadData</span>(<span class="params">success</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!searchData) &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'/content.json'</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status &gt;= <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.response || <span class="keyword">this</span>.responseText);</span><br><span class="line">                searchData = res <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? res : res.posts;</span><br><span class="line">                success(searchData);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="keyword">this</span>.statusText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="keyword">this</span>.statusText);</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        success(searchData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-匹配文章内容返回结果"><a href="#3-2-匹配文章内容返回结果" class="headerlink" title="3.2 匹配文章内容返回结果"></a>3.2 匹配文章内容返回结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matcher</span>(<span class="params">post, regExp</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 匹配优先级：title &gt; tags &gt; text</span></span><br><span class="line">    <span class="keyword">return</span> regtest(post.title, regExp) || post.tags.some(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> regtest(tag.name, regExp);</span><br><span class="line">    &#125;) || regtest(post.text, regExp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">regtest</span>(<span class="params">raw, regExp</span>) </span>&#123;</span><br><span class="line">    regExp.lastIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> regExp.test(raw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-结果渲染到页面"><a href="#3-3-结果渲染到页面" class="headerlink" title="3.3 结果渲染到页面"></a>3.3 结果渲染到页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (data.length) &#123;</span><br><span class="line">        html = data.map(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tpl(searchTpl, &#123;</span><br><span class="line">                title: post.title,</span><br><span class="line">                path: post.path,</span><br><span class="line">                date: <span class="keyword">new</span> <span class="built_in">Date</span>(post.date).toLocaleDateString(),</span><br><span class="line">                tags: post.tags.map(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'&lt;span&gt;'</span> + tag.name + <span class="string">'&lt;/span&gt;'</span>;</span><br><span class="line">                &#125;).join(<span class="string">''</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;).join(<span class="string">''</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-查询匹配"><a href="#3-3-查询匹配" class="headerlink" title="3.3 查询匹配"></a>3.3 查询匹配</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 关键字 =&gt; 正则，空格隔开的看作多个关键字</span></span><br><span class="line">    <span class="comment">// a b c =&gt; /a|b|c/gmi</span></span><br><span class="line">    <span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key.replace(<span class="regexp">/[ ]/g</span>, <span class="string">'|'</span>), <span class="string">'gmi'</span>);</span><br><span class="line">    loadData(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> matcher(post, regExp);</span><br><span class="line">        &#125;);</span><br><span class="line">        render(result);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;目前很多&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="javascript" scheme="https://jermyo.github.io/JerBlog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>github博客迁移</title>
    <link href="https://jermyo.github.io/JerBlog/2016/08/17/github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>https://jermyo.github.io/JerBlog/2016/08/17/github博客迁移/</id>
    <published>2016-08-17T03:14:25.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。</p><h3 id="1-迁移代码"><a href="#1-迁移代码" class="headerlink" title="1.迁移代码"></a>1.迁移代码</h3><p>把代码从<a href="https://github.com/" target="_blank" rel="noopener">github</a>迁移至<a href="http://git.oschina.net/" target="_blank" rel="noopener">码云（oschina）</a>。<br>首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。<br>码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。<br><a id="more"></a><br>在GitHub上，可以新建一个以<code>用户名</code>命名的仓库，将网站代码放在master分支下，即可自动部署到：<code>http://用户名.github.io/</code>，若其他命名的仓库则新建一个<code>gh-pages</code>的分支，网站代码放在<code>gh-pages</code>下，，即可自动部署到：<code>http://用户名.github.io/仓库名/</code>。<br>对于码云，基本和GitHub一样，不过还需要手动开启Pages服务，而且其他仓库虽然默认在<code>osc-pages</code>下，但可自定到自己喜欢的分支上。<br>代码迁移步骤如下：</p><h5 id="1-1-新建码云项目"><a href="#1-1-新建码云项目" class="headerlink" title="1.1 新建码云项目"></a>1.1 新建码云项目</h5><p>以我自己的博客为例，项目地址：<a href="https://github.com/chaooo/chaooo.github.io.git" target="_blank" rel="noopener">https://github.com/chaooo/chaooo.github.io.git</a>。<br>它在Github上的Pages地址是：<a href="http://chaooo.github.io" target="_blank" rel="noopener">http://chaooo.github.io</a><br>如果想把它转移到码云Pages，只需要登录你的码云账户，点击右上角的<code>+</code>号，选择新建项目:<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina.jpg" alt="博客迁移至码云1"></p><h5 id="1-2-开启pages服务"><a href="#1-2-开启pages服务" class="headerlink" title="1.2 开启pages服务"></a>1.2 开启pages服务</h5><p>然后点击创建，项目会在后台自动导入，导入成功后，点击菜单栏的<code>Pages</code>,码云默认的Pages服务分支是osc-pages，但是你也已选择自己静态页面所在的分支，这里我的博客项目的静态页面分支是master，选择master并点击启动服务。<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina1.jpg" alt="博客迁移至码云2"><br>至此，博客已经部署成功，访问提供的地址：<a href="http://chaoo.oschina.io" target="_blank" rel="noopener">http://chaoo.oschina.io</a>即可查看到我的博客。<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina2.jpg" alt="博客迁移至码云3"></p><h3 id="2-修改hexo配置"><a href="#2-修改hexo配置" class="headerlink" title="2.修改hexo配置"></a>2.修改hexo配置</h3><p>打开博客根目录的_config.yml文件，找到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://chaooo.github.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/chaooo/chaooo.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>修改为(根据自己的仓库地址修改)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="comment">#url: http://chaooo.github.io</span></span><br><span class="line">url: http://chaoo.oschina.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"><span class="comment">#- type: git</span></span><br><span class="line"><span class="comment">#  repository: https://github.com/chaooo/chaooo.github.io.git</span></span><br><span class="line"><span class="comment">#  branch: master</span></span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://git.oschina.net/chaoo/chaoo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>然后执行下面命令，以重新生成<code>baidusitemap.xml</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure></p><h4 id="3-验证网站"><a href="#3-验证网站" class="headerlink" title="3.验证网站"></a>3.验证网站</h4><p>百度搜索引擎入口：<br><a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="noopener">百度搜索引擎入口</a>。<br>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>public/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaoo.oschina.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p><h3 id="4-sitemap提交"><a href="#4-sitemap提交" class="headerlink" title="4.sitemap提交"></a>4.sitemap提交</h3><p>直接点击<code>sitemap</code>填写数据文件地址：<code>http://chaoo.oschina.io/baidusitemap.xml</code>,输入验证码提交。</p><h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\themes\landscape\layout\_partial\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就可以等待百度收录了。</p><p><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina3.jpg" alt="博客迁移至码云4"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。&lt;/p&gt;
&lt;h3 id=&quot;1-迁移代码&quot;&gt;&lt;a href=&quot;#1-迁移代码&quot; class=&quot;headerlink&quot; title=&quot;1.迁移代码&quot;&gt;&lt;/a&gt;1.迁移代码&lt;/h3&gt;&lt;p&gt;把代码从&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;迁移至&lt;a href=&quot;http://git.oschina.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;码云（oschina）&lt;/a&gt;。&lt;br&gt;首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。&lt;br&gt;码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
      <category term="github" scheme="https://jermyo.github.io/JerBlog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>好用的Web包管理器-Bower</title>
    <link href="https://jermyo.github.io/JerBlog/2016/08/12/Web%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8-Bower/"/>
    <id>https://jermyo.github.io/JerBlog/2016/08/12/Web包管理器-Bower/</id>
    <published>2016-08-12T07:32:41.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。<br><a id="more"></a> </p><h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>在安装<a href="https://bower.io/" target="_blank" rel="noopener">bower</a>之前，必须确认你已经安装了<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>。</p><h3 id="1-安装Bower"><a href="#1-安装Bower" class="headerlink" title="1.安装Bower"></a>1.安装Bower</h3><p>使用npm，打开终端，键入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g bower   <span class="comment">#全局安装bower</span></span><br></pre></td></tr></table></figure></p><p>移步<a href="https://github.com/bower/bower/wiki/Troubleshooting" target="_blank" rel="noopener">这里</a>查看不同平台上安装的问题。</p><h3 id="2-使用Bower"><a href="#2-使用Bower" class="headerlink" title="2.使用Bower"></a>2.使用Bower</h3><p>使用help命令查看帮助。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">bower <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">    bower &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;] [&lt;options&gt;]</span><br><span class="line">Commands:</span><br><span class="line">    cache                   Manage bower cache</span><br><span class="line">    <span class="built_in">help</span>                    Display <span class="built_in">help</span> information about Bower</span><br><span class="line">    home                    Opens a package homepage into your favorite browser</span><br><span class="line">    info                    Info of a particular package</span><br><span class="line">    init                    Interactively create a bower.json file</span><br><span class="line">    install                 Install a package locally</span><br><span class="line">    link                    Symlink a package folder</span><br><span class="line">    list                    List <span class="built_in">local</span> packages - and possible updates</span><br><span class="line">    login                   Authenticate with GitHub and store credentials</span><br><span class="line">    lookup                  Look up a package URL by name</span><br><span class="line">    prune                   Removes <span class="built_in">local</span> extraneous packages</span><br><span class="line">    register                Register a package</span><br><span class="line">    search                  Search <span class="keyword">for</span> a package by name</span><br><span class="line">    update                  Update a <span class="built_in">local</span> package</span><br><span class="line">    uninstall               Remove a <span class="built_in">local</span> package</span><br><span class="line">    unregister              Remove a package from the registry</span><br><span class="line">    version                 Bump a package version</span><br><span class="line">Options:</span><br><span class="line">    -f, --force             Makes various commands more forceful</span><br><span class="line">    -j, --json              Output consumable JSON</span><br><span class="line">    -l, --loglevel          What level of logs to report</span><br><span class="line">    -o, --offline           Do not hit the network</span><br><span class="line">    -q, --quiet             Only output important information</span><br><span class="line">    -s, --silent            Do not output anything, besides errors</span><br><span class="line">    -V, --verbose           Makes output more verbose</span><br><span class="line">    --allow-root            Allows running commands as root</span><br><span class="line">    -v, --version           Output Bower version</span><br><span class="line">    --no-color              Disable colors</span><br><span class="line">See <span class="string">'bower help &lt;command&gt;'</span> <span class="keyword">for</span> more information on a specific <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure></p><h3 id="3-安装包到本地"><a href="#3-安装包到本地" class="headerlink" title="3.安装包到本地"></a>3.安装包到本地</h3><p>通过命令bower install安装软件包默认到bower_components/目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install &lt;package&gt;    <span class="comment">#package为包名</span></span><br></pre></td></tr></table></figure></p><p>想要下载的包可以是GitHub上的短链接（如jquery/jquery）、.git 、一个URL或者其它.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bower install  <span class="comment"># 通过 bower.json 文件安装</span></span><br><span class="line">bower install jquery   <span class="comment"># 通过在github上注册的包名安装</span></span><br><span class="line">bower install desandro/masonry   <span class="comment"># GitHub短链接</span></span><br><span class="line">bower install git://github.com/user/package.git   <span class="comment"># Github上的 .git</span></span><br><span class="line">bower install http://example.com/script.js   <span class="comment"># URL</span></span><br></pre></td></tr></table></figure></p><p>安装选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-F, --force-latest: Force latest version on conflict</span><br><span class="line">-p, --production: Do not install project devDependencies</span><br><span class="line">-S, --save: Save installed packages into the project’s bower.json dependencies</span><br><span class="line">-D, --save-dev: Save installed packages into the project’s bower.json devDependencies</span><br><span class="line">-E, --save-exact: Configure installed packages with an exact version rather than semver</span><br></pre></td></tr></table></figure></p><h3 id="4-用bower-json文件来管理依赖"><a href="#4-用bower-json文件来管理依赖" class="headerlink" title="4.用bower.json文件来管理依赖"></a>4.用bower.json文件来管理依赖</h3><p>发布项目的时候没有必要把所有依赖的库发布上去，只需在根目录生成一个bower.json文件即可，别人使用时在根目录执行<code>bower install</code>就可根据bower.json来安装依赖的包。<br>在项目中执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower init</span><br></pre></td></tr></table></figure></p><p>会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置.<br>如果想保存依赖信息(dependencies)到你的bower.json文件，安装包时，命令后面跟上<code>--save</code>即可。</p><h3 id="5-使用下载好的包"><a href="#5-使用下载好的包" class="headerlink" title="5.使用下载好的包"></a>5.使用下载好的包</h3><p>对于已经下载下来的包，默认在当前目录的bower_components文件夹。你可以直接在项目里引用。例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"bower_components/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bower_components/jquery/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="6-更新包"><a href="#6-更新包" class="headerlink" title="6.更新包"></a>6.更新包</h3><p>若下载的包升级了，只需执行<code>update</code>命令即可更新，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower update jquery</span><br></pre></td></tr></table></figure></p><p>这样就可以自动升级到最新版的jquery了。<br>更新选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-F, --force-latest: Force latest version on conflict</span><br><span class="line">-p, --production: Do not install project devDependencies</span><br><span class="line">-S, --save: Update dependencies <span class="keyword">in</span> bower.json</span><br><span class="line">-D, --save-dev: Update devDependencies <span class="keyword">in</span> bower.json</span><br></pre></td></tr></table></figure></p><h3 id="7-搜索包"><a href="#7-搜索包" class="headerlink" title="7.搜索包"></a>7.搜索包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bower search               <span class="comment">#搜索所有包</span></span><br><span class="line">bower search &lt;packageName&gt; <span class="comment">#搜索指定名称的包</span></span><br></pre></td></tr></table></figure><p>或者可以在<a href="https://bower.io/search/" target="_blank" rel="noopener">这里:https://bower.io/search/</a>搜索喜欢的包.</p><h3 id="8-卸载包"><a href="#8-卸载包" class="headerlink" title="8.卸载包"></a>8.卸载包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower uninstall &lt;name&gt; [&lt;name&gt; ..] [&lt;options&gt;]</span><br></pre></td></tr></table></figure><p>卸载选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-S, --save: Remove uninstalled packages from the project’s bower.json dependencies</span><br><span class="line">-D, --save-dev: Remove uninstalled packages from the project’s bower.json devDependencies</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bower是twitter推出的客户端包管理工具，用于命令行操作包的搜索、下载、更新、卸载(如jQuery、Bootstrap、JavaScript、HTML、CSS之类的网络资源)。Bower对包结构没有强制规范，可以很方便获取各种Web模块文件，但bower本身不存储模块文件和模块版本信息，模块发布者通过register方式将模块可访问的公开的git地址记录在bower的数据库中，而所有版本都是通过代码库的tag来决定的。&lt;br&gt;
    
    </summary>
    
      <category term="前端工具" scheme="https://jermyo.github.io/JerBlog/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="bower" scheme="https://jermyo.github.io/JerBlog/tags/bower/"/>
    
  </entry>
  
  <entry>
    <title>Node.js RESTful API(16)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/30/Node.js%20RESTful%20API/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/30/Node.js RESTful API/</id>
    <published>2016-06-30T03:38:20.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="16、Node-js-RESTful-API"><a href="#16、Node-js-RESTful-API" class="headerlink" title="16、Node.js RESTful API */"></a>16、Node.js RESTful API */</h3><p>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。<br><a id="more"></a></p><h4 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h4><p>以下为 REST 基本架构的四个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET - 用于获取数据。</span><br><span class="line">PUT - 用于添加数据。</span><br><span class="line">DELETE - 用于删除数据。</span><br><span class="line">POST - 用于更新或添加数据。</span><br></pre></td></tr></table></figure></p><h4 id="创建-RESTful"><a href="#创建-RESTful" class="headerlink" title="创建 RESTful"></a>创建 RESTful</h4><p>首先，创建一个 json 数据资源文件 users.json，内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"user1"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"mahesh"</span>,</span><br><span class="line">    <span class="attr">"password"</span> : <span class="string">"password1"</span>,</span><br><span class="line">    <span class="attr">"profession"</span> : <span class="string">"teacher"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"user2"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"suresh"</span>,</span><br><span class="line">    <span class="attr">"password"</span> : <span class="string">"password2"</span>,</span><br><span class="line">    <span class="attr">"profession"</span> : <span class="string">"librarian"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"user3"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"ramesh"</span>,</span><br><span class="line">    <span class="attr">"password"</span> : <span class="string">"password3"</span>,</span><br><span class="line">    <span class="attr">"profession"</span> : <span class="string">"clerk"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">3</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于以上数据，我们创建以下 RESTful API：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">序号  URI       HTTP方法  发送内容   结果</span><br><span class="line">  1   listUsers   GET     空          显示所有用户列表</span><br><span class="line">  2   addUser   POST      JSON 字符串   添加新用户</span><br><span class="line">  3   deleteUser  DELETE    JSON 字符串   删除用户</span><br><span class="line">  4   :id       GET     空          显示用户详细信息</span><br></pre></td></tr></table></figure></p><h4 id="获取用户列表：listUsers"><a href="#获取用户列表：listUsers" class="headerlink" title="获取用户列表：listUsers"></a>获取用户列表：listUsers</h4><p>创建 RESTful API listUsers，用于读取用户的信息列表， server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">app.get(<span class="string">'./listUsers'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/listUsers，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081/listUsers，结果如下所示：</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"user1"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"mahesh"</span>,</span><br><span class="line">      <span class="attr">"password"</span> : <span class="string">"password1"</span>,</span><br><span class="line">      <span class="attr">"profession"</span> : <span class="string">"teacher"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"user2"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"suresh"</span>,</span><br><span class="line">      <span class="attr">"password"</span> : <span class="string">"password2"</span>,</span><br><span class="line">      <span class="attr">"profession"</span> : <span class="string">"librarian"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">2</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"user3"</span> : &#123;</span><br><span class="line">      <span class="attr">"name"</span> : <span class="string">"ramesh"</span>,</span><br><span class="line">      <span class="attr">"password"</span> : <span class="string">"password3"</span>,</span><br><span class="line">      <span class="attr">"profession"</span> : <span class="string">"clerk"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">3</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加用户：addUser"><a href="#添加用户：addUser" class="headerlink" title="添加用户：addUser"></a>添加用户：addUser</h4><p>创建 RESTful API addUser， 用于添加新的用户数据，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//添加的新用户数据</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  <span class="string">"user4"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"mohit"</span>,</span><br><span class="line">      <span class="string">"password"</span> : <span class="string">"password4"</span>,</span><br><span class="line">      <span class="string">"profession"</span> : <span class="string">"teacher"</span>,</span><br><span class="line">      <span class="string">"id"</span>: <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">app.get(<span class="string">'./addUser'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//读取已存在的数据</span></span><br><span class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    data[<span class="string">"user4"</span>] = user[<span class="string">"user4"</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/addUser，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081/addUser，结果如下所示：</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123; user1:</span><br><span class="line">   &#123; name: 'mahesh',</span><br><span class="line">     password: 'password1',</span><br><span class="line">     profession: 'teacher',</span><br><span class="line">     id: 1 &#125;,</span><br><span class="line">  user2:</span><br><span class="line">   &#123; name: 'suresh',</span><br><span class="line">     password: 'password2',</span><br><span class="line">     profession: 'librarian',</span><br><span class="line">     id: 2 &#125;,</span><br><span class="line">  user3:</span><br><span class="line">   &#123; name: 'ramesh',</span><br><span class="line">     password: 'password3',</span><br><span class="line">     profession: 'clerk',</span><br><span class="line">     id: 3 &#125;,</span><br><span class="line">  user4:</span><br><span class="line">   &#123; name: 'mohit',</span><br><span class="line">     password: 'password4',</span><br><span class="line">     profession: 'teacher',</span><br><span class="line">     id: 4 &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="删除用户：deleteUser"><a href="#删除用户：deleteUser" class="headerlink" title="删除用户：deleteUser"></a>删除用户：deleteUser</h4><p>创建 RESTful API deleteUser， 用于删除指定用户的详细信息，以下实例中，用户 id 为 2，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">app.get(<span class="string">'./deleteUser'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//读取已存在的数据</span></span><br><span class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    <span class="keyword">delete</span> data[<span class="string">"user"</span>+<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/deleteUser，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081/deleteUser，结果如下所示：</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123; user1:</span><br><span class="line">   &#123; name: 'mahesh',</span><br><span class="line">     password: 'password1',</span><br><span class="line">     profession: 'teacher',</span><br><span class="line">     id: 1 &#125;,</span><br><span class="line">  user3:</span><br><span class="line">   &#123; name: 'ramesh',</span><br><span class="line">     password: 'password3',</span><br><span class="line">     profession: 'clerk',</span><br><span class="line">     id: 3 &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="显示用户详情：-id-用户id"><a href="#显示用户详情：-id-用户id" class="headerlink" title="显示用户详情：:id(用户id)"></a>显示用户详情：:id(用户id)</h4><p>创建 RESTful API :id（用户id）， 用于读取指定用户的详细信息，server.js 文件代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">app.get(<span class="string">'./:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//读取已存在的数据</span></span><br><span class="line">  fs.readFile(__dirname + <span class="string">"/"</span> + <span class="string">"users.Json"</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    <span class="keyword">var</span> user = data[<span class="string">"user"</span> + req.params.id]</span><br><span class="line">    <span class="built_in">console</span>.log(user);</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(user));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接下来执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/2，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081/2，结果如下所示：</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"name"</span>:<span class="string">"suresh"</span>,</span><br><span class="line">   <span class="attr">"password"</span>:<span class="string">"password2"</span>,</span><br><span class="line">   <span class="attr">"profession"</span>:<span class="string">"librarian"</span>,</span><br><span class="line">   <span class="attr">"id"</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;16、Node-js-RESTful-API&quot;&gt;&lt;a href=&quot;#16、Node-js-RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;16、Node.js RESTful API */&quot;&gt;&lt;/a&gt;16、Node.js RESTful API */&lt;/h3&gt;&lt;p&gt;REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。 表述性状态转移是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML（标准通用标记语言下的一个子集）以及HTML（标准通用标记语言下的一个应用）这些现有的广泛流行的协议和标准。REST 通常使用 JSON 数据格式。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Express 框架(15)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/30/Node.js%20Express%20%E6%A1%86%E6%9E%B6/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/30/Node.js Express 框架/</id>
    <published>2016-06-30T01:38:20.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="15、Node-js-Express-框架"><a href="#15、Node-js-Express-框架" class="headerlink" title="15、Node.js Express 框架"></a>15、Node.js Express 框架</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：<br>1、可以设置中间件来响应 HTTP 请求。<br>2、定义了路由表用于执行不同的 HTTP 请求动作。<br>3、可以通过向模板传递参数来动态渲染 HTML 页面。<br><a id="more"></a></p><h4 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h4><p>安装 Express 并将其保存到依赖列表中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure></p><p>以上命令会将 Express 框架安装在当期目录的 <code>node_modules</code> 目录中， <code>node_modules</code> 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。</span><br><span class="line">//cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。</span><br><span class="line">//multer - node.js 中间件，用于处理 enctype=&quot;multipart/form-data&quot;（设置表单的MIME编码）的表单数据。</span><br><span class="line">  npm install body-parser --save</span><br><span class="line">  npm install cookie-parser --save</span><br><span class="line">  npm install multer --save</span><br></pre></td></tr></table></figure></p><h4 id="第一个-Express-框架实例"><a href="#第一个-Express-框架实例" class="headerlink" title="第一个 Express 框架实例"></a>第一个 Express 框架实例</h4><p>接下来我们使用 Express 框架来输出 “Hello World”。以下实例中我们引入了 express 模块，并在客户端发起请求后，响应 “Hello World” 字符串。<br>创建 express_demo.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node express_demo.js</span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081，结果如下所示：" target="_blank" rel="noopener">http://127.0.0.1:8081，结果如下所示：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><h4 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h4><p>Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。</p><h4 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h4><p>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：<br><code>req.app</code>：当callback为外部文件时，用req.app访问express的实例<br><code>req.baseUrl</code>：获取路由当前安装的URL路径<br><code>req.body / req.cookies</code>：获得「请求主体」/ Cookies<br><code>req.fresh / req.stale</code>：判断请求是否还「新鲜」<br><code>req.hostname / req.ip</code>：获取主机名和IP地址<br><code>req.originalUrl</code>：获取原始请求URL<br><code>req.params</code>：获取路由的parameters<br><code>req.path</code>：获取请求路径<br><code>req.protocol</code>：获取协议类型<br><code>req.query</code>：获取URL的查询参数串<br><code>req.route</code>：获取当前匹配的路由<br><code>req.subdomains</code>：获取子域名<br><code>req.accpets（）</code>：检查请求的Accept头的请求类型<br><code>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages</code><br><code>req.get（）</code>：获取指定的HTTP请求头<br><code>req.is（）</code>：判断请求头Content-Type的MIME类型</p><h4 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h4><p>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：<br><code>res.app</code>：同req.app一样<br><code>res.append（）</code>：追加指定HTTP头<br><code>res.set（）</code>在res.append（）后将重置之前设置的头<br><code>res.cookie（name，value [，option]）</code>：设置Cookie<br><code>opition</code>: domain / expires / httpOnly / maxAge / path / secure / signed<br><code>res.clearCookie（）</code>：清除Cookie<br><code>res.download（）</code>：传送指定路径的文件<br><code>res.get（）</code>：返回指定的HTTP头<br><code>res.json（）</code>：传送JSON响应<br><code>res.jsonp（）</code>：传送JSONP响应<br><code>res.location（）</code>：只设置响应的Location HTTP头，不设置状态码或者close response<br><code>res.redirect（）</code>：设置响应的Location HTTP头，并且设置状态码302<br><code>res.send（）</code>：传送HTTP响应<br><code>res.sendFile（path [，options] [，fn]）</code>：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br><code>res.set（）</code>：设置HTTP头，传入object可以一次设置多个头<br><code>res.status（）</code>：设置HTTP状态码<br><code>res.type（）</code>：设置Content-Type的MIME类型</p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。接下来我们扩展 Hello World，添加一些功能来处理更多类型的 HTTP 请求。<br>创建 express_demo2.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="comment">//主页输出"Hello World"</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"主页GET请求"</span>);</span><br><span class="line">  res.send(<span class="string">'Hello GET'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//POST请求</span></span><br><span class="line">app.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"主页 POST 请求"</span>);</span><br><span class="line">  res.send(<span class="string">'Hello POST'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// /del_user页面响应</span></span><br><span class="line">app.delete(<span class="string">'/del_user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"/del_user响应 DELETE 请求"</span>);</span><br><span class="line">  res.send(<span class="string">'删除页面'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// /list_user 页面 GET 请求</span></span><br><span class="line">app.get(<span class="string">'/list_user'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"/list_user 页面 GET 请求"</span>);</span><br><span class="line">  res.send(<span class="string">'用户列表页面'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 对页面 abcd, abxcd, ab123cd, 等响应GET请求</span></span><br><span class="line">app.get(<span class="string">'/ab*cd'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"/ab*cd GET 请求"</span>);</span><br><span class="line">  res.send(<span class="string">'正则匹配'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  node express_demo2.js</span><br><span class="line">  应用实例，访问地址为 http://0.0.0.0:8081</span><br><span class="line">```        </span><br><span class="line">接下来你可以尝试访问 http://127.0.0.1:8081 不同的地址，查看效果。</span><br><span class="line">  访问 http://127.0.0.1:8081/list_user 结果：用户列表页</span><br><span class="line">  访问 http://127.0.0.1:8081/abcd 结果：正则匹配</span><br><span class="line">  访问 http://127.0.0.1:8081/abcdefg 结果：Cannot GET/abcdefg 无法解析该地址</span><br><span class="line">#### 静态文件</span><br><span class="line">Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：</span><br><span class="line">``` javascript</span><br><span class="line">        app.use(express.static(&apos;public&apos;));//public为放置静态文件的目录</span><br></pre></td></tr></table></figure></p><p>我们可以到 public/images 目录下放些图片,如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">server.js</span><br><span class="line">public/</span><br><span class="line">public/images</span><br><span class="line">public/images/logo.png</span><br></pre></td></tr></table></figure></p><p>让我们再修改下 “Hello Word” 应用添加处理静态文件的功能。<br>创建 express_demo3.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node express_demo3.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问 <a href="http://127.0.0.1:8081/images/logo.png" target="_blank" rel="noopener">http://127.0.0.1:8081/images/logo.png</a> ,结果展示了图片。</p><h4 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h4><p>以下实例演示了在表单中通过 GET 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8081/process_get"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">      First Name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"first_name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"last_name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>server.js文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/process_get'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//输出JSON格式</span></span><br><span class="line">  response = &#123;</span><br><span class="line">    first_name:req.query.first_name,</span><br><span class="line">    last_name:req.query.last_name</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(response));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);         </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：" target="_blank" rel="noopener">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p><h4 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h4><p>以下实例演示了在表单中通过 POST 方法提交两个参数，我们可以使用 server.js 文件内的 process_get 路由器来处理输入：<br>index.htm 文件代码修改如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:8081/process_post"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">      First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"first_name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"last_name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>server.js 文件代码修改如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="comment">//创建application/x-www-form-urlencode编码解析</span></span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/process_post'</span>, urlencodedParser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//输出 JSON 格式</span></span><br><span class="line">  response = &#123;</span><br><span class="line">    first_name:req.body.first_name,</span><br><span class="line">    last_name:req.body.last_name</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(response));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);         </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：" target="_blank" rel="noopener">http://127.0.0.1:8081/index.htm,填写表单aaa,bbb，然后提交，结果：</a><br>  <code>{&quot;first_name&quot;:&quot;aaa&quot;,&quot;last_name&quot;:&quot;bbb&quot;}</code></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>以下我们创建一个用于上传文件的表单，使用 POST 方法，表单 enctype 属性设置为 multipart/form-data。<br>index.htm 文件代码修改如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件上传：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    选择一个文件上传: <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/file_upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">size</span>=<span class="string">"50"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传文件"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>server.js 文件代码修改如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line">app.use(multer(&#123;<span class="attr">dest</span>:<span class="string">'/tmp/'</span>&#125;).array(<span class="string">'image'</span>));</span><br><span class="line">app.get(<span class="string">'/index.htm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">"/"</span> + <span class="string">"index.htm"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/file_upload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.files[<span class="number">0</span>]);<span class="comment">//上传文件信息</span></span><br><span class="line">  <span class="keyword">var</span> des_file = __dirname + <span class="string">"/"</span> + req.files[<span class="number">0</span>].originalname;</span><br><span class="line">  fs.readFile(req. files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    fs.writeFile(des_file, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        response = &#123;</span><br><span class="line">          message:<span class="string">'File uploaded successfully'</span>,</span><br><span class="line">          filename:req.files[<span class="number">0</span>].originalname</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">console</span>.log(response);</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(response));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js </span><br><span class="line">应用实例，访问地址为 http://0.0.0.0:8081</span><br></pre></td></tr></table></figure></p><p>浏览器访问 <a href="http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：" target="_blank" rel="noopener">http://127.0.0.1:8081/index.htm,上传本地文件a.jpg，结果：</a><br>  <code>{&quot;message&quot;:&quot;File uploaded successfully&quot;,&quot;filename&quot;:&quot;a.jpg&quot;}</code></p><h4 id="Cookie-管理"><a href="#Cookie-管理" class="headerlink" title="Cookie 管理"></a>Cookie 管理</h4><p>我们可以使用中间件向 Node.js 服务器发送 cookie 信息，以下代码输出了客户端发送的 cookie 信息：<br>express_cookie.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Cookies: "</span>, req.cookies);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;15、Node-js-Express-框架&quot;&gt;&lt;a href=&quot;#15、Node-js-Express-框架&quot; class=&quot;headerlink&quot; title=&quot;15、Node.js Express 框架&quot;&gt;&lt;/a&gt;15、Node.js Express 框架&lt;/h3&gt;&lt;p&gt;Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。&lt;br&gt;Express 框架核心特性：&lt;br&gt;1、可以设置中间件来响应 HTTP 请求。&lt;br&gt;2、定义了路由表用于执行不同的 HTTP 请求动作。&lt;br&gt;3、可以通过向模板传递参数来动态渲染 HTML 页面。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Web 模块(14)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/29/Node.js%20Web%E6%A8%A1%E5%9D%97/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/29/Node.js Web模块/</id>
    <published>2016-06-29T12:51:36.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="14、Node-js-Web-模块"><a href="#14、Node-js-Web-模块" class="headerlink" title="14、Node.js Web 模块"></a>14、Node.js Web 模块</h3><p>使用 Node 创建 Web 服务器<br>Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br></pre></td></tr></table></figure></p><p>以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//解析请求，包括文件名</span></span><br><span class="line">  <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">  <span class="comment">//输出请求文件名</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</span><br><span class="line">  <span class="comment">//从文件系统中读取请求的文件内容</span></span><br><span class="line">  fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">      <span class="comment">//HTTP 状态码：404：NOT FOUND</span></span><br><span class="line">      <span class="comment">//Content Type：text/plain</span></span><br><span class="line">      response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//HTTP 状态码：200：OK</span></span><br><span class="line">      <span class="comment">//Content Type：text/plain</span></span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">      <span class="comment">//响应文件内容</span></span><br><span class="line">      response.write(data.toString());</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8081</span>);</span><br></pre></td></tr></table></figure></p><p>控制台会输出以下信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8081/'</span>);</span><br></pre></td></tr></table></figure></p><p>接下来我们在该目录下创建一个 index.htm 文件，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>执行 server.js 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br><span class="line">Server running at http://127.0.0.1:8081/</span><br></pre></td></tr></table></figure></p><h4 id="使用-Node-创建-Web-客户端"><a href="#使用-Node-创建-Web-客户端" class="headerlink" title="使用 Node 创建 Web 客户端"></a>使用 Node 创建 Web 客户端</h4><p>Node 创建 Web 客户端需要引入 http 模块，创建 client.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//用于请求选项</span></span><br><span class="line"><span class="keyword">var</span> optionss = &#123;</span><br><span class="line">  host:<span class="string">'localhost'</span>,</span><br><span class="line">  port:<span class="string">'8081'</span></span><br><span class="line">  path:<span class="string">'/index.htm'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理响应的回调函数</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//不断更新数据</span></span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">''</span>;</span><br><span class="line">  response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    body += data;</span><br><span class="line">  &#125;);</span><br><span class="line">  response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//数据接收完成</span></span><br><span class="line">    <span class="built_in">console</span>.log(body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向服务器端发送请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, callback);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure></p><p>新开一个终端，执行 client.js 文件，输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node client.js</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 server.js 的控制台输出信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Server running at http://127.0.0.1:8081/</span><br><span class="line">Request for /index.htm received.   # 客户端请求信息</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;14、Node-js-Web-模块&quot;&gt;&lt;a href=&quot;#14、Node-js-Web-模块&quot; class=&quot;headerlink&quot; title=&quot;14、Node.js Web 模块&quot;&gt;&lt;/a&gt;14、Node.js Web 模块&lt;/h3&gt;&lt;p&gt;使用 Node 创建 Web 服务器&lt;br&gt;Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是演示一个最基本的 HTTP 服务器架构(使用8081端口)，创建 server.js 文件，代码如下所示：&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 工具模块(13)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/29/Node.js%20%E5%B7%A5%E5%85%B7%E6%A8%A1%E5%9D%97/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/29/Node.js 工具模块/</id>
    <published>2016-06-29T10:38:26.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="13、Node-js-工具模块"><a href="#13、Node-js-工具模块" class="headerlink" title="13、Node.js 工具模块"></a>13、Node.js 工具模块</h3><h4 id="Node-js-OS-模块"><a href="#Node-js-OS-模块" class="headerlink" title="Node.js OS 模块"></a>Node.js OS 模块</h4><p>Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br></pre></td></tr></table></figure></p><h5 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>os.tmpdir()</code>//返回操作系统的默认临时文件夹。<br><a id="more"></a><br>2  <code>os.endianness()</code>//返回 CPU 的字节序，可能的是 “BE” 或 “LE”。<br>3  <code>os.hostname()</code>//返回操作系统的主机名。<br>4  <code>os.type()</code>//返回操作系统名<br>5  <code>os.platform()</code>//返回操作系统名<br>6  <code>os.arch()</code>//返回操作系统 CPU 架构，可能的值有 “x64”、”arm” 和 “ia32”。<br>7  <code>os.release()</code>//返回操作系统的发行版本。<br>8  <code>os.uptime()</code>//返回操作系统运行的时间，以秒为单位。<br>9  <code>os.loadavg()</code>//返回一个包含 1、5、15 分钟平均负载的数组。<br>10  <code>os.totalmem()</code>//返回系统内存总量，单位为字节。<br>11  <code>os.freemem()</code>//返回操作系统空闲内存量，单位是字节。<br>12  <code>os.cpus()</code>//返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。<br>13  <code>os.networkInterfaces()</code>//获得网络接口列表。</p><h5 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h5><p><code>os.EOL</code>//定义了操作系统的行尾符的常量。<br>实例<br>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'endianness : '</span> + os.endianness());<span class="comment">// CPU 的字节序</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'type : '</span> + os.type());<span class="comment">// 操作系统名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'platform : '</span> + os.platform());<span class="comment">// 操作系统名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'total memory : '</span> + os.totalmem() + <span class="string">" bytes."</span>);<span class="comment">// 系统内存总量</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'free memory : '</span> + os.freemem() + <span class="string">" bytes."</span>);<span class="comment">// 操作系统空闲内存量</span></span><br></pre></td></tr></table></figure></p><p>代码执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node main.js </span><br><span class="line">endianness : LE</span><br><span class="line">type : Linux</span><br><span class="line">platform : linux</span><br><span class="line">total memory : 25103400960 bytes.</span><br><span class="line">free memory : 20676710400 bytes.</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-Path-模块"><a href="#Node-js-Path-模块" class="headerlink" title="Node.js Path 模块"></a>Node.js Path 模块</h4><p>Node.js path 模块提供了一些用于处理文件路径的小工具，我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure></p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>1  <code>path.normalize(p)</code>//规范化路径，注意’..’ 和 ‘.’。<br>2  <code>path.join([path1][, path2][, ...])</code>//用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\”。<br>3  <code>path.resolve([from ...], to)</code>//将 to 参数解析为绝对路径。<br>4  <code>path.isAbsolute(path)</code>//判断参数 path 是否是绝对路径。<br>5  <code>path.relative(from, to)</code>//用于将相对路径转为绝对路径。<br>6  <code>path.dirname(p)</code>//返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。<br>7  <code>path.basename(p[, ext])</code>//返回路径中的最后一部分。同 Unix 命令 bashname 类似。<br>8  <code>path.extname(p)</code>//返回路径中文件的后缀名，即路径中最后一个’.’之后的部分。如果一个路径中并不包含’.’或该路径只包含一个’.’ 且这个’.’为路径的第一个字符，则此命令返回空字符串。<br>9  <code>path.parse(pathString)</code>//返回路径字符串的对象。<br>10  <code>path.format(pathObject)</code>//从对象中返回路径字符串，和 path.parse 相反。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>1  <code>path.sep</code>//平台的文件路径分隔符，’\‘ 或 ‘/‘。<br>2  <code>path.delimiter</code>//平台的分隔符, ; or ‘:’.<br>3  <code>path.posix</code>//提供上述 path 的方法，不过总是以 posix 兼容的方式交互。<br>4  <code>path.win32</code>//提供上述 path 的方法，不过总是以 win32 兼容的方式交互。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="comment">// 格式化路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'normalization : '</span> + path.normalize(<span class="string">'/test/test1//2slashes/1slash/tab/..'</span>));</span><br><span class="line"><span class="comment">// 连接路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'joint path : '</span> + path.join(<span class="string">'/test'</span>, <span class="string">'test1'</span>, <span class="string">'2slashes/1slash'</span>, <span class="string">'tab'</span>, <span class="string">'..'</span>));</span><br><span class="line"><span class="comment">// 转换为绝对路径</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'resolve : '</span> + path.resolve(<span class="string">'main.js'</span>));</span><br><span class="line"><span class="comment">// 路径中文件的后缀名</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ext name : '</span> + path.extname(<span class="string">'main.js'</span>));</span><br></pre></td></tr></table></figure></p><p>代码执行结果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node main.js </span><br><span class="line">normalization : <span class="regexp">/test/</span>test1/<span class="number">2</span>slashes/<span class="number">1</span>slash</span><br><span class="line">joint path : <span class="regexp">/test/</span>test1/<span class="number">2</span>slashes/<span class="number">1</span>slash</span><br><span class="line">resolve : <span class="regexp">/web/</span>com/<span class="number">1427176256</span>_27423/main.js</span><br><span class="line">ext name : .js</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-Net-模块"><a href="#Node-js-Net-模块" class="headerlink" title="Node.js Net 模块"></a>Node.js Net 模块</h4><p>Node.js Net 模块提供了一些用于底层的网络通信的小工具，包含了创建服务器/客户端的方法，我们可以通过以下方式引入该模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">"net"</span>)</span><br></pre></td></tr></table></figure></p><h5 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>net.createServer([options][, connectionListener])</code>//创建一个 TCP 服务器。参数 connectionListener 自动给 ‘connection’ 事件创建监听器。<br>2  <code>net.connect(options[, connectionListener])</code>//返回一个新的 ‘net.Socket’，并连接到指定的地址和端口。当 socket 建立的时候，将会触发 ‘connect’ 事件。<br>3  <code>net.createConnection(options[, connectionListener])</code>//创建一个到端口 port 和 主机 host的 TCP 连接。 host 默认为 ‘localhost’。<br>4  <code>net.connect(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>5  <code>net.createConnection(port[, host][, connectListener])</code>//创建一个端口为 port 和主机为 host的 TCP 连接 。host 默认为 ‘localhost’。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>6  <code>net.connect(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件上。返回 ‘net.Socket’。<br>7  <code>net.createConnection(path[, connectListener])</code>//创建连接到 path 的 unix socket 。参数 connectListener 将会作为监听器添加到 ‘connect’ 事件。返回 ‘net.Socket’。<br>8  <code>net.isIP(input)</code>//检测输入的是否为 IP 地址。 IPV4 返回 4， IPV6 返回 6，其他情况返回 0。<br>9  <code>net.isIPv4(input)</code>//如果输入的地址为 IPV4， 返回 true，否则返回 false。<br>10  <code>net.isIPv6(input)</code>//如果输入的地址为 IPV6， 返回 true，否则返回 false。</p><h4 id="net-Server"><a href="#net-Server" class="headerlink" title="net.Server"></a>net.Server</h4><p>net.Server通常用于创建一个 TCP 或本地服务器。</p><h5 id="net-Server方法："><a href="#net-Server方法：" class="headerlink" title="net.Server方法："></a>net.Server方法：</h5><p>1  <code>server.listen(port[, host][, backlog][, callback])</code>//监听指定端口 port 和 主机 host ac连接。 默认情况下 host 接受任何 IPv4 地址(INADDR_ANY)的直接连接。端口 port 为 0 时，则会分配一个随机端口。<br>2  <code>server.listen(path[, callback])</code>//通过指定 path 的连接，启动一个本地 socket 服务器。<br>3  <code>server.listen(handle[, callback])</code>//通过指定句柄连接。<br>4  <code>server.listen(options[, callback])</code>//options 的属性：端口 port, 主机 host, 和 backlog, 以及可选参数 callback 函数, 他们在一起调用server.listen(port, [host], [backlog], [callback])。还有，参数 path 可以用来指定 UNIX socket。<br>5  <code>server.close([callback])</code>//服务器停止接收新的连接，保持现有连接。这是异步函数，当所有连接结束的时候服务器会关闭，并会触发 ‘close’ 事件。<br>6  <code>server.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。<br>7  <code>server.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。<br>8  <code>server.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。<br>9  <code>server.getConnections(callback)</code>//异步获取服务器当前活跃连接的数量。当 socket 发送给子进程后才有效；回调函数有 2 个参数 err 和 count。</p><h5 id="net-Server事件："><a href="#net-Server事件：" class="headerlink" title="net.Server事件："></a>net.Server事件：</h5><p>1  <code>listening</code>//当服务器调用 server.listen 绑定后会触发。<br>2  <code>connection</code>//当新连接创建后会被触发。socket 是 net.Socket实例。<br>3  <code>close</code>//服务器关闭时会触发。注意，如果存在连接，这个事件不会被触发直到所有的连接关闭。<br>4  <code>error</code>//发生错误时触发。’close’ 事件将被下列事件直接调用。</p><h4 id="net-Socket"><a href="#net-Socket" class="headerlink" title="net.Socket"></a>net.Socket</h4><p>net.Socket 对象是 TCP 或 UNIX Socket 的抽象。net.Socket 实例实现了一个双工流接口。 他们可以在用户创建客户端(使用 connect())时使用, 或者由 Node 创建它们，并通过 connection 服务器事件传递给用户。</p><h5 id="net-Socket事件："><a href="#net-Socket事件：" class="headerlink" title="net.Socket事件："></a>net.Socket事件：</h5><p>1  <code>lookup</code>//在解析域名后，但在连接前，触发这个事件。对 UNIX sokcet 不适用。<br>2  <code>connect</code>//成功建立 socket 连接时触发。<br>3  <code>data</code>//当接收到数据时触发。<br>4  <code>end</code>//当 socket 另一端发送 FIN 包时，触发该事件。<br>5  <code>timeout</code>//当 socket 空闲超时时触发，仅是表明 socket 已经空闲。用户必须手动关闭连接。<br>6  <code>drain</code>//当写缓存为空得时候触发。可用来控制上传。<br>7  <code>error</code>//错误发生时触发。<br>8  <code>close</code>//当 socket 完全关闭时触发。参数 had_error 是布尔值，它表示是否因为传输错误导致 socket 关闭。</p><h5 id="net-Socket属性："><a href="#net-Socket属性：" class="headerlink" title="net.Socket属性："></a>net.Socket属性：</h5><p>1  <code>socket.bufferSize</code>//该属性显示了要写入缓冲区的字节数。<br>2  <code>socket.remoteAddress</code>//远程的 IP 地址字符串，例如：’74.125.127.100’ or ‘2001:4860:a005::68’。<br>3  <code>socket.remoteFamily</code>//远程IP协议族字符串，比如 ‘IPv4’ or ‘IPv6’。<br>4  <code>socket.remotePort</code>//远程端口，数字表示，例如：80 or 21。<br>5  <code>socket.localAddress</code>//网络连接绑定的本地接口 远程客户端正在连接的本地 IP 地址，字符串表示。例如，如果你在监听’0.0.0.0’而客户端连接在’192.168.1.1’，这个值就会是 ‘192.168.1.1’。<br>6  <code>socket.localPort</code>//本地端口地址，数字表示。例如：80 or 21。<br>7  <code>socket.bytesRead</code>//接收到得字节数。<br>8  <code>socket.bytesWritten</code>//发送的字节数。</p><h5 id="net-Socket方法："><a href="#net-Socket方法：" class="headerlink" title="net.Socket方法："></a>net.Socket方法：</h5><p>1  <code>new net.Socket([options])</code>//构造一个新的 socket 对象。<br>2  <code>socket.connect(port[, host][, connectListener])</code>//指定端口 port 和 主机 host，创建 socket 连接 。参数 host 默认为 localhost。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>3  <code>socket.connect(path[, connectListener])</code>//打开指定路径的 unix socket。通常情况不需要使用 net.createConnection 打开 socket。只有你实现了自己的 socket 时才会用到。<br>4  <code>socket.setEncoding([encoding])</code>//设置编码<br>5  <code>socket.write(data[, encoding][, callback])</code>//在 socket 上发送数据。第二个参数指定了字符串的编码，默认是 UTF8 编码。<br>6  <code>socket.end([data][, encoding])</code>//半关闭 socket。例如，它发送一个 FIN 包。可能服务器仍在发送数据。<br>7  <code>socket.destroy()</code>//确保没有 I/O 活动在这个套接字上。只有在错误发生情况下才需要。（处理错误等等）。<br>8  <code>socket.pause()</code>//暂停读取数据。就是说，不会再触发 data 事件。对于控制上传非常有用。<br>9  <code>socket.resume()</code>//调用 pause() 后想恢复读取数据。<br>10  <code>socket.setTimeout(timeout[, callback])</code>//socket 闲置时间超过 timeout 毫秒后 ，将 socket 设置为超时。<br>11  <code>socket.setNoDelay([noDelay])</code>//禁用纳格（Nagle）算法。默认情况下 TCP 连接使用纳格算法，在发送前他们会缓冲数据。将 noDelay 设置为 true 将会在调用 socket.write() 时立即发送数据。noDelay 默认值为 true。<br>12  <code>socket.setKeepAlive([enable][, initialDelay])</code>//禁用/启用长连接功能，并在发送第一个在闲置 socket 上的长连接 probe 之前，可选地设定初始延时。默认为 false。 设定 initialDelay （毫秒），来设定收到的最后一个数据包和第一个长连接probe之间的延时。将 initialDelay 设为0，将会保留默认（或者之前）的值。默认值为0.<br>13  <code>socket.address()</code>//操作系统返回绑定的地址，协议族名和服务器端口。返回的对象有 3 个属性，比如{ port: 12346, family: ‘IPv4’, address: ‘127.0.0.1’ }。<br>14  <code>socket.unref()</code>//如果这是事件系统中唯一一个活动的服务器，调用 unref 将允许程序退出。如果服务器已被 unref，则再次调用 unref 并不会产生影响。<br>15  <code>socket.ref()</code>//与 unref 相反，如果这是唯一的服务器，在之前被 unref 了的服务器上调用 ref 将不会让程序退出（默认行为）。如果服务器已经被 ref，则再次调用 ref 并不会产生影响。</p><h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><p>创建 server.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">connection</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</span><br><span class="line">  connection.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'客户端关闭连接'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.write(<span class="string">'Hello World!\r\n'</span>);</span><br><span class="line">  connection.pipe(connection);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is listening'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上服务端代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br><span class="line">server is listening # 服务已创建并监听8080端口</span><br></pre></td></tr></table></figure></p><p>新开一个窗口，创建client.js文件，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">var</span> client = net.connect(&#123;<span class="attr">port</span>: <span class="number">8080</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'连接服务器！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">  client.end();</span><br><span class="line">&#125;);</span><br><span class="line">client.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'断开与服务器的连接'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上客户端的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接服务器！</span><br><span class="line">Hello World!</span><br><span class="line">断开与服务器的连接</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-DNS-模块"><a href="#Node-js-DNS-模块" class="headerlink" title="Node.js DNS 模块"></a>Node.js DNS 模块</h4><p>Node.js DNS 模块用于解析域名。引入 DNS 模块语法格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">"dns"</span>)</span><br></pre></td></tr></table></figure></p><h5 id="方法：-2"><a href="#方法：-2" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>dns.lookup(hostname[, options], callback)</code>//将域名（比如 ‘runoob.com’）解析为第一条找到的记录 A （IPV4）或 AAAA(IPV6)。参数 options可以是一个对象或整数。如果没有提供 options，IP v4 和 v6 地址都可以。如果 options 是整数，则必须是 4 或 6。<br>2  <code>dns.lookupService(address, port, callback)</code>//使用 getnameinfo 解析传入的地址和端口为域名和服务。<br>3  <code>dns.resolve(hostname[, rrtype], callback)</code>//将一个域名（如 ‘runoob.com’）解析为一个 rrtype 指定记录类型的数组。<br>4  <code>dns.resolve4(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询 IPv4 (A 记录）。 addresses IPv4 地址数组 (比如，[‘74.125.79.104’, ‘74.125.79.105’, ‘74.125.79.106’]）。<br>5  <code>dns.resolve6(hostname, callback)</code>//和 dns.resolve4() 类似， 仅能查询 IPv6( AAAA 查询）<br>6  <code>dns.resolveMx(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询邮件交换(MX 记录)。<br>7  <code>dns.resolveTxt(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行文本查询 (TXT 记录）。 addresses 是 2-d 文本记录数组。(比如，[ [‘v=spf1 ip4:0.0.0.0 ‘, ‘~all’ ] ]）。 每个子数组包含一条记录的 TXT 块。根据使用情况可以连接在一起，也可单独使用。<br>8  <code>dns.resolveSrv(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行服务记录查询 (SRV 记录）。 addresses 是 hostname可用的 SRV 记录数组。 SRV 记录属性有优先级（priority），权重（weight）, 端口（port）, 和名字（name） (比如，[{‘priority’: 10, ‘weight’: 5, ‘port’: 21223, ‘name’: ‘service.example.com’}, …]）。<br>9  <code>dns.resolveSoa(hostname, callback)</code>//和 dns.resolve() 类似, 仅能查询权威记录(SOA 记录）。<br>10  <code>dns.resolveNs(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行域名服务器记录查询(NS 记录）。 addresses 是域名服务器记录数组（hostname 可以使用） (比如, [‘ns1.example.com’, ‘ns2.example.com’]）。<br>11  <code>dns.resolveCname(hostname, callback)</code>//和 dns.resolve() 类似, 仅能进行别名记录查询 (CNAME记录)。addresses 是对 hostname 可用的别名记录数组 (比如，, [‘bar.example.com’]）。<br>12  <code>dns.reverse(ip, callback)</code>//反向解析 IP 地址，指向该 IP 地址的域名数组。<br>13  <code>dns.getServers()</code>//返回一个用于当前解析的 IP 地址数组的字符串。<br>14  <code>dns.setServers(servers)</code>//指定一组 IP 地址作为解析服务器。</p><h5 id="rrtypes"><a href="#rrtypes" class="headerlink" title="rrtypes"></a>rrtypes</h5><p>dns.resolve()方法中有效的rrtypes值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos; IPV4 地址, 默认</span><br><span class="line">&apos;AAAA&apos; IPV6 地址</span><br><span class="line">&apos;MX&apos; 邮件交换记录</span><br><span class="line">&apos;TXT&apos; text 记录</span><br><span class="line">&apos;SRV&apos; SRV 记录</span><br><span class="line">&apos;PTR&apos; 用来反向 IP 查找</span><br><span class="line">&apos;NS&apos; 域名服务器记录</span><br><span class="line">&apos;CNAME&apos; 别名记录</span><br><span class="line">&apos;SOA&apos; 授权记录的初始值</span><br></pre></td></tr></table></figure></p><h5 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h5><p>每次 DNS 查询都可能返回以下错误码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">dns.NODATA: 无数据响应。</span><br><span class="line">dns.FORMERR: 查询格式错误。</span><br><span class="line">dns.SERVFAIL: 常规失败。</span><br><span class="line">dns.NOTFOUND: 没有找到域名。</span><br><span class="line">dns.NOTIMP: 未实现请求的操作。</span><br><span class="line">dns.REFUSED: 拒绝查询。</span><br><span class="line">dns.BADQUERY: 查询格式错误。</span><br><span class="line">dns.BADNAME: 域名格式错误。</span><br><span class="line">dns.BADFAMILY: 地址协议不支持。</span><br><span class="line">dns.BADRESP: 回复格式错误。</span><br><span class="line">dns.CONNREFUSED: 无法连接到 DNS 服务器。</span><br><span class="line">dns.TIMEOUT: 连接 DNS 服务器超时。</span><br><span class="line">dns.EOF: 文件末端。</span><br><span class="line">dns.FILE: 读文件错误。</span><br><span class="line">dns.NOMEM: 内存溢出。</span><br><span class="line">dns.DESTRUCTION: 通道被摧毁。</span><br><span class="line">dns.BADSTR: 字符串格式错误。</span><br><span class="line">dns.BADFLAGS: 非法标识符。</span><br><span class="line">dns.NONAME: 所给主机不是数字。</span><br><span class="line">dns.BADHINTS: 非法HINTS标识符。</span><br><span class="line">dns.NOTINITIALIZED: c c-ares 库尚未初始化。</span><br><span class="line">dns.LOADIPHLPAPI: 加载 iphlpapi.dll 出错。</span><br><span class="line">dns.ADDRGETNETWORKPARAMS: 无法找到 GetNetworkParams 函数。</span><br><span class="line">dns.CANCELLED: 取消 DNS 查询。</span><br></pre></td></tr></table></figure></p><h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dns = <span class="built_in">require</span>(<span class="string">'dns'</span>);</span><br><span class="line">dns.lookup(<span class="string">'www.github.com'</span>,<span class="function"><span class="keyword">function</span> <span class="title">onLookup</span>(<span class="params">err, address, family</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ip 地址：'</span>, address);</span><br><span class="line">  dns.reverse(address, <span class="function"><span class="keyword">function</span>(<span class="params">err, hostname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'反向解析'</span> + address + <span class="string">':'</span> + <span class="built_in">JSON</span>.stringify(hostname));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行以上代码，结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">address: 192.30.252.130</span><br><span class="line">reverse for 192.30.252.130: [&quot;github.com&quot;]</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-Domain-模块"><a href="#Node-js-Domain-模块" class="headerlink" title="Node.js Domain 模块"></a>Node.js Domain 模块</h4><p>Node.js Domain(域) 简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的异常。引入 Domain 模块 语法格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domain = <span class="built_in">require</span>(<span class="string">"domain"</span>)</span><br></pre></td></tr></table></figure></p><p>domain模块，把处理多个不同的IO的操作作为一个组。注册事件和回调到domain，当发生一个错误事件或抛出一个错误时，domain对象会被通知，不会丢失上下文环境，也不导致程序错误立即推出，与process.on(‘uncaughtException’)不同。<br>Domain 模块可分为隐式绑定和显式绑定：<br>1、隐式绑定: 把在domain上下文中定义的变量，自动绑定到domain对象<br>2、显式绑定: 把不是在domain上下文中定义的变量，以代码的方式绑定到domain对象</p><h5 id="方法：-3"><a href="#方法：-3" class="headerlink" title="方法："></a>方法：</h5><p>1  <code>domain.run(function)</code>//在域的上下文运行提供的函数，隐式的绑定了所有的事件分发器，计时器和底层请求。<br>2  <code>domain.add(emitter)</code>//显式的增加事件<br>3  <code>domain.remove(emitter)</code>//删除事件。<br>4  <code>domain.bind(callback)</code>//返回的函数是一个对于所提供的回调函数的包装函数。当调用这个返回的函数被时，所有被抛出的错误都会被导向到这个域的 error 事件。<br>5  <code>domain.intercept(callback)</code>//和 domain.bind(callback) 类似。除了捕捉被抛出的错误外，它还会拦截 Error 对象作为参数传递到这个函数。<br>6  <code>domain.enter()</code>//进入一个异步调用的上下文，绑定到domain。<br>7  <code>domain.exit()</code>//退出当前的domain，切换到不同的链的异步调用的上下文中。对应domain.enter()。<br>8  <code>domain.dispose()</code>//释放一个domain对象，让node进程回收这部分资源。<br>9  <code>domain.create()</code>//返回一个domain对象。</p><h5 id="事件："><a href="#事件：" class="headerlink" title="事件："></a>事件：</h5><p>1  <code>domain.menbers</code>//已加入domain对象的域定时器和事件发射器的数组。</p><h6 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h6><p>创建 main.js 文件，代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>).EventEmitter;</span><br><span class="line"><span class="keyword">var</span> domain = <span class="built_in">require</span>(<span class="string">"domain"</span>);</span><br><span class="line"><span class="keyword">var</span> emitter1 = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"><span class="comment">// 创建域</span></span><br><span class="line"><span class="keyword">var</span> domain1 = domain.create();</span><br><span class="line">domain1.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"domain1 处理这个错误 ("</span>+err.message+<span class="string">")"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 显式绑定</span></span><br><span class="line">domain1.add(emitter1);</span><br><span class="line">emitter1.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"监听器处理此错误 ("</span>+err.message+<span class="string">")"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">emitter1.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过监听器来处理'</span>));</span><br><span class="line">emitter1.removeAllListeners(<span class="string">'error'</span>);</span><br><span class="line">emitter1.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过 domain1 处理'</span>));</span><br><span class="line"><span class="keyword">var</span> domain2 = domain.create();</span><br><span class="line">domain2.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"domain2 处理这个错误 ("</span>+err.message+<span class="string">")"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 隐式绑定</span></span><br><span class="line">domain2.run(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> emitter2 = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">   emitter2.emit(<span class="string">'error'</span>,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'通过 domain2 处理'</span>));   </span><br><span class="line">&#125;);</span><br><span class="line">domain1.remove(emitter1);</span><br><span class="line">emitter1.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'转换为异常，系统将崩溃!'</span>));</span><br></pre></td></tr></table></figure></p><p>执行以上代码，结果如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">监听器处理此错误 (通过监听器来处理)</span><br><span class="line">domain1 处理这个错误 (通过 domain1 处理)</span><br><span class="line">domain2 处理这个错误 (通过 domain2 处理)</span><br><span class="line">events.js:72</span><br><span class="line">        throw er; // Unhandled &apos;error&apos; event</span><br><span class="line">              ^</span><br><span class="line">Error: 转换为异常，系统将崩溃!</span><br><span class="line">    at Object.&lt;anonymous&gt; (/www/node/main.js:40:24)</span><br><span class="line">    at Module._compile (module.js:456:26)</span><br><span class="line">    at Object.Module._extensions..js (module.js:474:10)</span><br><span class="line">    at Module.load (module.js:356:32)</span><br><span class="line">    at Function.Module._load (module.js:312:12)</span><br><span class="line">    at Function.Module.runMain (module.js:497:10)</span><br><span class="line">    at startup (node.js:119:16)</span><br><span class="line">    at node.js:929:3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;13、Node-js-工具模块&quot;&gt;&lt;a href=&quot;#13、Node-js-工具模块&quot; class=&quot;headerlink&quot; title=&quot;13、Node.js 工具模块&quot;&gt;&lt;/a&gt;13、Node.js 工具模块&lt;/h3&gt;&lt;h4 id=&quot;Node-js-OS-模块&quot;&gt;&lt;a href=&quot;#Node-js-OS-模块&quot; class=&quot;headerlink&quot; title=&quot;Node.js OS 模块&quot;&gt;&lt;/a&gt;Node.js OS 模块&lt;/h4&gt;&lt;p&gt;Node.js os 模块提供了一些基本的系统操作函数。我们可以通过以下方式引入该模块：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; os = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;方法：&quot;&gt;&lt;a href=&quot;#方法：&quot; class=&quot;headerlink&quot; title=&quot;方法：&quot;&gt;&lt;/a&gt;方法：&lt;/h5&gt;&lt;p&gt;1  &lt;code&gt;os.tmpdir()&lt;/code&gt;//返回操作系统的默认临时文件夹。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js GET/POST请求(12)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/29/Node.js%20GET%20POST%E8%AF%B7%E6%B1%82/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/29/Node.js GET POST请求/</id>
    <published>2016-06-29T07:38:20.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12、Node-js-GET-POST请求"><a href="#12、Node-js-GET-POST请求" class="headerlink" title="12、Node.js GET/POST请求"></a>12、Node.js GET/POST请求</h3><h4 id="获取GET请求内容"><a href="#获取GET请求内容" class="headerlink" title="获取GET请求内容"></a>获取GET请求内容</h4><p>由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">  res.end(util.inspect(url.parse(req.url, <span class="literal">true</span>)));</span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></p><p>在浏览器中访问<code>http://localhost:3000/user?name=w3c&amp;email=w3c@w3cschool.cc</code> 然后查看返回结果:<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="literal">null</span>,</span><br><span class="line">  slashes: <span class="literal">null</span>,</span><br><span class="line">  auth: <span class="literal">null</span>,</span><br><span class="line">  host: <span class="literal">null</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  hostname: <span class="literal">null</span>,</span><br><span class="line">  hash: <span class="literal">null</span>,</span><br><span class="line">  search: <span class="string">'?name=w3c&amp;email=w3c@w3cschool.cc'</span>,</span><br><span class="line">  query: &#123; <span class="attr">name</span>: <span class="string">'w3c'</span>, <span class="attr">email</span>: <span class="string">'w3c@w3cschool.cc'</span> &#125;,</span><br><span class="line">  pathname: <span class="string">'/user'</span>,</span><br><span class="line">  path: <span class="string">'/user?name=w3c&amp;email=w3c@w3cschool.cc'</span>,</span><br><span class="line">  href: <span class="string">'/user?name=w3c&amp;email=w3c@w3cschool.cc'</span> &#125;</span><br></pre></td></tr></table></figure></p><h4 id="获取POST请求内容"><a href="#获取POST请求内容" class="headerlink" title="获取POST请求内容"></a>获取POST请求内容</h4><p>POST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js默认是不会解析请求体的， 当你需要的时候，需要手动来做。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> post = <span class="string">''</span>;<span class="comment">//定义了一个post变量，用于暂存请求体的信息</span></span><br><span class="line">  req.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;<span class="comment">//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span></span><br><span class="line">    post += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span></span><br><span class="line">    post = querystring.parse(post);</span><br><span class="line">    res.end(util.inspect(post));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;12、Node-js-GET-POST请求&quot;&gt;&lt;a href=&quot;#12、Node-js-GET-POST请求&quot; class=&quot;headerlink&quot; title=&quot;12、Node.js GET/POST请求&quot;&gt;&lt;/a&gt;12、Node.js GET/POST请求&lt;/h3&gt;&lt;h4 id=&quot;获取GET请求内容&quot;&gt;&lt;a href=&quot;#获取GET请求内容&quot; class=&quot;headerlink&quot; title=&quot;获取GET请求内容&quot;&gt;&lt;/a&gt;获取GET请求内容&lt;/h4&gt;&lt;p&gt;由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js中url模块中的parse函数提供了这个功能。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; util = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;util&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res.end(util.inspect(url.parse(req.url, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在浏览器中访问&lt;code&gt;http://localhost:3000/user?name=w3c&amp;amp;email=w3c@w3cschool.cc&lt;/code&gt; 然后查看返回结果:&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js常用工具(10)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/29/Node.js%20%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/29/Node.js 常用工具/</id>
    <published>2016-06-29T00:10:03.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="10、Node-js-常用工具"><a href="#10、Node-js-常用工具" class="headerlink" title="10、Node.js 常用工具"></a>10、Node.js 常用工具</h3><p><code>util</code> 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。<br><a id="more"></a></p><h4 id="util-inherits"><a href="#util-inherits" class="headerlink" title="util.inherits"></a>util.inherits</h4><p><code>util.inherits(constructor, superConstructor)</code>//是一个实现对象间原型继承 的函数。JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。<br>在这里我们只介绍<code>util.inherits</code> 的用法，示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'base'</span>;</span><br><span class="line">  <span class="keyword">this</span>.base = <span class="number">1991</span>;</span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; </span><br><span class="line">Base.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'sub'</span>;</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Sub, Base);</span><br><span class="line"><span class="keyword">var</span> objBase = <span class="keyword">new</span> Base();</span><br><span class="line">objBase.showName();</span><br><span class="line">objBase.sayHello();</span><br><span class="line"><span class="built_in">console</span>.log(objBase);</span><br><span class="line"><span class="keyword">var</span> objSub = <span class="keyword">new</span> Sub();</span><br><span class="line">objSub.showName();</span><br><span class="line"><span class="built_in">console</span>.log(objSub);</span><br></pre></td></tr></table></figure></p><p>我们定义了一个基础对象Base 和一个继承自Base 的Sub，Base 有三个在构造函数 内定义的属性和一个原型中定义的函数，通过<code>util.inherits</code> 实现继承。运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">base </span><br><span class="line">Hello base </span><br><span class="line">&#123; name: &apos;base&apos;, base: 1991, sayHello: [Function] &#125; </span><br><span class="line">sub </span><br><span class="line">&#123; name: &apos;sub&apos; &#125;</span><br></pre></td></tr></table></figure></p><p>注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。同时，在原型中定义的属性不会被console.log 作 为对象的属性输出.</p><h4 id="util-inspect"><a href="#util-inspect" class="headerlink" title="util.inspect"></a>util.inspect</h4><p><code>util.inspect(object,[showHidden],[depth],[colors])</code>//是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。<br>-<code>showHidden</code>//是一个可选参数，如果值为 true，将会输出更多隐藏信息。<br>-<code>depth</code>//表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。<br>-<code>colors</code>//如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。<br>特别要指出的是，<code>util.inspect</code> 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'byvoid'</span>;</span><br><span class="line">  <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(util.inspect(obj));</span><br><span class="line"><span class="built_in">console</span>.log(util.inspect(obj,<span class="literal">true</span>));</span><br><span class="line"><span class="comment">//运行结果是： </span></span><br><span class="line">Person &#123; <span class="attr">name</span>: <span class="string">'byvoid'</span>, <span class="attr">toString</span>: [<span class="built_in">Function</span>] &#125;</span><br><span class="line">Person &#123;</span><br><span class="line">  name: <span class="string">'byvoid'</span>,</span><br><span class="line">  toString:</span><br><span class="line">   &#123; [<span class="built_in">Function</span>]</span><br><span class="line">     [length]: <span class="number">0</span>,</span><br><span class="line">     [name]: <span class="string">''</span>,</span><br><span class="line">     [<span class="built_in">arguments</span>]: <span class="literal">null</span>,</span><br><span class="line">     [caller]: <span class="literal">null</span>,</span><br><span class="line">     [prototype]: &#123; [<span class="keyword">constructor</span>]: [Circular] &#125; </span><br><span class="line">  &#125; &#125;</span><br></pre></td></tr></table></figure></p><h4 id="util-isArray"><a href="#util-isArray" class="headerlink" title="util.isArray"></a>util.isArray</h4><p><code>util.isArray(object)</code>//如果给定的参数 “object” 是一个数组返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line">util.isArray([]);<span class="comment">// true</span></span><br><span class="line">util.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>);<span class="comment">// true</span></span><br><span class="line">util.isArray(&#123;&#125;);<span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h4 id="util-isRegExp"><a href="#util-isRegExp" class="headerlink" title="util.isRegExp"></a>util.isRegExp</h4><p><code>util.isRegExp(object)</code>//如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line">util.isRegExp(<span class="regexp">/some regexp/</span>);<span class="comment">// true</span></span><br><span class="line">util.isRegExp(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'another regexp'</span>));<span class="comment">// true</span></span><br><span class="line">util.isRegExp(&#123;&#125;);<span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h4 id="util-isDate"><a href="#util-isDate" class="headerlink" title="util.isDate"></a>util.isDate</h4><p><code>util.isDate(object)</code>// 如果给定的参数 “object” 是一个日期返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line">util.isDate(<span class="keyword">new</span> <span class="built_in">Date</span>());<span class="comment">// true</span></span><br><span class="line">util.isDate(<span class="built_in">Date</span>());<span class="comment">// false (without 'new' returns a String)</span></span><br><span class="line">util.isDate(&#123;&#125;);<span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h4 id="util-isError"><a href="#util-isError" class="headerlink" title="util.isError"></a>util.isError</h4><p><code>util.isError(object)</code>// 如果给定的参数 “object” 是一个错误对象返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line">util.isError(<span class="keyword">new</span> <span class="built_in">Error</span>());<span class="comment">// true</span></span><br><span class="line">util.isError(<span class="keyword">new</span> <span class="built_in">TypeError</span>());<span class="comment">// true</span></span><br><span class="line">util.isError(&#123; <span class="attr">name</span>: <span class="string">'Error'</span>, <span class="attr">message</span>: <span class="string">'an error occurred'</span> &#125;);<span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;10、Node-js-常用工具&quot;&gt;&lt;a href=&quot;#10、Node-js-常用工具&quot; class=&quot;headerlink&quot; title=&quot;10、Node.js 常用工具&quot;&gt;&lt;/a&gt;10、Node.js 常用工具&lt;/h3&gt;&lt;p&gt;&lt;code&gt;util&lt;/code&gt; 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 路由(8)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/28/Node.js%20%E8%B7%AF%E7%94%B1/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/28/Node.js 路由/</id>
    <published>2016-06-28T10:55:08.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="8、Node-js-路由"><a href="#8、Node-js-路由" class="headerlink" title="8、Node.js 路由"></a>8、Node.js 路由</h3><p>我们要为路由提供请求的<code>URL</code>和其他需要的<code>GET</code>及<code>POST</code>参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看<code>HTTP</code>请求，从中提取出请求的<code>URL</code>以及<code>GET/POST</code>参数。我们需要的所有数据都会包含在<code>request</code>对象中，该对象作为<code>onRequest()</code>回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的<code>Node.JS</code>模块，它们分别是<code>url</code>和<code>querystring</code>模块。<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">                   url.parse(string).query</span><br><span class="line">                                           |</span><br><span class="line">           url.parse(string).pathname      |</span><br><span class="line">                       |                   |</span><br><span class="line">                       |                   |</span><br><span class="line">                     ------ -------------------</span><br><span class="line">http:<span class="comment">//localhost:8888/start?foo=bar&amp;hello=world</span></span><br><span class="line">                                ---       -----</span><br><span class="line">                                 |          |</span><br><span class="line">                                 |          |</span><br><span class="line">              querystring(string)[<span class="string">"foo"</span>]    |</span><br><span class="line">                                            |</span><br><span class="line">                         querystring(string)[<span class="string">"hello"</span>]</span><br></pre></td></tr></table></figure></p><p>当然我们也可以用<code>querystring</code>模块来解析<code>POST</code>请求体中的参数，稍后会有演示。<br>现在我们来给<code>onRequest()</code>函数加上一些逻辑，用来找出浏览器请求的<code>URL</code>路径：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">"received."</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</span><br><span class="line">    response.write(<span class="string">"Hello World"</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</span><br><span class="line">&#125;</span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure></p><p>现在我们可以来编写路由了，建立一个名为<code>router.js</code>的文件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">pathname</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</span><br><span class="line">&#125;</span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure></p><p>在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来(我们将使用依赖注入的方式较松散地添加路由模块)。首先，我们来扩展一下服务器的<code>start()</code>函数，以便将路由函数作为参数传递过去：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">"received."</span>);</span><br><span class="line">    route(pathname);<span class="comment">//路由函数</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</span><br><span class="line">    response.write(<span class="string">"Hello World"</span>);</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</span><br><span class="line">&#125;</span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure></p><p>同时，我们会相应扩展<code>index.js</code>，使得路由函数可以被注入到服务器中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</span><br><span class="line">server.start(router.route);</span><br></pre></td></tr></table></figure></p><p>现在启动应用（<code>node index.js</code>），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br><span class="line">Request <span class="keyword">for</span> /foo received.</span><br><span class="line">About to route a request <span class="keyword">for</span> /foo</span><br><span class="line"><span class="comment">//以上输出已经去掉了比较烦人的`/favicon.ico`请求相关的部分。</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;8、Node-js-路由&quot;&gt;&lt;a href=&quot;#8、Node-js-路由&quot; class=&quot;headerlink&quot; title=&quot;8、Node.js 路由&quot;&gt;&lt;/a&gt;8、Node.js 路由&lt;/h3&gt;&lt;p&gt;我们要为路由提供请求的&lt;code&gt;URL&lt;/code&gt;和其他需要的&lt;code&gt;GET&lt;/code&gt;及&lt;code&gt;POST&lt;/code&gt;参数，随后路由需要根据这些数据来执行相应的代码。因此，我们需要查看&lt;code&gt;HTTP&lt;/code&gt;请求，从中提取出请求的&lt;code&gt;URL&lt;/code&gt;以及&lt;code&gt;GET/POST&lt;/code&gt;参数。我们需要的所有数据都会包含在&lt;code&gt;request&lt;/code&gt;对象中，该对象作为&lt;code&gt;onRequest()&lt;/code&gt;回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的&lt;code&gt;Node.JS&lt;/code&gt;模块，它们分别是&lt;code&gt;url&lt;/code&gt;和&lt;code&gt;querystring&lt;/code&gt;模块。&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js创建第一个应用(1)</title>
    <link href="https://jermyo.github.io/JerBlog/2016/06/27/Node.js%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8/"/>
    <id>https://jermyo.github.io/JerBlog/2016/06/27/Node.js创建第一个应用/</id>
    <published>2016-06-27T03:55:07.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Node-js创建第一个应用"><a href="#1、Node-js创建第一个应用" class="headerlink" title="1、Node.js创建第一个应用"></a>1、Node.js创建第一个应用</h3><h4 id="1-1、创建服务器"><a href="#1-1、创建服务器" class="headerlink" title="1.1、创建服务器"></a>1.1、创建服务器</h4><p>使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 8888 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据。实例如下，在项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);<span class="comment">//引入require模块</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">require, response</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//发送 HTTP 头部</span></span><br><span class="line">  <span class="comment">//HTTP 状态值：200：OK</span></span><br><span class="line">  <span class="comment">//内容类型：text/plain</span></span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</span><br><span class="line">  <span class="comment">//发送响应数据：“Hello World”</span></span><br><span class="line">  response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">//终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure></p><p>使用 node 命令执行以上的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br><span class="line">Server running at http://127.0.0.1:8888/</span><br></pre></td></tr></table></figure></p><p>接下来，打开浏览器访问 <code>http://127.0.0.1:8888/</code>，你会看到一个写着 “Hello World” 的网页。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、Node-js创建第一个应用&quot;&gt;&lt;a href=&quot;#1、Node-js创建第一个应用&quot; class=&quot;headerlink&quot; title=&quot;1、Node.js创建第一个应用&quot;&gt;&lt;/a&gt;1、Node.js创建第一个应用&lt;/h3&gt;&lt;h4 id=&quot;1-1、创建服务器&quot;&gt;&lt;a href=&quot;#1-1、创建服务器&quot; class=&quot;headerlink&quot; title=&quot;1.1、创建服务器&quot;&gt;&lt;/a&gt;1.1、创建服务器&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;http.createServer()&lt;/code&gt; 方法创建服务器，并使用 &lt;code&gt;listen&lt;/code&gt; 方法绑定 8888 端口。 函数通过 &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;response&lt;/code&gt; 参数来接收和响应数据。实例如下，在项目的根目录下创建一个叫 server.js 的文件，并写入以下代码：&lt;br&gt;
    
    </summary>
    
      <category term="nodeJS学习笔记" scheme="https://jermyo.github.io/JerBlog/categories/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="https://jermyo.github.io/JerBlog/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客优化——站内搜索、版权、IE8兼容</title>
    <link href="https://jermyo.github.io/JerBlog/2016/05/25/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96--%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E3%80%81%E7%89%88%E6%9D%83%E3%80%81IE8%E5%85%BC%E5%AE%B9/"/>
    <id>https://jermyo.github.io/JerBlog/2016/05/25/Hexo博客优化--站内搜索、版权、IE8兼容/</id>
    <published>2016-05-25T02:03:15.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-添加Hexo的swiftype站内搜索"><a href="#1-添加Hexo的swiftype站内搜索" class="headerlink" title="1.添加Hexo的swiftype站内搜索"></a>1.添加Hexo的swiftype站内搜索</h3><p>先去<a href="https://swiftype.com" target="_blank" rel="noopener">swiftype官网</a>注册一个账号,然后根据指引建立好自己网站对应的索引。<br><a id="more"></a><br>步骤：<br>     <code>Create an engine</code><br>—&gt; <code>Create a search engine &gt;(standard web crawler)</code><br>—&gt; <code>WEBSITE URL</code>下填写你的网站地址：如：<a href="http://chaooo.github.io" target="_blank" rel="noopener">http://chaooo.github.io</a><br>—&gt; <code>ENGINE NAME</code>自己取一个名字：如：chaooo<br>—&gt; 然后他开始抓取你网站的数据。<br>—&gt; 完成后，可以点击<code>Content</code>去看看抓了些什么数据，然后可以自己删除不想要的数据。（可选）<br>—&gt; 点击<code>Install Search</code>复制里面的代码：</p><p>然后在<code>themes\landscape\layout\_partial\after-footer.ejs</code>在最后加上刚复制的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</span><br><span class="line">  e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class="string">'_st'</span>); </span><br><span class="line"></span><br><span class="line">  _st(<span class="string">'install'</span>,<span class="string">'Hvy4-e-Ew4x8PR6Let84'</span>,<span class="string">'2.0.0'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>themes\landscape\_config.yml</code>末尾添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swift_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>然后到<code>themes\landscape\layout\_partial\header.ejs</code>中找到：<code>&lt;div id=&quot;search-form-wrap&quot;&gt;...&lt;/div&gt;</code>刪除里面的內容，插入如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"search-form-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"search-form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">results</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span> <span class="attr">style</span>=<span class="string">"border:none;background:none;width:161px;height:30px;line-height:30px;padding:0px 11px 0px 28px;"</span> <span class="attr">class</span>=<span class="string">"st-default-search-input search-form-input"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"search-form-submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后到<code>themes\landscape\source\css\_partial\header.styl</code>找到<code>#search-form-wrap</code>对其样式微调，大概在118行，修改后的值：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#search-form-wrap</span></span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span></span><br><span class="line">  <span class="selector-tag">top</span>: 14<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">width</span>: 200<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">height</span>: 30<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">right</span>: 35<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">opacity</span>: 0</span><br><span class="line">  <span class="selector-tag">visibility</span>: <span class="selector-tag">hidden</span></span><br><span class="line">  <span class="selector-tag">transition</span>: 0<span class="selector-class">.2s</span> <span class="selector-tag">ease-out</span></span><br><span class="line">  <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(<span class="selector-class">.5</span>) <span class="selector-tag">translate</span>(94<span class="selector-tag">px</span>, 0)</span><br><span class="line">  &amp;<span class="selector-class">.on</span></span><br><span class="line">    <span class="selector-tag">opacity</span>: 1</span><br><span class="line">    <span class="selector-tag">visibility</span>: <span class="selector-tag">visible</span></span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1) <span class="selector-tag">translate</span>(0, 0)</span><br><span class="line">  @<span class="keyword">media</span> mq-mobile</span><br><span class="line">    width: <span class="number">80%</span></span><br><span class="line">    right: -<span class="number">80%</span></span><br></pre></td></tr></table></figure></p><p>然后到<code>themes\landscape\source\css\_partial\header.styl</code>找到<code>.nav-icon</code>，大概在81行，在其后面添加(z-index: 1)：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav-icon</span></span><br><span class="line">  @<span class="keyword">extend</span> $nav-link</span><br><span class="line">  font-family: font-icon</span><br><span class="line">  text-align: center</span><br><span class="line">  font-size: font-size</span><br><span class="line">  width: font-size</span><br><span class="line">  height: font-size</span><br><span class="line">  padding: <span class="number">20px</span> <span class="number">15px</span></span><br><span class="line">  position: relative</span><br><span class="line">  cursor: pointer</span><br><span class="line">  z-index: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>注意：在使用中我发现swiftype搜索框在IE和火狐浏览器根本不能唤醒搜狗输入法的中文输入，必须要先输入一个英文字母才能输入中文，我在swiftype官网测试的swiftype搜索框也一样。（我分别测试了Chrome–v49，Firefox Developer Edition–v47，IE11/IE10/IE9,结果只有Chrome能唤起搜狗中文。）</p><h3 id="2-页尾版权信息修改"><a href="#2-页尾版权信息修改" class="headerlink" title="2. 页尾版权信息修改"></a>2. 页尾版权信息修改</h3><p>在<code>themes\landscape\layout\_partial\footer.ejs</code>中，第6行开始，修改其为居中对齐，添加网站地图、订阅、联系博主链接：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer-info"</span> <span class="attr">class</span>=<span class="string">"inner"</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span></span><br><span class="line">  Copyright &amp;copy; <span class="tag">&lt;<span class="name">%=</span> <span class="attr">date</span>(<span class="attr">new</span> <span class="attr">Date</span>(), '<span class="attr">YYYY</span>') %&gt;</span> <span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.author</span> || <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">powered_by</span>') %&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://hexo.io/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/baidusitemap.xml"</span>&gt;</span>网站地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp; &amp;nbsp;|&amp;nbsp; &amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/atom.xml"</span>&gt;</span>订阅本站<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp; &amp;nbsp;|&amp;nbsp; &amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:zhenggchaoo@gmail.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>联系博主<span class="tag">&lt;/<span class="name">a</span>&gt;</span>           </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-对于低版本IE布局微调"><a href="#3-对于低版本IE布局微调" class="headerlink" title="3. 对于低版本IE布局微调"></a>3. 对于低版本IE布局微调</h3><h4 id="3-1-加入低版本IE浏览器提醒"><a href="#3-1-加入低版本IE浏览器提醒" class="headerlink" title="3.1 加入低版本IE浏览器提醒"></a>3.1 加入低版本IE浏览器提醒</h4><p>Hexo主题大多都只完美支持IE9及以上版本的浏览器，低版本IE会影响网站体验，所以要提示浏览者及时更换现代浏览器，在<code>themes\landscape\layout\_partial\header.ejs</code>中找到<code>&lt;div id=&quot;header-outer&quot; class=&quot;outer&quot;&gt;&lt;/div&gt;</code>以其为父元素添加：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;style&gt;    </span></span><br><span class="line"><span class="comment">    .hid-ltIE9&#123;position:absolute;bottom:0;z-index:999;width:100%;line-height:46px;color:#7b1a00;font-size:14px;text-align:center;background:#fff3c8;border-radius:4px;border:1px solid #;text-shadow:0 1px #fff;-webkit-box-shadow:0 -1px 4px #ccc inset;box-shadow:0 -1px 4px #ccc inset;border:1px solid #ccc;&#125;</span></span><br><span class="line"><span class="comment">    .hid-ltIE9 a&#123;color:#258fb8;text-decoration:none;&#125;</span></span><br><span class="line"><span class="comment">    .hid-ltIE9 a:hover&#123;text-decoration:underline;&#125;</span></span><br><span class="line"><span class="comment">    .hid-exclamation-triangle,.hid-chrome,.hid-firefox&#123;font:normal normal normal 14px/1 FontAwesome;display:inline-block;width:30px;height:30px;font-size:14px;text-align:center;&#125;</span></span><br><span class="line"><span class="comment">    .hid-exclamation-triangle:before&#123;content:"\f071";&#125;</span></span><br><span class="line"><span class="comment">    .hid-chrome:before&#123;content:"\f268";&#125;</span></span><br><span class="line"><span class="comment">    .hid-firefox:before&#123;content:"\f269";&#125;</span></span><br><span class="line"><span class="comment">  &lt;/style&gt;</span></span><br><span class="line"><span class="comment">  &lt;p class="hid-ltIE9"&gt;</span></span><br><span class="line"><span class="comment">    &lt;i class="hid-exclamation-triangle" aria-hidden="true"&gt;&lt;/i&gt;重要提示：您当前使用的浏览器版本过低，可能存在安全风险！想要更好的体验，建议升级浏览器：</span></span><br><span class="line"><span class="comment">    &lt;a href="https://www.google.cn/intl/zh-CN/chrome/browser/desktop/" title="谷歌Chrome浏览器"&gt;&lt;i class="hid-chrome" aria-hidden="true"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="comment">  Chrome&lt;/a&gt;、</span></span><br><span class="line"><span class="comment">    &lt;a href="http://www.firefox.com.cn/download/"title="火狐Firefox浏览器"&gt;&lt;i class="hid-firefox" aria-hidden="true"&gt;&lt;/i&gt;Firefox&lt;/a&gt;</span></span><br><span class="line"><span class="comment">  &lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样，现代浏览器都不会解析这段代码，直到IE8及其版本的浏览器才会显示。</p><h4 id="3-2-对于旧IE-header与footer布局微调"><a href="#3-2-对于旧IE-header与footer布局微调" class="headerlink" title="3.2 (对于旧IE)header与footer布局微调"></a>3.2 (对于旧IE)header与footer布局微调</h4><p>发现博客在IE8及其版本的浏览器显示很多样式都乱掉了，特别是头部header，毕竟还有不少人用的低版本浏览器，平常工作中也要求做到兼容到IE8，所以这里只做稍微调。<br>在<code>themes\landscape\layout\_partial\header.ejs</code>中，把<code>&lt;header id=&quot;header&quot;&gt;&lt;/div&gt;</code>用下面的代码包起来：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;&lt;div id="header"&gt;&lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">   //....其他代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;&lt;/div&gt;&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p><p>在<code>themes\landscape\layout\_partial\footer.ejs</code>中，把<code>&lt;header id=&quot;footer&quot;&gt;&lt;/div&gt;</code>用下面的代码包起来：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;&lt;div id="footer"&gt;&lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">   //....其他代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;&lt;/div&gt;&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p><p>虽然这样调整并不高明，但能使其在IE8下显示效果大体上还能接受。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-添加Hexo的swiftype站内搜索&quot;&gt;&lt;a href=&quot;#1-添加Hexo的swiftype站内搜索&quot; class=&quot;headerlink&quot; title=&quot;1.添加Hexo的swiftype站内搜索&quot;&gt;&lt;/a&gt;1.添加Hexo的swiftype站内搜索&lt;/h3&gt;&lt;p&gt;先去&lt;a href=&quot;https://swiftype.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;swiftype官网&lt;/a&gt;注册一个账号,然后根据指引建立好自己网站对应的索引。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客优化——库、字体、收录、统计</title>
    <link href="https://jermyo.github.io/JerBlog/2016/05/24/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96--%E5%BA%93%E3%80%81%E5%AD%97%E4%BD%93%E3%80%81%E6%94%B6%E5%BD%95%E3%80%81%E7%BB%9F%E8%AE%A1/"/>
    <id>https://jermyo.github.io/JerBlog/2016/05/24/Hexo博客优化--库、字体、收录、统计/</id>
    <published>2016-05-24T03:22:56.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-jQuery-库的优化"><a href="#1-jQuery-库的优化" class="headerlink" title="1. jQuery 库的优化"></a>1. jQuery 库的优化</h3><p>landscape默认是使用Google jQuery 库，但在国内速度不是很理想，这里把它换成新浪的，在<code>themes\landscape\layout\_partial\after-footer.ejs</code>17行：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>替换为如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">//&lt;![CDATA[</span><br><span class="line"><span class="keyword">if</span> (typeof jQuery == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  document.write(unescape(<span class="string">"%3Cscript src='/js/jquery-2.0.3.min.js' type='text/javascript'%3E%3C/script%3E"</span>));</span><br><span class="line">&#125;</span><br><span class="line">// ]]&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这里不但将 Google 的 jQuery 替换成了 SAE 的，随后还进行了一个判断，如果获取新浪的 jQuery 失败，则使用本网站自己的 jQuery。为了让这段代码有效，我们要去 jQuery 官方下载合适版本的 jQuery 并将其放到 <code>themes/landscape/source/js/</code>目录下，命名为 <code>jquery-2.0.3.min.js</code>。<br>还有一点需要特别注意，那就是 jQuery 这个文件在 hexo 生成博客时会被解析，因此一定要将 jQuery 文件开头处的 //@ sourceMappingURL=jquery-2.0.3.min.map 这一行代码删去，否则会导致博客无法生成。</p><h3 id="2-字体优化"><a href="#2-字体优化" class="headerlink" title="2. 字体优化"></a>2. 字体优化</h3><h4 id="2-1跨平台字体优化"><a href="#2-1跨平台字体优化" class="headerlink" title="2.1跨平台字体优化"></a>2.1跨平台字体优化</h4><p>为了能在各个平台上都显示令人满意的字体，我们要修改CSS文件中的字体设置，列出多个备选的字体，操作系统会依次尝试，使用系统中已安装的字体。我们要修改的是<code>themes/landscape/source/css/_variables.styl</code>这一文件，将其中第22行:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-sans = "Helvetica Neue", Helvetica, Arial, sans-serif</span><br></pre></td></tr></table></figure></p><p>改成如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-sans = Tahoma, <span class="string">"Helvetica Neue"</span>, Helvetica, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"Microsoft YaHei Light"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"Source Han Sans CN"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, Arial, sans-serif</span><br></pre></td></tr></table></figure></p><p>其中海维提卡（Helvetica）、Arial是英文字体，前者一般存在于苹果电脑和移动设备上，后者一般存在于Windows系统中。冬青黑体（Hiragino Sans GB）、思源黑体（Source Han Sans CN）、文泉驿米黑（WenQuanYi Micro Hei）是中文字体，冬青黑体从OS X 10.6开始集成在苹果系统中，文泉驿米黑在Linux的各大发行版中均较为常见，而思源黑体是近期Google和Adobe合作推出的一款开源字体，很多电脑上也安装了这一字体。这样一来，在绝大部分操作系统中就可以显示美观的字体了。</p><h4 id="2-2代码等宽字体优化"><a href="#2-2代码等宽字体优化" class="headerlink" title="2.2代码等宽字体优化"></a>2.2代码等宽字体优化</h4><p>Hexo默认的等宽字体是Google的Source Code Pro，这里把它换成360的，在<code>themes/landscape/layout\_partial\head.ejs</code> 第31行:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//fonts.googleapis.com/css?family=Source+Code+Pro"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>改成如下内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://fonts.useso.com/css?family=Source+Code+Pro"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-hexo提交搜索引擎（百度-谷歌）"><a href="#3-hexo提交搜索引擎（百度-谷歌）" class="headerlink" title="3. hexo提交搜索引擎（百度+谷歌）"></a>3. hexo提交搜索引擎（百度+谷歌）</h3><h4 id="3-1-确认博客是否被收录"><a href="#3-1-确认博客是否被收录" class="headerlink" title="3.1 确认博客是否被收录"></a>3.1 确认博客是否被收录</h4><p>在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有，用你的域名替代我的http:chaooo.github.io<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:chaooo.github.io</span><br></pre></td></tr></table></figure></p><h4 id="3-2-验证网站"><a href="#3-2-验证网站" class="headerlink" title="3.2 验证网站"></a>3.2 验证网站</h4><p>两个搜索引擎入口：<br><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google搜索引擎提交入口</a>、<a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="noopener">百度搜索引擎入口</a>。<br>不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>source/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaooo.github.io/google4cc3eef6ff5975bf.html</code>和<code>http://chaooo.github.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照谷歌或百度的引导步骤就好)。<br>注意：若出现验证失败，则是因为hexo编译文件时，会给下载的HTML文件中添加其他的内容，导致验证失败。<br>则需要在Github里手动修改验证HTML文件，或者不编译。<br>我的做法是，删除根目录<code>source/</code>下面刚拷贝的两个文件，和编译后生成的<code>public/</code>下的两个同名文件（若细心会注意到<code>source/</code>和<code>public/</code>下的两个同名文件大小不一样）。<br>然后重新执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure></p><p>现在重新验证就通过了。</p><h4 id="3-3-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#3-3-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>3.3 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>修改 hexo_config.yml 站点配置，添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Extensions</span></span><br><span class="line">Plugins:</span><br><span class="line">  hexo-generator-feed</span><br><span class="line">  hexo-generator-sitemap</span><br><span class="line">  hexo-generator-baidu-sitemap</span><br><span class="line"></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20</span><br><span class="line"></span><br><span class="line"><span class="comment">#sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure></p><p>部署后,访问 <code>chaooo.github.io/sitemap.xml</code> 和 <code>chaooo.github.io/baidusitemap.xml</code>,就能看到有内容且第一行为:<code>该 XML 文件并未包含任何关联的样式信息。文档树显示如下。</code>,就说明成功了。<br>RSS 也差不多，访问 <code>chaooo.github.io/atom.xml</code> ，能看到订阅信息。<br>注意：把<code>chaooo.github.io</code>换成你自己的个人域名（订阅是顺带安装的，也可以后在安装）。</p><h4 id="3-4-让谷歌收录我们的博客"><a href="#3-4-让谷歌收录我们的博客" class="headerlink" title="3.4 让谷歌收录我们的博客"></a>3.4 让谷歌收录我们的博客</h4><p>谷歌操作比较简单，就是向<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google站长工具</a>提交sitemap。<br>登录Google账号，添加了站点验证通过后，选择站点，之后在<code>抓取——站点地图</code>中就能看到<code>添加/测试站点地图</code>,然后输入<code>sitemap.xml</code>点击提交。</p><h4 id="3-5-让百度收录我们的博客"><a href="#3-5-让百度收录我们的博客" class="headerlink" title="3.5 让百度收录我们的博客"></a>3.5 让百度收录我们的博客</h4><p>正常情况，是要等百度爬虫来爬到你的网站，才会被收录。<br>但是github屏蔽了百度爬虫目前，所以我们要主动出击，我们自己把网站提交给百度。<br>这就要使用到<a href="http://zhanzhang.baidu.com" target="_blank" rel="noopener">百度站长平台</a>。<br>1.进入站点管理，找到<code>网页抓取——链接提交——详情</code>点进去。<br>一般主动提交比手动提交效果好，这里介绍主动提交的两种简单的方法</p><h5 id="3-5-1-sitemap提交"><a href="#3-5-1-sitemap提交" class="headerlink" title="3.5.1 sitemap提交"></a>3.5.1 sitemap提交</h5><p>直接点击<code>sitemap</code>填写数据文件地址：<code>chaooo.github.io/baidusitemap.xml</code>,输入验证码提交。</p><h5 id="3-5-2-自动推送"><a href="#3-5-2-自动推送" class="headerlink" title="3.5.2 自动推送"></a>3.5.2 自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\themes\landscape\layout\_partial\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="http://tengj.top/2016/03/14/baidunoshouluresson/" target="_blank" rel="noopener">百度链接提交主动推送后不收录的原因</a></p><h3 id="4-开启谷歌统计-google-analysis"><a href="#4-开启谷歌统计-google-analysis" class="headerlink" title="4. 开启谷歌统计(google analysis)"></a>4. 开启谷歌统计(google analysis)</h3><p>先到<a href="https://analytics.google.com/" target="_blank" rel="noopener">google analysis</a>注册服务，注册时，需要正确填写 网站的URL。注册成功后，会得到一个跟踪ID，以及一段跟踪代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跟踪 ID</span></span><br><span class="line"><span class="comment">// UA-58387143-1</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  (i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),</span><br><span class="line">  m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'https://www.google-analytics.com/analytics.js'</span>,<span class="string">'ga'</span>);</span><br><span class="line">  ga(<span class="string">'create'</span>, <span class="string">'UA-58387143-1'</span>, <span class="string">'auto'</span>);</span><br><span class="line">  ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>到<code>\themes\landscape\layout\_config.yml</code>中,将google analysis打开：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">google_analytics:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  id: UA-58387143-1 <span class="comment">#刚注册获取的ID</span></span><br></pre></td></tr></table></figure></p><p>如果设置不起作用，检查在<code>themes\pacman\layout\_partial\</code>下有没有google_analytics.ejs ，有的话就在<code>\themes\landscape\layout\_partial\head.ejs</code>的<code>&lt;/head&gt;</code>之前，添加下面代码试试：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">'google_analytics'</span>) %&gt;</span><br></pre></td></tr></table></figure></p><p>若<code>themes\pacman\layout\_partial\</code>不存在google_analytics.ejs 文件，就手动创建：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.google_analytics)&#123; %&gt;</span><br><span class="line">&lt;!-- Google Analytics --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),</span><br><span class="line">m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><br><span class="line">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//www.google-analytics.com/analytics.js'</span>,<span class="string">'ga'</span>);</span><br><span class="line">ga(<span class="string">'create'</span>, <span class="string">'&lt;%= theme.google_analytics %&gt;'</span>, <span class="string">'auto'</span>);</span><br><span class="line">ga(<span class="string">'send'</span>, <span class="string">'pageview'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- End Google Analytics --&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p><p>最笨的方法就是删除<code>google_analytics.ejs</code>和刚在<code>_config.yml</code>配置google analysis的几行代码，直接从注册来的代码拷贝到<code>\themes\landscape\layout\_partial\head.ejs</code>的<code>&lt;/head&gt;</code>之前。</p><h3 id="5-文章永久链接"><a href="#5-文章永久链接" class="headerlink" title="5. 文章永久链接"></a>5. 文章永久链接</h3><p>默认文章链结是以: <code>http://chaooo.github.io/2016/05/24/文章标题/</code> 的格式，末尾没有.html结尾，有点动态页面的感觉，好像对搜索引擎不太友好，于是可以修改根目录下的 <code>_config.yml</code> 文件里:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title.html</span><br></pre></td></tr></table></figure></p><p>最后浏览器访问就是<code>http://chaooo.github.io/2016/05/24/文章标题.html</code> 的格式了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-jQuery-库的优化&quot;&gt;&lt;a href=&quot;#1-jQuery-库的优化&quot; class=&quot;headerlink&quot; title=&quot;1. jQuery 库的优化&quot;&gt;&lt;/a&gt;1. jQuery 库的优化&lt;/h3&gt;&lt;p&gt;landscape默认是使用Google jQuery 库，但在国内速度不是很理想，这里把它换成新浪的，在&lt;code&gt;themes\landscape\layout\_partial\after-footer.ejs&lt;/code&gt;17行：&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客优化——主题、分享、评论、微博秀</title>
    <link href="https://jermyo.github.io/JerBlog/2016/05/23/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96--%E4%B8%BB%E9%A2%98%E3%80%81%E5%88%86%E4%BA%AB%E3%80%81%E8%AF%84%E8%AE%BA%E3%80%81%E5%BE%AE%E5%8D%9A%E7%A7%80/"/>
    <id>https://jermyo.github.io/JerBlog/2016/05/23/Hexo博客优化--主题、分享、评论、微博秀/</id>
    <published>2016-05-23T06:30:13.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇<a href="Hexo3-2-github搭建静态博客.html">Hexo3.2+GitHub搭建静态博客</a>。</p><h3 id="1-主题"><a href="#1-主题" class="headerlink" title="1.主题"></a>1.主题</h3><p>Hexo提供了很多主题，具体可参见<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes|Hexo</a>，这里我选择默认主题<a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="noopener">landscape</a>(此主题默认已安装)。<br><a id="more"></a> </p><h4 id="1-1安装主题"><a href="#1-1安装主题" class="headerlink" title="1.1安装主题"></a>1.1安装主题</h4><p>将Git Shell切换到根目录，执行下列命令，将主题下载到themes/spfk目录下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/hexojs/hexo-theme-landscape.git themes/landscape</span><br></pre></td></tr></table></figure></p><p>获取landscape主题的最新版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/landscape</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure></p><p>修改在根目录下_config.yml 配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape</span><br></pre></td></tr></table></figure></p><h3 id="2-修改添加分享链接"><a href="#2-修改添加分享链接" class="headerlink" title="2.修改添加分享链接"></a>2.修改添加分享链接</h3><h4 id="2-1原生分享的修改"><a href="#2-1原生分享的修改" class="headerlink" title="2.1原生分享的修改"></a>2.1原生分享的修改</h4><p>在<code>themes\landscape\source\js\script.js</code>中，57行 <code>&lt;div class=&quot;article-share-links&quot;&gt;</code>下面的四个链接就是 Facebook 等社交网站的分享链接。将其替换或添加如下代码，即可实现分享到国内社交网站：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&lt;a href="http://service.weibo.com/share/share.php?&amp;title=好东西就要一起分享&amp;language=zh_cn&amp;url='</span> + encodedUrl + <span class="string">'" class="article-share-sina" target="_blank" title="微博"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"><span class="string">'&lt;a href="http://share.renren.com/share/buttonshare.do?link='</span> + encodedUrl + <span class="string">'" class="article-share-renren" target="_blank" title="人人"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"><span class="string">'&lt;a href="http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url='</span> + encodedUrl + <span class="string">'" class="article-share-qq" target="_blank" title="QQ空间"&gt;&lt;/a&gt;'</span>,</span><br><span class="line"><span class="string">'&lt;a href="http://qr.liantu.com/api.php?text='</span> + encodedUrl + <span class="string">'" class="article-share-wechat" target="_blank" title="微信"&gt;&lt;/a&gt;'</span>,</span><br></pre></td></tr></table></figure></p><p>同时，还需要替换图标。本主题使用 Font Awesome 来显示图标，但内置的 Font Awesome 版本较旧，无法显示 QQ、微信等图标，所以，需要下载最新版 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a>，替换掉 <code>themes\landscape\source\css\fonts</code>中相关文件，并在<code>themes\landscape\source\css\_variables.styl</code>中27行的 <code>font-icon-version</code> 修改为最新的 Font Awesome 版本号。</p><p>然后，在 <code>themes\landscape\source\css\_partial\article.styl</code> 中，找到四段以 <code>.article-share-***</code>开头的代码（273行起），添加如下内容：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.article-share-sina</span><br><span class="line">  @extend <span class="variable">$article</span>-share-link</span><br><span class="line">  &amp;:before</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\f18a"</span></span><br><span class="line">  &amp;:hover</span><br><span class="line">    <span class="attribute">background</span>: color-sina</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> darken(color-sina, <span class="number">20%</span>)</span><br><span class="line"></span><br><span class="line">.article-share-qq</span><br><span class="line">  @extend <span class="variable">$article</span>-share-link</span><br><span class="line">  &amp;:before</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\f1d6"</span></span><br><span class="line">  &amp;:hover</span><br><span class="line">    <span class="attribute">background</span>: color-qq</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> darken(color-qq, <span class="number">20%</span>)</span><br><span class="line"></span><br><span class="line">.article-share-renren</span><br><span class="line">  @extend <span class="variable">$article</span>-share-link</span><br><span class="line">  &amp;:before</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\f18b"</span></span><br><span class="line">  &amp;:hover</span><br><span class="line">    <span class="attribute">background</span>: color-renren</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> darken(color-renren, <span class="number">20%</span>)</span><br><span class="line"></span><br><span class="line">.article-share-wechat</span><br><span class="line">  @extend <span class="variable">$article</span>-share-link</span><br><span class="line">  &amp;:before</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\f1d7"</span></span><br><span class="line">  &amp;:hover</span><br><span class="line">    <span class="attribute">background</span>: color-wechat</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> darken(color-wechat, <span class="number">20%</span>)</span><br></pre></td></tr></table></figure></p><p>最后，找到 <code>themes\landscape\source\css\_variables.styl</code> 中 Colors 部分（16行），最后四行分别为社交网站图标的背景色，可根据这些网站的主题色修改。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>-sina = <span class="number">#ff8140</span></span><br><span class="line"><span class="attribute">color</span>-qq = <span class="number">#ffcc33</span></span><br><span class="line"><span class="attribute">color</span>-renren = <span class="number">#227dc5</span></span><br><span class="line"><span class="attribute">color</span>-wechat = <span class="number">#44b549</span></span><br></pre></td></tr></table></figure></p><h4 id="2-2加入百度分享"><a href="#2-2加入百度分享" class="headerlink" title="2.2加入百度分享"></a>2.2加入百度分享</h4><p>首先在_config.yml中增加bdshare_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bdshare_shortname: http://chaooo.github.io/</span><br></pre></td></tr></table></figure></p><p>在百度分享获取代码后，代码可分为两部分。<br>在<code>themes\landscape\layout\_partial\article.ejs</code>中第26行插入第一段代码并添加判断条件，若当前页为文章展开页则显示百度分享框，若是缩略则采用原生分享链接，避免百度分享框获取的 URL 错误：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> ((<span class="attr">page.layout</span> == <span class="string">'post'</span>|| <span class="attr">page.layout</span> == <span class="string">'page'</span>))&#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bdsharebuttonbox"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"float:left;line-height:16px;height:16px;margin: 6px 6px 6px 0;"</span>&gt;</span>分享到：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"分享到新浪微博"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bds_tsina"</span> <span class="attr">data-cmd</span>=<span class="string">"tsina"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"分享到QQ空间"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bds_qzone"</span> <span class="attr">data-cmd</span>=<span class="string">"qzone"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"分享到微信"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bds_weixin"</span> <span class="attr">data-cmd</span>=<span class="string">"weixin"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"分享到人人网"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bds_renren"</span> <span class="attr">data-cmd</span>=<span class="string">"renren"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"分享到Facebook"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bds_fbook"</span> <span class="attr">data-cmd</span>=<span class="string">"fbook"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"分享到一键分享"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bds_mshare"</span> <span class="attr">data-cmd</span>=<span class="string">"mshare"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bds_more"</span> <span class="attr">data-cmd</span>=<span class="string">"more"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-url</span>=<span class="string">"&lt;%- post.permalink %&gt;"</span> <span class="attr">data-id</span>=<span class="string">"&lt;%= post._id %&gt;"</span> <span class="attr">class</span>=<span class="string">"article-share-link"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">share</span>') %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Baidu Share Start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>._bd_share_config=&#123;<span class="string">"common"</span>:&#123;<span class="string">"bdSnsKey"</span>:&#123;&#125;,<span class="string">"bdText"</span>:<span class="string">"好东西就要一起分享~"</span>,<span class="string">"bdMini"</span>:<span class="string">"2"</span>,<span class="string">"bdMiniList"</span>:[<span class="string">"mshare"</span>,<span class="string">"qzone"</span>,<span class="string">"tsina"</span>,<span class="string">"weixin"</span>,<span class="string">"sqq"</span>,<span class="string">"douban"</span>,<span class="string">"tqq"</span>,<span class="string">"renren"</span>,<span class="string">"kaixin001"</span>,<span class="string">"tqf"</span>,<span class="string">"linkedin"</span>,<span class="string">"ty"</span>,<span class="string">"fbook"</span>,<span class="string">"twi"</span>,<span class="string">"copy"</span>,<span class="string">"print"</span>],<span class="string">"bdPic"</span>:<span class="string">""</span>,<span class="string">"bdStyle"</span>:<span class="string">"1"</span>,<span class="string">"bdSize"</span>:<span class="string">"16"</span>&#125;,<span class="string">"share"</span>:&#123;&#125;,<span class="string">"image"</span>:&#123;<span class="string">"viewList"</span>:[<span class="string">"mshare"</span>,<span class="string">"weixin"</span>,<span class="string">"qzone"</span>,<span class="string">"tsina"</span>],<span class="string">"viewText"</span>:<span class="string">"分享到："</span>,<span class="string">"viewSize"</span>:<span class="string">"16"</span>&#125;,<span class="string">"selectShare"</span>:&#123;<span class="string">"bdContainerClass"</span>:<span class="literal">null</span>,<span class="string">"bdSelectMiniList"</span>:[<span class="string">"mshare"</span>,<span class="string">"weixin"</span>,<span class="string">"qzone"</span>,<span class="string">"tsina"</span>]&#125;&#125;;<span class="keyword">with</span>(<span class="built_in">document</span>)<span class="number">0</span>[(getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]||body).appendChild(createElement(<span class="string">'script'</span>)).src=<span class="string">'http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='</span>+~(-<span class="keyword">new</span> <span class="built_in">Date</span>()/<span class="number">36e5</span>)];</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Baidu Share End --&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-加入多说评论"><a href="#3-加入多说评论" class="headerlink" title="3.加入多说评论"></a>3.加入多说评论</h3><p>首先在_config.yml中增加duoshuo_shortname: 你站点的short_name，这里的short_name也就是你的二级域名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duoshuo_shortname: http://chaooo.github.io/</span><br></pre></td></tr></table></figure></p><p>如果使用的是默认的landscape主题只需要修改<code>themes\landscape\layout\_partial\article.ejs</code>中的disqus评论：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.comments</span> &amp;&amp; <span class="attr">config.disqus_shortname</span>)&#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"disqus_thread"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p><p>改为多说评论：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.comments</span> &amp;&amp; <span class="attr">config.duoshuo_shortname</span>)&#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多说评论框 start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span> <span class="attr">data-thread-key</span>=<span class="string">"&lt;%= post.path %&gt;"</span> <span class="attr">data-title</span>=<span class="string">"&lt;%= post.title %&gt;"</span> <span class="attr">data-url</span>=<span class="string">"&lt;%= post.url %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多说评论框 end --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> duoshuoQuery = &#123;<span class="attr">short_name</span>:<span class="string">"chaooo"</span>&#125;;</span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">    ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</span></span><br><span class="line"><span class="javascript">    ds.charset = <span class="string">'UTF-8'</span>;</span></span><br><span class="line"><span class="javascript">    (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </span></span><br><span class="line"><span class="javascript">     || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span></span><br><span class="line"><span class="undefined">  &#125;)();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果是其他主题，也只需要修改主题\layout_partial\comment.ejs<br>注意<code>多说的Thread Key一定不要改变，Thread Key相当于是识别码；如果改变了的话，评论清空。</code></p><h3 id="4-侧栏微博秀"><a href="#4-侧栏微博秀" class="headerlink" title="4. 侧栏微博秀"></a>4. 侧栏微博秀</h3><p>登录<a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="noopener">新浪微博开放平台</a>来获取微博秀的代码，将其样式调整与主题一致，关掉各种边框和标题栏。然后新建themes/landscape/layout/_widget/weibo.ejs这个文件，将刚刚获取到的代码添加到这个文件中。最后编辑themes/landscape/_config.yml，在widgets:标签后面的适当位置添加- weibo。这样微博秀应该就可以显示在你的博客上了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget"</span> <span class="attr">style</span>=<span class="string">"padding: 0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">class</span>=<span class="string">"share_self"</span>  <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">src</span>=<span class="string">"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=2&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,dddddd,555555,837f86,cccccc&amp;dpc=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中，<code>&lt;iframe...&gt;&lt;/iframe&gt;</code>为获取微博秀的代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇&lt;a href=&quot;Hexo3-2-github搭建静态博客.html&quot;&gt;Hexo3.2+GitHub搭建静态博客&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;1-主题&quot;&gt;&lt;a href=&quot;#1-主题&quot; class=&quot;headerlink&quot; title=&quot;1.主题&quot;&gt;&lt;/a&gt;1.主题&lt;/h3&gt;&lt;p&gt;Hexo提供了很多主题，具体可参见&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Themes|Hexo&lt;/a&gt;，这里我选择默认主题&lt;a href=&quot;https://github.com/hexojs/hexo-theme-landscape&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;landscape&lt;/a&gt;(此主题默认已安装)。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo3.2+GitHub搭建静态博客</title>
    <link href="https://jermyo.github.io/JerBlog/2016/05/23/Hexo3-2-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>https://jermyo.github.io/JerBlog/2016/05/23/Hexo3-2-github搭建静态博客/</id>
    <published>2016-05-23T03:16:51.000Z</published>
    <updated>2017-07-09T15:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>在安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>之前，必须确认你已经安装了<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>。<br><a id="more"></a> </p><h4 id="1-创建GitHub仓库"><a href="#1-创建GitHub仓库" class="headerlink" title="1.创建GitHub仓库"></a>1.创建GitHub仓库</h4><p>注册<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：<a href="https://github.com/chaooo/chaooo.github.io" target="_blank" rel="noopener">chaooo.github.io</a>，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。</p><h4 id="2-配置Git"><a href="#2-配置Git" class="headerlink" title="2.配置Git"></a>2.配置Git</h4><p>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"username"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure></p><h4 id="3-本地Git与GitHub建立联系"><a href="#3-本地Git与GitHub建立联系" class="headerlink" title="3.本地Git与GitHub建立联系"></a>3.本地Git与GitHub建立联系</h4><p>这里介绍SSH的配置，先检查电脑是否已经有SSH<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure></p><p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"emailt@example.com"</span></span><br></pre></td></tr></table></figure></p><p>然后键入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent -s</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>如果出现这个错误:<code>Could not open a connection to your authentication agent</code>，则先执行如下命令即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent bash</span><br></pre></td></tr></table></figure></p><p>再重新输入指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>在github上点击你的头像–&gt;Your profile–&gt;Edit profile–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后还是测试一下吧，键入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>你可能会看到有警告，没事，输入“yes”就好。</p><h4 id="4-初始化hexo文件夹"><a href="#4-初始化hexo文件夹" class="headerlink" title="4.初始化hexo文件夹"></a>4.初始化hexo文件夹</h4><p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。<br>在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制的地址&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br><span class="line">$ mkdir Hexo-admin</span><br></pre></td></tr></table></figure></p><h3 id="Hexo安装配置"><a href="#Hexo安装配置" class="headerlink" title="Hexo安装配置"></a>Hexo安装配置</h3><h4 id="1-Hexo初始化"><a href="#1-Hexo初始化" class="headerlink" title="1.Hexo初始化"></a>1.Hexo初始化</h4><p>进入Hexo-admin文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Hexo-admin</span><br></pre></td></tr></table></figure></p><p>接下来只需要使用 npm 即可完成 Hexo 的安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>输入Ctrl+C停止服务。</p><h4 id="2-Hexo配置"><a href="#2-Hexo配置" class="headerlink" title="2.Hexo配置"></a>2.Hexo配置</h4><p>用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: </span><br><span class="line">  repository:</span><br></pre></td></tr></table></figure></p><p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/chaooo/chaooo.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h4 id="3-完成部署"><a href="#3-完成部署" class="headerlink" title="3.完成部署"></a>3.完成部署</h4><p>最后一步，快要成功了，键入指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：<a href="http://chaooo.github.io/" target="_blank" rel="noopener">chaooo.github.io/</a><br>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">To https://github.com/chaooo/chaooo.github.io.git</span><br><span class="line">   7f3b50a..128a10d  HEAD -&gt; master</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: git</span><br></pre></td></tr></table></figure></p><p>当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。</p><h3 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h3><h4 id="1-写文章"><a href="#1-写文章" class="headerlink" title="1.写文章"></a>1.写文章</h4><p>执行new命令，生成指定名称的文章至 Admin-blog\source_posts\文章标题.md 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] <span class="string">"文章标题"</span> <span class="comment">#新建文章</span></span><br></pre></td></tr></table></figure></p><p>然后用编辑器打开“文章标题.md”按照<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown语法</a>书写文章。<br> 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，<br> 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\scaffolds\post.md<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: &#123; &#123; title &#125; &#125;</span><br><span class="line">date: &#123; &#123; date &#125; &#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: &#123; &#123; title &#125; &#125;</span><br><span class="line">date: &#123; &#123; date &#125; &#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。<br><code>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件&quot;：&quot;后面都必须有个空格，不然会报错。</code></p><h4 id="2-提交"><a href="#2-提交" class="headerlink" title="2.提交"></a>2.提交</h4><p>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"..."</span></span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><p>然后才执行hexo generate -d发布网站到master分支上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate -d</span><br></pre></td></tr></table></figure></p><h4 id="3-本地仓库丢失"><a href="#3-本地仓库丢失" class="headerlink" title="3.本地仓库丢失"></a>3.本地仓库丢失</h4><p>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</p><h5 id="3-1拷贝仓库"><a href="#3-1拷贝仓库" class="headerlink" title="3.1拷贝仓库"></a>3.1拷贝仓库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</span><br></pre></td></tr></table></figure><h5 id="3-2配置Hexo"><a href="#3-2配置Hexo" class="headerlink" title="3.2配置Hexo"></a>3.2配置Hexo</h5><p>在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ npm install hexo</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><h5 id="小Tips-hexo-命令"><a href="#小Tips-hexo-命令" class="headerlink" title="小Tips:hexo 命令"></a>小Tips:hexo 命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo deploy -g  <span class="comment">#生成加部署</span></span><br><span class="line">hexo server -g  <span class="comment">#生成加预览</span></span><br><span class="line"><span class="comment">#命令的简写</span></span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;在安装&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;之前，必须确认你已经安装了&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt;和&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://jermyo.github.io/JerBlog/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://jermyo.github.io/JerBlog/tags/hexo/"/>
    
  </entry>
  
</feed>
